<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>UZABASE Tech Blog</title>
    <link>http://tech.uzabase.com/</link>
    <description>株式会社ユーザベースの技術チームブログです。 主に週次の持ち回りLTやセミナー・イベント情報について書きます。</description>
    <lastBuildDate>Thu, 07 Jun 2018 12:04:32 +0900</lastBuildDate>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <generator>Hatena::Blog</generator>
    
      
      
        <item>
          <title>GaugeのConceptを用いてテストシナリオをより仕様書のように記述する</title>
          <link>http://tech.uzabase.com/entry/2018/06/07/120432</link>          <description>&lt;p&gt;こんにちは！&lt;/br&gt;
SPEEDA日本事業部でテストエンジニアをやっている工藤です。&lt;/p&gt;

&lt;p&gt;前回の記事から、大分時間が経ってしまいましたがGaugeシリーズの第二回目です。&lt;/br&gt;
第一回目の記事は&lt;a href=&quot;http://tech.uzabase.com/entry/2017/09/26/191009&quot;&gt;こちらから&lt;/a&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;今回はGaugeの「Concept」について書きます。
Conceptsを利用することで「実行可能なドキュメント(executable documentation)」という考え方をより実現しやすくなります。&lt;/p&gt;

&lt;h2&gt;Conceptとは&lt;/h2&gt;

&lt;p&gt;Conceptとは、Gaugeが提供する複数のStepをまとめて1つのStepとして記述することができる機能です。 &lt;/br&gt;
ビジネス上使用する言語を複数のStepを使用して表現することができます。&lt;/br&gt;
例えば「ログイン」と一概に言っても、自動テストのStepで表現しようとすると下記のようになります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ログインページにアクセスする&lt;/li&gt;
&lt;li&gt;ログインIDを入力する&lt;/li&gt;
&lt;li&gt;パスワードを入力する&lt;/li&gt;
&lt;li&gt;ログインボタンをクリックする&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Conceptを利用すると、上記４Stepを下記の１Stepにまとめることができます。&lt;/br&gt;
Specファイルの見た目上は１Stepになりますが、裏側では上記の４Stepが実行されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ログインする&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Conceptの使い方&lt;/h2&gt;

&lt;p&gt;Conceptの定義の仕方ですが、まず &lt;code&gt;.cpt&lt;/code&gt; ファイルをspecsディレクトリに作成します。&lt;/br&gt;
Conceptの定義に必要な記述は以下の２つになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Concept header&lt;/li&gt;
&lt;li&gt;Step&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Concept headerは以下のように文頭に &lt;code&gt;#&lt;/code&gt; をつけて表現します。&lt;/br&gt;
&lt;code&gt;# This is a concept header&lt;/code&gt; &lt;/br&gt;
Stepの記述方法は通常のテストシナリオと同じです。&lt;/p&gt;

&lt;p&gt;以下に具体的な使用例を挙げます。&lt;/br&gt;
&lt;code&gt;login.cpt&lt;/code&gt;にConceptを定義します。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# Login as user A and go to page B // Concept header
* Login as user &amp;#34;user_a&amp;#34; and password &amp;#34;password&amp;#34; // Step1
* Navigate to page &amp;#34;B&amp;#34; // Step2&lt;/pre&gt;


&lt;p&gt;上記で定義したConceptはどのSpecファイルからでも利用することができ、通常のStepのように利用することができます。Conceptを利用するときは、cptファイルに定義したConcept headerで呼び出すことができます。&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pageNaviagetion.spec&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# Page Navigation Specification
## users can go to page B
* Login as user A and go to page B // Concept headerで呼び出す&lt;/pre&gt;


&lt;p&gt;特にStepを再利用可能なように細かい単位で書いている場合、Stepだけだと手順を羅列しているだけになってしまい仕様書のような形にするのが難しいです。&lt;/br&gt;
そんなときにConceptを利用することで、Step単体の再利用性を損なわずにSpecファイルの可読性を上げることができます。&lt;/br&gt;
例えば、下記のようなStepのみで記述されたシナリオがあったとします&lt;/br&gt;
&lt;code&gt;login.spec&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;## 日本ユーザでログインした場合、TOP画面が日本語で表示される
* ログインIDに&amp;#34;japan_user&amp;#34;を入力する
* パスワードに&amp;#34;password&amp;#34;を入力する
* ログインボタンをクリックする
* TOP画面が表示される
* 言語で日本語が選択されている
* TOP画面の表記が日本語になっている&lt;/pre&gt;


&lt;p&gt;これだと手順の羅列のようになっていて、仕様書のような記述になっていません。
そこでConceptを下記のように定義します。&lt;/br&gt;
&lt;code&gt;loginStep.cpt&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# 日本語ユーザでログインすると
* ログインIDに&amp;#34;japan_user&amp;#34;を入力する
* パスワードに&amp;#34;password&amp;#34;を入力する
* ログインボタンをクリックする

# TOP画面が日本語で表示される
* TOP画面が表示される
* 言語で日本語が選択されている
* TOP画面の表記が日本語になっている&lt;/pre&gt;


&lt;p&gt;上記のConceptを利用すると、Specファイルを下記のように書き換えることができます。
より仕様のようになり、可読性も上がりました。&lt;/br&gt;
&lt;code&gt;login.spec&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;## 日本ユーザでログインした場合、TOP画面が日本語で表示される
* 日本語ユーザでログインすると
* TOP画面が日本語で表示される&lt;/pre&gt;


&lt;p&gt;以下のようにConceptの中でConceptを使うこともできます。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# 日本語ユーザでログインすると、TOP画面が日本語で表示される
* 日本ユーザでログインすると
* TOP画面が日本語で表示される&lt;/pre&gt;


&lt;h2&gt;HTMLレポート上のConceptの表示のされかた&lt;/h2&gt;

&lt;p&gt;Conceptを紹介するとよく聞かれるのが、下記のような質問です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTMLで出力されるレポートにはどう表示されるのか？&lt;/li&gt;
&lt;li&gt;Conceptの定義（実際に実行しているStep）をHTMLレポート上で見れるのか？&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;上記のような点もGaugeのHTMLレポートはちゃんと考えられていて、下記画像のようにConceptは展開することができて、どんな手順が実行されているか確認することができます。&lt;/p&gt;

&lt;p&gt;HTMLレポ―トの表示（Conceptが閉じた状態）
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kudogen/20180605/20180605115845.png&quot; alt=&quot;f:id:kudogen:20180605115845p:plain&quot; title=&quot;f:id:kudogen:20180605115845p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Conceptを展開したときの表示
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kudogen/20180605/20180605115854.png&quot; alt=&quot;f:id:kudogen:20180605115854p:plain&quot; title=&quot;f:id:kudogen:20180605115854p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Conceptまとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;複数のStepをまとめて1つのStepとして扱える&lt;/li&gt;
&lt;li&gt;Conceptを使用すると、SpecファイルでのStepの記述量が減らせる&lt;/li&gt;
&lt;li&gt;SPEEDA開発ではテストシナリオの記述をより仕様書のようにし、可読性をあげるためにConceptを利用している&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;さいごに&lt;/h2&gt;

&lt;p&gt;SPEEDA開発チームでは現在テストエンジニアを絶賛募集中です。
少しでもご興味のある方は、&lt;a href=&quot;https://www.uzabase.com/recruit/occupation/&quot;&gt;こちら&lt;/a&gt;からご連絡ください。&lt;/p&gt;
</description>          <pubDate>Thu, 07 Jun 2018 12:04:32 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/17391345971651229364</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kudogen/20180605/20180605115845.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>モンスト、スマニュー、Wi2の運用秘話多数！ 「SRE Lounge #3」レポート</title>
          <link>http://tech.uzabase.com/entry/2018/05/23/173105</link>          <description>&lt;p&gt;株式会社ユーザベースのSPEEDA Japan Company、Site Reliability Engineering （SRE） Teamの川口です。
先日、「SRE Lounge #3」という勉強会を開催しました。
発表企業4社のみ参加の非公開な会でしたが、ここでしか聞けないようなディープな話題が満載でした。&lt;/p&gt;

&lt;h2&gt;目的&lt;/h2&gt;

&lt;p&gt;「SRE Lounge」は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;各社SREチームの取り組み事例の共有（情報交換・発信）&lt;/li&gt;
&lt;li&gt;SREそのものについて議論し、知見を深める&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;といったことを目指して行われている勉強会です。&lt;/p&gt;

&lt;p&gt;開催の背景や、そもそもSREとは何かについては、&lt;a href=&quot;http://tech.uzabase.com/entry/2018/01/26/200021&quot;&gt;「SRE Lounge #1」の記事&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;h2&gt;開催日時&lt;/h2&gt;

&lt;p&gt;2018年5月17日(木) 午後7時30分 開始&lt;/p&gt;

&lt;h2&gt;会場&lt;/h2&gt;

&lt;p&gt;今回は、ミクシィ様本社のコラボレーションスペースをお借りしました。
広くておしゃれなカフェのような雰囲気で、窓からの眺めも良く、渋谷の夜景がきれいでした。
ランチや社内の打ち合わせだけでなく、今回のようなセミナーやイベントにも使用されているということです。&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;会場のミクシィ様本社コラボレーションスペース&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180522/20180522233522.jpg&quot; alt=&quot;f:id:uzabase:20180522233522j:plain&quot; title=&quot;f:id:uzabase:20180522233522j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;会場のミクシィ様本社コラボレーションスペース&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h3&gt;参加企業&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.uzabase.com/&quot;&gt;ユーザベース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wi2.co.jp/jp/&quot;&gt;ワイヤ・アンド・ワイヤレス&lt;/a&gt;様&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://about.smartnews.com/ja/&quot;&gt;スマートニュース&lt;/a&gt;様&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mixi.co.jp/&quot;&gt;ミクシィ&lt;/a&gt;様&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;※発表順&lt;/p&gt;

&lt;h2&gt;発表内容&lt;/h2&gt;

&lt;p&gt;当日のスケジュールは以下の通りです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;各社の取り組み事例等の発表と質疑応答（各社20分程度）&lt;/li&gt;
&lt;li&gt;発表を踏まえた意見交換会（30分程度）&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ピザやお酒を取りながら、終始和やかな雰囲気で行いました。&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;スマートニュース様の発表を真剣に聞く皆様&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180522/20180522234242.jpg&quot; alt=&quot;f:id:uzabase:20180522234242j:plain&quot; title=&quot;f:id:uzabase:20180522234242j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;スマートニュース様の発表を真剣に聞く皆様&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h3&gt;ユーザベース　&lt;/h3&gt;

&lt;p&gt;企業・業界情報プラットフォーム「SPEEDA」のシステム構成の変遷を紹介しました。&lt;/p&gt;

&lt;p&gt;サービスの成長に伴い、プロダクトチーム（dev）とSREチーム（ops）のやり取りでのオーバーヘッドが多くなったため、
開発チームだけでCI／CDまで完結出来る環境を構築しました。
具体的には、Kubernetes＋Rancherの構成となっています。
クラスタレベルロギングアーキテクチャを採用し、各APから出力されたJSON形式のログを、fluentd経由でバックエンドのBigQueryに格納していることも特長です。&lt;/p&gt;

&lt;p&gt;質疑応答では、アラート発生時の一次調査担当や、システム環境の統制などが多く挙がり、どの企業でも苦労されているようです。&lt;/p&gt;

&lt;p&gt;当日発表資料：&lt;a href=&quot;https://speakerdeck.com/toshianan/sre-lounge-number-3-uzabase&quot;&gt;SRE Lounge#3 UZABASE&lt;/a&gt;&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;877dfbb3b03143d3897cabad3eeffde7&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;h3&gt;ワイヤ・アンド・ワイヤレス様&lt;/h3&gt;

&lt;p&gt;「Wi2」などのWi-Fiサービスを提供されるワイヤ・アンド・ワイヤレス様には、
サービス提供環境のオンプレミス環境からクラウド環境移行への歩みについて、詳しく紹介いただきました。&lt;/p&gt;

&lt;p&gt;オートスケーリングやコスト削減を期待してクラウドを導入したものの、なかなか思惑通りにいかず苦労されたそう。
しかし、少しずつ安定し、知識も得られてきたということで、サーバレス化やAWSの新しいサービスの利用も進めているとのことです。&lt;/p&gt;

&lt;p&gt;Wi-Fiサービスならではの苦労も少なくない中、今後もアグレッシブに挑戦していきたいそうです。&lt;/p&gt;

&lt;p&gt;当日発表資料：&lt;a href=&quot;https://www.slideshare.net/secret/Af5BwaYzB5Xa19&quot;&gt;Sre wi2 20180517&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;ワイヤ・アンド・ワイヤレス様発表中&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180522/20180522234647.jpg&quot; alt=&quot;f:id:uzabase:20180522234647j:plain&quot; title=&quot;f:id:uzabase:20180522234647j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;ワイヤ・アンド・ワイヤレス様発表中&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h3&gt;スマートニュース様&lt;/h3&gt;

&lt;p&gt;ニュースアプリを提供されるスマートニュース様には、SREチームで担当されている膨大な業務範囲から、「モニタリング」「障害振り返り」の2つを紹介いただきました。&lt;/p&gt;

&lt;p&gt;モニタリングでは、各リソースに適した様々なシステムを駆使しての監視を行っているということで、各社で参考になる部分も多かったと思います。&lt;/p&gt;

&lt;p&gt;障害振り返りでは、障害発生時のインシデントレポート作成や、事後のインシデントレビューを行っており、再発防止策のトラッキングも工夫されているようです。
また、インシデントレビューの読書会も検討されているそうで、この辺りはまた詳しく聞いてみたいです。&lt;/p&gt;

&lt;p&gt;質疑応答では、ニュースアプリならではの話題として、プッシュ通知時のアクセス集中対策の話が盛り上がりました。&lt;/p&gt;

&lt;p&gt;当日発表資料：&lt;a href=&quot;https://speakerdeck.com/nobu666/sre-at-smartnews&quot;&gt;SRE at SmartNews&lt;/a&gt;&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;51a50a394c8d40ac93ac6067a0854436&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;h3&gt;ミクシィ様&lt;/h3&gt;

&lt;p&gt;最後に、ミクシィ様のXFLAGスタジオから、「モンスターストライク」（モンスト）用に構築されているマルチクラウド環境について紹介いただきました。&lt;/p&gt;

&lt;p&gt;「モンスト」のようなソーシャルゲームでは、例えばイベント期間だけ爆発的にアクセスが増えるため、サーバを短期間だけ増強する必要があります。
元々はオンプレミス環境で運用していましたが、最適な構成を模索するうちに、複数のクラウド環境を併用するに至ったそうです。
そのためのネットワーク構成や管理面での工夫や、各クラウドごとの癖についての話もありました。&lt;/p&gt;

&lt;p&gt;SNSからの大規模サービス構築・運用ノウハウのあるミクシィ様ならではの内容で、当社とはスケールの違う話にワクワクしました。&lt;/p&gt;

&lt;p&gt;当日発表資料：&lt;a href=&quot;https://speakerdeck.com/tmkoikee/sre-lounge-at-xflag&quot;&gt;モンストのマルチクラウドについて / sre-lounge-at-xflag&lt;/a&gt;&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;d8442a228f9143ad96b19df482b5dca6&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;h2&gt;発表を終えて&lt;/h2&gt;

&lt;p&gt;各企業のサービス内容やSREチームの守備範囲、SREに対する考え方など、これまでのSRE Lounge以上にバラエティーに富んでいて、とても興味深かったです。
また、各社の発表内容がディープで、質疑応答や意見交換会も大変活発でした。
当初予定していた時間を大幅に超えてしまいましたが、皆様多くのものを得られたのではないかと思います。ありがとうございました。&lt;/p&gt;

&lt;p&gt;「SRE Lounge」は、今後も開催していく予定です。
興味を持たれた方や、発表してみたいという企業の方は sre@uzabase.com までメールにてご連絡ください。
また、Facebookの&lt;a href=&quot;https://www.facebook.com/groups/178417569426196/&quot;&gt;「SRE community」&lt;/a&gt;でも情報共有、交流を行っています。非公開グループですが、お気軽にご参加いただければ幸いです。&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;今回参加いただいた各社の皆様&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180522/20180522231824.jpg&quot; alt=&quot;f:id:uzabase:20180522231824j:plain&quot; title=&quot;f:id:uzabase:20180522231824j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;今回参加いただいた各社の皆様&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h3&gt;仲間募集！！&lt;/h3&gt;

&lt;p&gt;ユーザベースのSPEEDA SREチームは、
&lt;b&gt;「No Challenge, No SRE, No SPEEDA」&lt;/b&gt;
を掲げて業務に取り組んでいます。&lt;/p&gt;

&lt;p&gt;「挑戦しなければ、SREではないし、SREがなければ、SPEEDAもない」という意識の元、ユーザベースのミッションである
&lt;b&gt;「経済情報で、世界をかえる」&lt;/b&gt;
の実現に向けて、日々邁進しています。&lt;/p&gt;

&lt;p&gt;少しでも興味を持ってくださった方は&lt;a href=&quot;https://uzabase-inc.workable.com/jobs/626352&quot;&gt;こちら&lt;/a&gt;まで！&lt;/p&gt;
</description>          <pubDate>Wed, 23 May 2018 17:31:05 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/17391345971645640737</guid>
          
            <category>SRE</category>
          
            <category>勉強会</category>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180522/20180522231824.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>JaSST&#39;18 Tokyoに参加してきました！！</title>
          <link>http://tech.uzabase.com/entry/2018/04/13/165451</link>          <description>&lt;p&gt;こんにちは、ユーザベースのPDT(Product Development Team)です。&lt;/p&gt;

&lt;p&gt;我々PDTは今年3月7日と8日にJasst’18 Tokyoに参加してきました。
今年のJaSSTではユーザベースはスポンサーとして協賛したので、私たち社員は無料で参加することができました。大変ありがたい話です。
今年もたくさんのセッションがあり、たくさん有用なお話が聞けました。
今回は私たちが参加したセッションについて紹介していきたいと思います。&lt;/p&gt;

&lt;h1&gt;各セッションの紹介&lt;/h1&gt;

&lt;h2&gt;A1. 基調講演 「Advances in Continuous Integration Testing at Google」&lt;/h2&gt;

&lt;p&gt;Googleで長年CI/CDに取り組んできたJohn Micco 氏による講演でした。&lt;/p&gt;

&lt;p&gt;Testing Scale at Google ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;420万件のテストが継続的に実行されている&lt;/li&gt;
&lt;li&gt;1日に1億5000万件のテストが実行されている（1日平均35回テスト実行）&lt;/li&gt;
&lt;li&gt;99％のテストがパスする&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;講演資料の2Pより
&lt;a href=&quot;http://jasst.jp/symposium/jasst18tokyo/pdf/A1.pdf&quot;&gt;http://jasst.jp/symposium/jasst18tokyo/pdf/A1.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まず規模感とテスト文化の説明があり、Googleは翻訳関連とUX関連のテスト以外はすべて自動テスト化されているらしく本当に圧倒的でした。。。
次に、これだけのテストをどうやって実行するのかのための施策として、必要なリグレッションテストケースの選定の話。
そして２日目のTutorialの内容でもあるテストメトリクスの分析について説明されていました。
定期的に実行される自動テストの結果から、バグを生んだコミットを探す方法やFlakyTests（不安定なテスト）を探すためのアプローチをかなり詳しく聞けてとても興味深かったです。&lt;/p&gt;

&lt;p&gt;質疑応答では、マニュアルと自動テストの費用対効果の質問が結構出ていましたが、自動テストは当然なのでマニュアルテストとかありえない的な回答。日本のソフトウェア開発にこの文化が根付く日が早く来てほしいです。&lt;/p&gt;

&lt;h2&gt;E2. やってみよう！探索的テスト〜ハイクオリティな妄想の高速ループ〜&lt;/h2&gt;

&lt;p&gt;Jasst ’17 Hokkaidoの実行委員中岫さんと根本さんによる、ハンズオン形式の探索的テストのセッションでした。&lt;/p&gt;

&lt;p&gt;このセッションではherokuに設置されたWebアプリケーションに対して、実際にみんなで探索的テストをやってみるといった内容でした。私は開発者なので、普段は「期待通りに動いていること」を保証するテストなら自動テストで行なっています。しかし、バグを叩き出すことを目的としたテストはあまり経験がないので非常に新鮮な体験なりました。ちなみに多い人は20個ほどバグを発見できたそうですが、私は2個でした(笑)。&lt;/p&gt;

&lt;p&gt;最後に他の方達とどんなバグを出したかを話す時間がありましたが、そこで出たバグの内容の違いに驚きました。私が見つけようとしていたバグは、システム自体が使い物にならなくなるようなバグのみでした。しかし、他の方はユーザにとって使い勝手が悪いと感じる仕様や、通常の運用ではしないような入力を与えたことで発生する事象もバグとして記録していました。開発のエンジニアとテストエンジニアとの間でテストの視点が全く違うのだなぁと感じました。&lt;/p&gt;

&lt;h2&gt;C4-1. 探索的テストにおけるストーリーベースのアプローチ&lt;/h2&gt;

&lt;p&gt;NTTデータ熊川さんによる探索的テストに関する研究発表でした。&lt;/p&gt;

&lt;p&gt;タイトル的にアジャイル開発でよく聞く「ストーリー」のことかと思いましたが、ここでのストーリーは本来の意味の物語をさしています。人間は自身の体験を物語形式のパターンとして当てはめる傾向があるらしいです。熊川さんの手法は探索的テストで利用するチャーターを物語の形式にすることで、テスターの知識や経験を探索的テストに反映させやすくするというアプローチを取っていました。&lt;/p&gt;

&lt;p&gt;結果としては、従来手法より圧倒的に優れた訳ではありませんでしたがアプローチそのものは非常に面白いと思いました。&lt;/p&gt;

&lt;h2&gt;C4-2. NGT記法を応用した不具合分析からのテスト補強&lt;/h2&gt;

&lt;p&gt;ベリサーブ吉川さんによる、足りないテストケースを補うためのアプローチに関するセッションでした。&lt;/p&gt;

&lt;p&gt;NGTとはテスト観点図を作成するための表記法です。吉川さんはテスト観点ではなく、発見した不具合の持つ要素にたいしてNGTを適用して不具合分析を行い、導出した要素から別のテストケースを作る手法を提案していました。結果としては提案手法を使うことで、既存のテストケースだけでは取り逃がしていた可能性のある不具合を見つけることができていました。&lt;/p&gt;

&lt;p&gt;個人的には不具合の持つ要素も結局はテスト観点になるのではないかと思います。本来、テストに必要になりそうな要素ならなんでもテスト観点になり得ます。なので不具合そのものはテスト観点でないにしてもそこから導出される要素はやはりテスト観点だと考えられます。そういう意味では、このセッションの本質はテストフェーズでテストアーキテクチャを見直しませんか？という提案ではないかと思いました。&lt;/p&gt;

&lt;h2&gt;D4.「無料で始める！「龍が如く」を面白くするための高速デバッグログ分析と自動化」&lt;/h2&gt;

&lt;p&gt;元ゲームプログラマであり「龍が如くスタジオ」専属QAエンジニアの阪上さんによる、テストの自動化とそのログ解析方法についてのセッションでした。&lt;/p&gt;

&lt;p&gt;セッションのメイントピックは kibana + fluentd + elasticsearch を組み合わせたデバッグログの分析だったのです、その前段として、自動テストでゲームを全クリできるほど自動化されているというのが衝撃でした。実際にキャプチャ/リプレイでオートメーションされたテストのデモも見れて面白かったです。
自動テストをバグ出しのために使うだけでなく、テスト結果を分析してゲームのチューニングに利用しているという１つ上のレベルの取り組みをされていて日本企業でここまで成功している事例があることに驚きました。&lt;/p&gt;

&lt;h2&gt;B5. ケーススタディで学ぶ仕様の書き方&lt;/h2&gt;

&lt;p&gt;川口さんによる、形式手法に関するセッションでした。&lt;/p&gt;

&lt;p&gt;形式手法は仕様を厳密なルールで記述することで、仕様の曖昧さを排除できたり、仕様の矛盾をプログラムで自動的に発見できるなど非常に高度な手法です。川口さんは組み込みシステムの振る舞いの仕様を状態遷移図を使って形式化し、それに対してモデル検査をかけて曖昧な点や矛盾をなくすアプローチについて説明していました。&lt;/p&gt;

&lt;p&gt;しかし、このセッションで最も有用だったのは形式手法そのものより、既存のシステムにたいして新しい機能を追加しなければならない状況で、1から仕様書を作成するときのノウハウを共有していただけたことだと思います。具体的にどうするかというと、新しい仕様については全て状態遷移図を書きます。その時に既存の部分と密接な関わりがあるならば、新しい仕様の状態遷移図に対して既存の仕様の要素を追加します。つまり、新しい部分は全て記述し、既存の部分は必要な分のみ追加するということです。既存の部分に対してまで、網羅的に仕様書を作っているとコストがかかりすぎるのでこのようなアプローチが重要なようでした。&lt;/p&gt;

&lt;h2&gt;E5. 海外のテスト技術動向 ～カンファレンス、国際会議、海外テストチームの現場から～&lt;/h2&gt;

&lt;p&gt;パネリスト：辰巳さん、松尾さん、山口 さんによる海外のカンファレンスや海外でのテストチームの編成に関するセッションでした。&lt;/p&gt;

&lt;p&gt;辰巳さんのパートでは、海外のソフトウェアテストのカンファレンスについて概要と歴史などを紹介されていました。
2018年も海外でこんなにカンファレンスがあるようです。&lt;a href=&quot;http://www.softwaretestingmagazine.com/software-testing-conferences/&quot;&gt;http://www.softwaretestingmagazine.com/software-testing-conferences/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;やはり日本よりも海外のほうがだいぶ先行していることを改めて感じました。
印象に残ったのは、どうやって情報収集しているのかという質問に対して「SNSやネットでひたすら追いかけている」と応えていらっしゃったことです。興味があるものに関して言語を超えて情報収集し、そこから更に発信していく姿勢にとても刺激を受けました。&lt;/p&gt;

&lt;p&gt;続いて、山口さんのパートではSTARWESTとAgileTestingDaysに実際に参加した感想を発表されていました。
STARWESTはディズニーランドホテルでやってるとのこと。参加費がJaSST’の8倍くらいかかってるのに参加者は同じくらいいるそうです。
ソフトウェアテスト製品のベンダーがスポンサーにたくさんついていて、講演者も多いとのこと。講演者と講演後に個別に質問などができる機会が設けられているが質問というより営業に近いと言っていたのも日本とは違うなという印象でした。&lt;/p&gt;

&lt;p&gt;最後に、松尾さんが海外にテストチームを組成する際の経験談についてお話しされていました。Uzabaseでも海外開発チームの組成を進めていますが、やはり大変なところは採用というのは共通してるようです。実際に自分で海外企業の面接を受けてみて知見をつけてから採用活動に取り組んでいるというお話もされてました。優秀な人材を見つけるにはちゃんと調査や準備が大事ということですね。&lt;/p&gt;

&lt;p&gt;セッションを通じていえるのは、日本にとどまらず海外の事例に学ぶ姿勢を持つのが大切だということです。パネラーの方々のように積極的に良いものを探し出して取り込んでいけると理想的ですね。&lt;/p&gt;

&lt;h2&gt;A7. 招待講演 「私が経験したソフトウェアテストの変遷」&lt;/h2&gt;

&lt;p&gt;現在のソフトウェア開発にいたるまでの「技術的変遷」とTDD、CI/CDのお話し。柴田さんご自身の富士ゼロックス、リコーでデジタル複合機の開発をされた際の経験談についての講演でした。&lt;/p&gt;

&lt;p&gt;前半では、過去の偉大なエンジニアたちがいかにしてTDDにいったたのかをわかりやすく説明されていて、その意義を再認識しました。最初にテストコードを実装してからプロダクトコードの実装をすることで、開発者へのフィードバックループをいかに短くし、すぐにバグや設計ミスをすぐに修正できるようにする、というTDDの手法はUzabaseでも導入していますが、品質とスピードを担保するためにすごく考えられて作られた手法なのですね。過去の偉人に感謝。&lt;/p&gt;

&lt;p&gt;後半のご自身のマルチスレッドプログラミングに関するトライ＆エラーの経験談で印象にのこったのが、開発者全員が毎晩自動テストを実行していたところ、3か月前にコミットされたコードに問題があることが発見されてとのお話しでした。これも自動テストがなければ絶対見つからないよねって感じで自動テストってほんとに大事だと思わされました。
自動テストを大切な資産ととらえて開発チームみんなで認識してメンテナンスしGREENにし続けていかなければと強く感じました。&lt;/p&gt;

&lt;h1&gt;終わりに&lt;/h1&gt;

&lt;p&gt;いかがだったでしょうか。
JaSSTでは本当にたくさんのセッションがあり、非常に勉強になります。
周りきれなかったセッションもありますがそちらもきっと為になる話が聞けのではないかと思います。&lt;/p&gt;
</description>          <pubDate>Fri, 13 Apr 2018 16:54:51 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/17391345971634758896</guid>
          
          <enclosure url="https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>JaSST&#39;18 Tokyoゴールドスポンサーとして協賛しました！</title>
          <link>http://tech.uzabase.com/entry/2018/04/06/170959</link>          <description>&lt;p&gt;こんにちは！
SPEEDAのテストエンジニアをやっている工藤です。&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;ユーザベースとして、2018/03/07(水)ー03/08(木)に開催された &lt;a href=&quot;http://www.jasst.jp/symposium/jasst18tokyo.html&quot;&gt;&lt;strong&gt;JaSST&#39;18 Tokyo&lt;/strong&gt;&lt;/a&gt; を協賛いたしました。&lt;/br&gt;
今回は協賛した理由とそこから読み取れる弊社でテストエンジニアとして働くことの価値を書きます。&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kudogen/20180320/20180320101504.jpg&quot; alt=&quot;f:id:kudogen:20180320101504j:plain&quot; title=&quot;f:id:kudogen:20180320101504j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;JaSST Tokyoとは&lt;/h3&gt;

&lt;p&gt;JaSST Tokyoとは業種や職種を問わずソフトウェアテストに関心がある方が一同に集まる、国内最大のソフトウェアテストシンポジウムです。&lt;/br&gt;
JaSST’18 Tokyoには2日間で延べ1600人を超えるエンジニアが参加し、一時Twitterのランキングで6位になるなど大盛り上がりのカンファレンスでした。&lt;/br&gt;
当日盛会の様子は下記からご覧ください。&lt;/br&gt;
&lt;a href=&quot;http://jasst-tokyo.hatenablog.jp/entry/2018/03/10/091246&quot;&gt;JaSST Tokyo実行委員ブログ&lt;/a&gt;&lt;/br&gt;
&lt;a href=&quot;http://www.jasst.jp/symposium/jasst18tokyo/report.html#invitation&quot;&gt;JaSST&#39;18 Tokyoレポートページ&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;ゴールドスポンサーとして協賛した理由&lt;/h3&gt;

&lt;p&gt;この度は、&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;SPEEDA開発でも様々なOSSを利用したりとコミュニティ活動の恩恵を受けているので、このような活動をサポートすることでコミュニティに還元していきたい。&lt;/strong&gt;」&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;という想いでゴールドスポンサーとして協賛いたしました。&lt;/p&gt;

&lt;p&gt;元々SPEEDA開発では、エンジニアがコミュニティ活動などに積極的に関わることが推奨されています。&lt;/br&gt;
そんな背景もあり、私（工藤）もJaSST Tokyoの実行委員として活動しておりました。&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;特にテストはSPEEDA開発において最も大事にしていることの一つなので、ゴールドスポンサーという形でソフトウェアテストのシンポジウムを協賛できたことはとてもうれしく思っています。&lt;/p&gt;

&lt;h3&gt;SPEEDAプロダクトチームでテストエンジニアとして働くことの価値&lt;/h3&gt;

&lt;p&gt;今回、JaSST Tokyoを協賛・参加して改めて「SPEEDAプロダクトチームでテストエンジニアとして働くことの価値」について考え、以下に挙げてみました。&lt;/br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;基本的に各チームに権限が委譲されているので自動テストや新技術の導入はエンジニアドリブンで行うことができる&lt;/li&gt;
&lt;li&gt;テストを下に見るような変な風潮はない&lt;/li&gt;
&lt;li&gt;チームとしてテストを大事にしているからこそ、テストエンジニアとしては価値を出しやすい&lt;/li&gt;
&lt;li&gt;常にチームとして技術的なチャレンジを行っているので、エンジニアとして成長しやすい環境がある&lt;/li&gt;
&lt;li&gt;テストエンジニアも開発チームの一員となって動くので、開発側の知識もつけていける&lt;/li&gt;
&lt;li&gt;前述の通り、コミュニティ活動などに理解があり、推奨されている&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;今後もSPEEDA開発として、JaSSTのみならず様々なコミュニティ活動に貢献していきたいと思っています。&lt;/p&gt;

&lt;p&gt;現在、技術的にチャレンジしたい、成長したいテストエンジニアを募集しております！&lt;/br&gt;
少しでも気になった方は&lt;a href=&quot;https://www.uzabase.com/recruit/occupation/&quot;&gt;こちらまで&lt;/a&gt;！&lt;/p&gt;
</description>          <pubDate>Fri, 06 Apr 2018 17:09:59 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/17391345971627447906</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kudogen/20180320/20180320101504.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>はじめてのDuct</title>
          <link>http://tech.uzabase.com/entry/2018/04/03/115236</link>          <description>&lt;p&gt;　SPEEDA開発の中村です。今回の内容は，弊社主催のclj-ebisu #2で発表した「実践Duct（仮）」です。
Clojureのサーバサイドフレームワーク&lt;a href=&quot;https://github.com/duct-framework/duct&quot;&gt;Duct&lt;/a&gt;を業務で使って学んだことを紹介します。
&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fconnpass.com%2Fevent%2F75698%2F&quot; title=&quot;clj-ebisu #2 (2018/02/15 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://connpass.com/event/75698/&quot;&gt;connpass.com&lt;/a&gt;&lt;/cite&gt;
勉強会で発表した資料はこちらです。&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;d385ea75c5804d7ca42678120f5c83fc&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;　はじめに，Ductのコアで使われているフレームワーク&lt;a href=&quot;https://github.com/weavejester/integrant&quot;&gt;Integrant&lt;/a&gt;を紹介し，
サーバサイドでIntegrantを使って感じた課題についてお話しします。
次に，課題に役立つDuctのmoduleのしくみと作り方を説明します。
想定読者は，Clojureを書いたことがあってDuctを使ったことがない方です。&lt;/p&gt;

&lt;p&gt;目次&lt;/p&gt;

&lt;ul class=&quot;table-of-contents&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;#Integrantのつかいかた&quot;&gt;Integrantのつかいかた&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#Integrantなせかい&quot;&gt;Integrantなせかい&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#Integrantでこまること&quot;&gt;Integrantでこまること&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#Ductのmodule&quot;&gt;Ductのmodule&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#Ductでこまること&quot;&gt;Ductでこまること&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#Ductによるコンフィグレーションマップの展開&quot;&gt;Ductによるコンフィグレーションマップの展開&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#Ductのmoduleのつくりかた&quot;&gt;Ductのmoduleのつくりかた&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#参考資料&quot;&gt;参考資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;Integrantのつかいかた&quot;&gt;Integrantのつかいかた&lt;/h2&gt;

&lt;p&gt;　Integrantは，アプリケーションのモジュール構成をmapやednのようなデータで表現するためのDIフレームワークの一種です。
Integrantは，アプリケーション起動時にデータが示すモジュールの依存関係を解決し，アプリケーションを初期化します。
Integrantのドキュメントでは，データで構造が表現されたアプリケーションをデータドリブンアーキテクチャと呼んでいます。&lt;/p&gt;

&lt;p&gt;　まず，例題を通してIntegrantのイメージをつかみましょう。とりあげる例題は，ヘルスチェックを行うringサーバのハンドラを初期化する処理です。
&lt;code&gt;get-health&lt;/code&gt;は引数に与えられたURL先のステータスを問い合わせる関数と考えてください。&lt;/p&gt;

&lt;pre class=&quot;code lang-clojure&quot; data-lang=&quot;clojure&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;(def&lt;/span&gt; endpoint “http://localhost/health”&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;defn&lt;/span&gt; handler &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;request&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;get&lt;/span&gt;-health endpoint&lt;span class=&quot;synSpecial&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;defn&lt;/span&gt; -main &lt;span class=&quot;synSpecial&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;jetty/run-jetty handler &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:port &lt;span class=&quot;synConstant&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;なんてことはないプレーンなコードですが，変数や関数のスコープが必要以上に大きいという問題があります。
&lt;code&gt;main&lt;/code&gt;は&lt;code&gt;handler&lt;/code&gt;に，&lt;code&gt;handler&lt;/code&gt;は&lt;code&gt;endpoint&lt;/code&gt;に依存しており，本来&lt;code&gt;main&lt;/code&gt;から&lt;code&gt;endpoint&lt;/code&gt;が見える必要はありません。
しかし，&lt;code&gt;main&lt;/code&gt;と&lt;code&gt;endpoint&lt;/code&gt;がグローバルなスコープを持っているため，お互いに参照できるようになっています。
関数のスコープは呼び出される関数だけから見える大きさで十分です。&lt;/p&gt;

&lt;p&gt;　Integrantは，このスコープと依存解決の問題をクロージャで解決します。
次の2つのコードは上のコードをIntegrantで再実装したものです。
この2つのコードは，上段が&lt;code&gt;defmethod&lt;/code&gt;で囲まれたモジュールの実装で，下段がモジュール間の依存関係の定義するednです。
依存するオブジェクトをdispatchの引数として関数に与えることで，Integrantはスコープを小さくします。&lt;/p&gt;

&lt;pre class=&quot;code lang-clojure&quot; data-lang=&quot;clojure&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;defmethod&lt;/span&gt; ig/init-key :ebisu/hanlder
  &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;_ endpoint&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;(fn&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;request&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;get&lt;/span&gt;-health endpoint&lt;span class=&quot;synSpecial&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;defmethod&lt;/span&gt; ig/init-key :ebisu/jetty
  &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;_ &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:&lt;span class=&quot;synIdentifier&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;handler&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt; :as options&lt;span class=&quot;synSpecial&quot;&gt;}]&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;jetty/run-jetty handler options&lt;span class=&quot;synSpecial&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;




&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;{:ebisu/handler “http://localhost/health”
 :ebisu/jetty {:handler #ig/ref :ebisu/handler
               :port 3000}}&lt;/pre&gt;


&lt;p&gt;　この依存関係を宣言するednが，コンフィグレーションマップと呼ばれるアプリケーションの構造を定義するデータです。
マップの最上位の各キーはそれぞれモジュールであり，キーの値はモジュールの初期化に必要な別モジュールや値です。
&lt;code&gt;#ig/ref&lt;/code&gt;を使えば別のキーワードを参照できます。
ここでは，ハンドラはURLに依存し，jettyサーバはハンドラとポート番号に依存するという関係があります。&lt;/p&gt;

&lt;p&gt;　アプリケーションを初期化するには，コンフィグレーションマップを&lt;code&gt;integrant.core/init&lt;/code&gt;に渡します。&lt;/p&gt;

&lt;pre class=&quot;code lang-clojure&quot; data-lang=&quot;clojure&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;integrant.core/init 
  &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;integrant.core/read-string &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;slurp&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;config.edn&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;init&lt;/code&gt;は，最上位のキーの値がマルチメソッドの返り値に置き換わったマップを返します。
上の例であれば，&lt;code&gt;init&lt;/code&gt;は，マップにある&lt;code&gt;:ebisu/handler&lt;/code&gt;が&lt;code&gt;get-health&lt;/code&gt;を本体で呼び出す高階関数に置き換わったマップを返します。&lt;/p&gt;

&lt;p&gt;　余談ですが，IntegrantもDuctもClojureのライブラリをたくさん作られているweavejester先生の作品です。
本稿ではDuctより先にIntengrantについて説明しますが，IntegrantはDuctより後に生まれたフレームワークです。
Integrantが担っているDuctの機能には，もともと&lt;a href=&quot;https://github.com/stuartsierra/component&quot;&gt;Component&lt;/a&gt;が使われていました。
後に，先生は何かに不満を覚えたのか，Componentを使っていた部分をIntegrantに置き換えました。&lt;/p&gt;

&lt;h2 id=&quot;Integrantなせかい&quot;&gt;Integrantなせかい&lt;/h2&gt;

&lt;p&gt;　これまでみたように，Integrantは，モジュールの実装(&lt;code&gt;defmethod&lt;/code&gt;の本体)とアプリケーションの構造(コンフィグレーションマップ)にプログラムを分離します。
次は，分割の後ろにある考え方を説明します。&lt;/p&gt;

&lt;p&gt;　Integrantは，Arachneから影響を受けて作られたため，Arachneの考えを受け継いでいます。
Arachneの世界観を詳しく知りたい方は，Clojure eXchange 2016での作者による&lt;a href=&quot;https://skillsmatter.com/skillscasts/8717-arachne-building-a-framework-in-clojure&quot;&gt;プレゼンテーション&lt;/a&gt;を観るとよいでしょう。
プレゼン前半のテーマは，フレームワークとライブラリの違いです。
自分たちのコードを呼び出す側にあるのがフレームワークで呼び出される側にあるのがライブラリ，
そしてフレームワークはアプリケーションの構造を規定する，という主張でした。
テーマの後ろには制御の反転やハリウッドの法則があります。&lt;/p&gt;

&lt;p&gt;　IntegrantはArachneのアイデアをベースにしているので，Integrantにも，アプリケーションの構造を定義する役割があります。
モジュールを指すシグネチャがあれば，アプリケーションの構造（モジュールの依存関係）を宣言できます。
モジュールの実装はアプリケーションを実際に起動するまでいりません。
このように，モジュールの実装とモジュール間の依存関係は別の関心事とみなせることができます。
それゆえに，関心の分離にしたがって，Integrantは，モジュールの実装とモジュールの依存関係をマルチメソッドとコンフィグレーションマップに分けています。&lt;/p&gt;

&lt;h2 id=&quot;Integrantでこまること&quot;&gt;Integrantでこまること&lt;/h2&gt;

&lt;p&gt;　弊社では，Clojureで作るものは主にWebアプリケーションです。
Webアプリケーションには，ルーティングやDBアクセスなどドメインを問わず実装すべきものがあります。
フルスタック系のWebフレームワークであればこれらをサポートしているものもありますが，Integrantにはありません。
使いたい機能があれば，自分でそれをIntegrantのモジュールにする必要があります。&lt;/p&gt;

&lt;h2 id=&quot;Ductのmodule&quot;&gt;Ductのmodule&lt;/h2&gt;

&lt;p&gt;　DuctはIntegrantをベースとするサーバサイドのフレームワークです。
フレームワークとしてIntegrantと同じ役割を果たし，
module&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;と呼ばれる形式でアプリケーションを問わずよく使われる機能を提供しています。
moduleを使えば，Integrantで必要だったボイラープレートコードを減らせることができます。
有名なmoduleはductのリポジトリのREADMEで紹介されています。
&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fduct-framework%2Fduct&quot; title=&quot;duct-framework/duct&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/duct-framework/duct&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2 id=&quot;Ductでこまること&quot;&gt;Ductでこまること&lt;/h2&gt;

&lt;p&gt;　上のサイトを見た方は気づいたかと思いますが，執筆時点においてmoduleの数は多くありません。
moduleを使えばボイラープレートコードを減らすことができますが，なければどうしようもありません。
アプリケーション間で再利用したいコードがあり，その機能を担うmoduleがないのであれば，moduleを自分で作るしかないでしょう。&lt;/p&gt;

&lt;p&gt;　ところが，module同様に，moduleを作るための参考資料もまた少ないのです。
いざmoduleを自作してみようとしたところ，情報が少なくて困りました。
そこで，moduleの作成する上で知っておくと役立つmoduleの振る舞いと作り方について紹介します。&lt;/p&gt;

&lt;h2 id=&quot;Ductによるコンフィグレーションマップの展開&quot;&gt;Ductによるコンフィグレーションマップの展開&lt;/h2&gt;

&lt;p&gt;　moduleのしごとは，アプリケーションの&lt;code&gt;ig/init-key&lt;/code&gt;マルチメソッドを呼び出す前にコンフィグレーションマップにエントリを追加したり，
追加したエントリに対応する実装（マルチメソッド）を提供したりすることです。
Integrantではアプリケーションの初期化手順は&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;(read step) コンフィグレーションマップを読み込み&lt;/li&gt;
&lt;li&gt;(init step) &lt;code&gt;init-key&lt;/code&gt;マルチメソッドを呼び出す&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;という2手順に分解できます。
Ductにはread stepとinit stepの間にprep stepがあり，prep stepでコンフィグレーションマップが展開されます。&lt;/p&gt;

&lt;p&gt;　一例として，&lt;a href=&quot;https://github.com/duct-framework/module.logging&quot;&gt;logging module&lt;/a&gt;が，コンフィグレーションマップを書き換える過程を追ってみましょう。
moduleは，自分たちで作るモジュールと同様，Integrantのキーワードにすぎません。
logging moduleの場合は&lt;code&gt;:duct.module/logging&lt;/code&gt;です。
以下では，&lt;code&gt;dev&lt;/code&gt;で開発環境用のコンフィグレーションマップを読み込んで初期化処理をread stepまで進めています。&lt;/p&gt;

&lt;pre class=&quot;code lang-clojure&quot; data-lang=&quot;clojure&quot; data-unlink&gt;$ cat resources/ebius/config.edn
&lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:duct.module/logging &lt;span class=&quot;synSpecial&quot;&gt;{}&lt;/span&gt;
  ...&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
$ lein repl
user =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;dev&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;
:loaded
&lt;/pre&gt;


&lt;p&gt;　次に&lt;code&gt;prep&lt;/code&gt;でprep stepまで進めます。
&lt;code&gt;config&lt;/code&gt;を評価すると展開後のコンフィグレーションマップを確認できます。&lt;/p&gt;

&lt;pre class=&quot;code lang-clojure&quot; data-lang=&quot;clojure&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;dev&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt; =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;prep&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;
:prepped
dev =&amp;gt; &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;pprint config&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:duct.logger/timbre &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:level :debug,
                             :appenders &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;: ...&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
 :duct.logger.timbre/spit &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:fname “logs/..”&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
 :duct.module/logging &lt;span class=&quot;synSpecial&quot;&gt;{}&lt;/span&gt;
 ...&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;コンフィグレーションマップにログのレベルや出力先が追加されました。
logging moduleはロギングライブラリ&lt;a href=&quot;https://github.com/ptaoussanis/timbre&quot;&gt;timbre&lt;/a&gt;を利用するため，追加されたキーワードには&lt;code&gt;timbre&lt;/code&gt;が含まれています。&lt;/p&gt;

&lt;p&gt;　最後に&lt;code&gt;go&lt;/code&gt;を呼び出すことで，展開後のコンフィグレーションマップに従い初期化されたWebサーバが起動します。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;(go)
:duct.server.http.jetty/starting-server
{:port 3000}
:initiated&lt;/pre&gt;


&lt;h2 id=&quot;Ductのmoduleのつくりかた&quot;&gt;Ductのmoduleのつくりかた&lt;/h2&gt;

&lt;p&gt;　ここまでで，外から見たmoduleの振る舞いを確認しました。
次は，Google pubsubを非同期pullで購読するためのmoduleの実装&lt;code&gt;duct.module/message&lt;/code&gt;を作り，moduleの振る舞いの実装方法を紹介します。&lt;/p&gt;

&lt;p&gt;　例題で扱うのは，公式の&lt;a href=&quot;https://cloud.google.com/pubsub/docs/pull?authuser=2&amp;amp;hl=ja&quot;&gt;pull サブスクライバー ガイド&lt;/a&gt;にあるjavaコードです。
プロジェクトIDとサブスクリプションIDで指定したキューからのメッセージの受け取り処理を開始するプログラムです。
このJavaコードは，Clojureで次のように書き直せます。&lt;/p&gt;

&lt;pre class=&quot;code lang-clojure&quot; data-lang=&quot;clojure&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;(def&lt;/span&gt; s-name // -&amp;gt; moduleに
  &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;SubscriptionName/create “project-id” “subscription-id”&lt;span class=&quot;synSpecial&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;synSpecial&quot;&gt;(def&lt;/span&gt; receiver // -&amp;gt; ig/init
  &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;reify&lt;/span&gt; MessageReceiver
    &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;receiveMessage &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;this message consume&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;. message getData&lt;span class=&quot;synSpecial&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;synSpecial&quot;&gt;(def&lt;/span&gt; subscriber
  &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;Subscriber/newBuilder s-name receiver&lt;span class=&quot;synSpecial&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;. &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;. subscriber build&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt; startAsync&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt; // -&amp;gt; protocol
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;s-name&lt;/code&gt;で購読するキューを指定，&lt;code&gt;receiver&lt;/code&gt;でメッセージを処理し，
&lt;code&gt;subscriber&lt;/code&gt;が受信したメッセージを&lt;code&gt;receiver&lt;/code&gt;に渡しています。
moduleが担う処理はドメインを問わず行うべき処理なので，&lt;code&gt;s-name&lt;/code&gt;を文字列から作る処理をmodule化することを目指しましょう。&lt;/p&gt;

&lt;p&gt;　leiningenプロジェクトをDuctのmoduleにするには，&lt;code&gt;src&lt;/code&gt;に以下のようなマップが書かれたファイル&lt;code&gt;duct_hierarchy.edn&lt;/code&gt;を作る必要があります。&lt;/p&gt;

&lt;pre class=&quot;code lang-clojure&quot; data-lang=&quot;clojure&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:duct.module/message &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;:duct/module&lt;span class=&quot;synSpecial&quot;&gt;]}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;コンフィグレーションマップのキーワード間には継承関係を定義でき，
これにより，クラスの継承と同じ考え方でコンフィグレーションマップの抽象度を上げることができます。
全てのmoduleのキーワードは，&lt;code&gt;:duct/module&lt;/code&gt;を継承する必要があり，
上のコードは&lt;code&gt;duct.module/message&lt;/code&gt;が&lt;code&gt;duct/module&lt;/code&gt;の子キーワードであることを宣言しています。&lt;/p&gt;

&lt;p&gt;　prep stepでは，&lt;code&gt;duct/module&lt;/code&gt;を継承するキーワードのマルチメソッドが呼ばれます。
このマルチメソッドは次のように&lt;code&gt;:fn&lt;/code&gt;をキーとするマップを返す必要があります。&lt;/p&gt;

&lt;pre class=&quot;code lang-clojure&quot; data-lang=&quot;clojure&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;defmethod&lt;/span&gt; ig/init-key :duct.module/message
  &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;_ options&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:&lt;span class=&quot;synSpecial&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;(fn&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;config&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;core/merge-configs
      config &lt;span class=&quot;synComment&quot;&gt;; ユーザが書いたコンフィグレーションマップ&lt;/span&gt;
        &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:duct.message/pubsub &lt;span class=&quot;synComment&quot;&gt;; 追加するキー&lt;/span&gt;
          &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:logger &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;ig/ref :duct/logger&lt;span class=&quot;synSpecial&quot;&gt;)}}))})&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;:fn&lt;/code&gt;の設定すべき値は，コンフィグレーションマップを受取り新しいコンフィグレーションマップを返す関数です。
prep stepでのコンフィグレーションマップの書き換えは，&lt;code&gt;:fn&lt;/code&gt;の関数適用の結果です。
上のコードは，ユーザが定義したコンフィグレーションマップに&lt;code&gt;:duct.message/pubsub&lt;/code&gt;をキーとするエントリを追加しています。
&lt;code&gt;merge-configs&lt;/code&gt;は引数に渡されたマップをマージし，マージ後のマップを返します。&lt;/p&gt;

&lt;p&gt;　コンフィグレーションマップに追加したキーワード&lt;code&gt;:duct.message/pubsub&lt;/code&gt;を追加したので，
moduleには，このキーワードのマルチメソッドも含める必要があります。&lt;/p&gt;

&lt;pre class=&quot;code lang-clojure&quot; data-lang=&quot;clojure&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;defmethod&lt;/span&gt; ig/init-key :duct.message/pubsub
  &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;_ &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:&lt;span class=&quot;synIdentifier&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;p-id s-id&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt; :as opt&lt;span class=&quot;synSpecial&quot;&gt;}]&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;assoc&lt;/span&gt;
    opt
    :s-name
    &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;SubscriptionName/create p-id s-id&lt;span class=&quot;synSpecial&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;購読したいキューを指定するにはプロジェクトIDとサブスクリプションIDが必要なので，
ユーザには&lt;code&gt;duct.message/pubsub&lt;/code&gt;の値にIDを書いてもらうようにします。
これでmoduleの出来上がりです。&lt;/p&gt;

&lt;p&gt;　最後に，作ったmoduleを実際に使ってみます。
まず，キューのIDとmoduleのキーワードを含んだコンフィグレーションマップを作ります。&lt;/p&gt;

&lt;pre class=&quot;code lang-clojure&quot; data-lang=&quot;clojure&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:duct.message/pubsub &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:p-id &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;project-id&amp;quot;&lt;/span&gt;
                       :s-id &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;subscription-id&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
 :duct.module/message &lt;span class=&quot;synSpecial&quot;&gt;{}&lt;/span&gt;
 :ebisu.boundary/message &lt;span class=&quot;synSpecial&quot;&gt;#&lt;/span&gt;ig/ref :duct.message/pubsub&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;マルチメソッドでは，コールバックと購読の開始処理を書いています。
&lt;code&gt;s-name&lt;/code&gt;には，moduleにある&lt;code&gt;SubscriptionName/create&lt;/code&gt;の返り値が渡ります。&lt;/p&gt;

&lt;pre class=&quot;code lang-clojure&quot; data-lang=&quot;clojure&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;defprotocol&lt;/span&gt; Receiver
  &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;start &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;synSpecial&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;stop &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;synSpecial&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;defrecord&lt;/span&gt; PubSubReceiver &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;subscriber&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;
    Receiver
    &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;start &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;. subscriber startAsync&lt;span class=&quot;synSpecial&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;stop &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;. subscriber stopAsync&lt;span class=&quot;synSpecial&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;defmethod&lt;/span&gt; ig/init-key :clj-ebis2.boundary/message &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;_ &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;:&lt;span class=&quot;synIdentifier&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;s-name&lt;span class=&quot;synSpecial&quot;&gt;]}]&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;(let&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;subscriber &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;. &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;Subscriber/newBuilder
                       subscription-name
                       &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;reify&lt;/span&gt; MessageReceiver
                         &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;receiveMessage &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;this message consumer&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;
                           &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;.. message getData toStringUtf8&lt;span class=&quot;synSpecial&quot;&gt;))&lt;/span&gt;
                           &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;. consumer ack&lt;span class=&quot;synSpecial&quot;&gt;))))&lt;/span&gt; build&lt;span class=&quot;synSpecial&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;(let&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;receiver &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;-&amp;gt;PubSubReceiver subscriber&lt;span class=&quot;synSpecial&quot;&gt;)]&lt;/span&gt;
      &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;start receiver&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;
      receiver&lt;span class=&quot;synSpecial&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;


&lt;h2 id=&quot;参考資料&quot;&gt;参考資料&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/duct-framework&quot;&gt;Duct Framework and supporting libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://skillsmatter.com/skillscasts/8717-arachne-building-a-framework-in-clojure&quot;&gt;Arachne: building a framework in Clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://skillsmatter.com/skillscasts/10836-productive-duct&quot;&gt;Productive Duct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://skillsmatter.com/skillscasts/9820-enter-integrant-a-micro-framework-for-data-driven-architecture-with-james-reeves&quot;&gt;Enter Integrant: a micro-framework for data-driven architecture with James Reeves&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://skillsmatter.com/skillscasts/7229-duct-covered&quot;&gt;Duct, Covered&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;本稿の前半でモジュールと表現しているIntengrantのマルチメソッドとは異なるものなので，英語表記にして両者を区別します。&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>          <pubDate>Tue, 03 Apr 2018 11:52:36 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/17391345971629886501</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/n/nakamura-ub/20180328/20180328141623.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>hbstudy#82 の「SRE大全：ユーザベース編」で話をしてきました。</title>
          <link>http://tech.uzabase.com/entry/2018/03/20/154939</link>          <description>&lt;p&gt;こんにちは。ユーザベースの&lt;a href=&quot;https://jp.ub-speeda.com/&quot;&gt;SPEEDA&lt;/a&gt;で、SREチーム内のソフトウェアエンジニアをしている &lt;a href=&quot;https://twitter.com/tkitsunai&quot;&gt;@tkitsunai&lt;/a&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kitslog/20180319/20180319164521.jpg&quot; alt=&quot;f:id:kitslog:20180319164521j:plain&quot; title=&quot;f:id:kitslog:20180319164521j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;3月15日(木)に、株式会社ハートビーツ様が主催している「hbstudy#82」で、「SRE大全：ユーザベース編」というお題目の下に、弊社のSREチームの4人で様々なSREの取り組みについて発表してきました。&lt;/p&gt;

&lt;p&gt;SRE大全というお題目は、日本企業でのSREチームを立ち上げたとして界隈で有名なメルカリさんも発表しており、前回はクックパッドさんの発表でした。
今回、日本企業のTech Companyとしても有名な方たちと肩を並べることができ、知名度がまだまだ低いユーザベースのSREチームにとっては身に余る光栄でした。&lt;/p&gt;

&lt;p&gt;我々が今回SREチームとして発表してきた内容は以下となります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「UZABASEのSREについて」 羽山 雄偉&lt;/li&gt;
&lt;li&gt;「ソフトウェアエンジニアリングによるToil削減」 橘内 孝幸 ( &lt;a href=&quot;https://twitter.com/tkitsunai&quot;&gt;@tkitsunai&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;「FullGCとの闘い」 久保 裕史 ( &lt;a href=&quot;https://twitter.com/hirofumikubo&quot;&gt;@hirofumikubo&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;「On-premise Kubernetes on Rancher」金屋 泰士&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;発表資料は１つだと長いので小分けにしています。&lt;/p&gt;

&lt;p&gt;「UZABASEのSREについて」 羽山 雄偉&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;2fbfaffac851404b8fe52bdc103253e0&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;「ソフトウェアエンジニアリングによるToil削減」 橘内 孝幸 ( &lt;a href=&quot;https://twitter.com/tkitsunai&quot;&gt;@tkitsunai&lt;/a&gt; )&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;3f0a578b99cd420494e4e0a50abd53be&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;「FullGCとの闘い」 久保 裕史 ( &lt;a href=&quot;https://twitter.com/hirofumikubo&quot;&gt;@hirofumikubo&lt;/a&gt; )&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/6SGUY7Yy5bEuJe&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;p&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/hirofumikubo/hbstudy82-sre-fullgc-uzabse-sre-team-hirofumi-kubo&quot; title=&quot;hbstudy#82 SRE大全 FullGCとの闘い (UZABSE SRE Team Hirofumi Kubo)&quot; target=&quot;_blank&quot;&gt;hbstudy#82 SRE大全 FullGCとの闘い (UZABSE SRE Team Hirofumi Kubo)&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/hirofumikubo&quot; target=&quot;_blank&quot;&gt;Hirofumi Kubo&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;「On-premise Kubernetes on Rancher」金屋 泰士&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/vQzc56uaVuuDdc&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;p&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/yasushikanaya/onpremise-kubernetes-on-rancher&quot; title=&quot;On-Premise Kubernetes on Rancher&quot; target=&quot;_blank&quot;&gt;On-Premise Kubernetes on Rancher&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/yasushikanaya&quot; target=&quot;_blank&quot;&gt;Yasushi Kanaya&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;会場の方から質問も頂きまして、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「他のSRE大全では、10数名でもきついという話を聞いたが、10名で回すのはどうか。」&lt;/li&gt;
&lt;li&gt;「トイルの計測について、差し込みの割合について定義はあるか？また、計測の精度はどうか。」&lt;/li&gt;
&lt;li&gt;「K8SをPrometheusで監視しているということだが、Rancherの監視はどうしているか。」&lt;/li&gt;
&lt;li&gt;「Prometheus自体の監視は？」&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;などなど、10名での運用体制についてや後半ではRancher成分が多めな印象でした。&lt;/p&gt;

&lt;p&gt;YoutubeLiveでの配信もあり、hbstudyさんのチャンネルにも公開されていますので、そちらから会場の様子などを含めた全編を閲覧することができます。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DehQZbP6p42w%26t%3D3106s&quot; title=&quot;hbstudy#82 「SRE大全: ユーザベース編」&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ehQZbP6p42w&amp;t=3106s&quot;&gt;www.youtube.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCP3TYCH0om6fHynIpWvy70w/featured&quot;&gt;&amp;#x30A4;&amp;#x30F3;&amp;#x30D5;&amp;#x30E9;&amp;#x30A8;&amp;#x30F3;&amp;#x30B8;&amp;#x30CB;&amp;#x30A2;&amp;#x52C9;&amp;#x5F37;&amp;#x4F1A; hbstudy - YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(余談)&lt;/p&gt;

&lt;p&gt;私のパートでは、めちゃくちゃ緊張してしまって声が震えるし真っ白になるしで、軽くトラウマレベルでした。
スピーカ慣れしてる人たち、本当に尊敬します。精進あるのみ。。。&lt;/p&gt;

&lt;h3&gt;仲間募集中!&lt;/h3&gt;

&lt;p&gt;ユーザベースのSPEEDA SREチームは、No Challenge, No SRE, No SPEEDA　を掲げて業務に取り組んでいます。
「挑戦しなければ、SREではないし、SREがなければ、SPEEDAもない」という意識で、日々ユーザベースのMissionである、「経済情報で、世界をかえる」の実現に向けて邁進しています。&lt;/p&gt;

&lt;p&gt;少しでも興味を持ってくださった方は&lt;a href=&quot;https://uzabase-inc.workable.com/jobs/626352&quot;&gt;こちら&lt;/a&gt;まで！&lt;/p&gt;

&lt;h3&gt;SRE Loungeについて&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2018/03/19/153911&quot;&gt;昨日の記事&lt;/a&gt;のSRE Loungeについてもどんどん他社様を巻き込んでおり、コミュニティの活性化を進めています。
是非、うちのSREはこんなことやってるよーと共有して頂ける企業様が居ましたら sre@uzabase.com 宛にご一報下さい。&lt;/p&gt;
</description>          <pubDate>Tue, 20 Mar 2018 15:49:39 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/17391345971626183884</guid>
          
            <category>SRE</category>
          
            <category>勉強会</category>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kitslog/20180319/20180319164521.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Chatwork、CrowdWorks、スタディスト、ユーザベースでSRE Lounge #2 を開催しました</title>
          <link>http://tech.uzabase.com/entry/2018/03/19/153911</link>          <description>&lt;p&gt;こんにちは、ユーザベース SREチームでインターンをしております杉田です。
1/17(水)に始動したSRE Loungeの第二弾として、3/13(火)にSRE Lounge #2を開催しましたので、
今日はその模様を投稿します。&lt;/p&gt;

&lt;p&gt;そもそも「SREとは？」といったことや、SRE Lounge開催の背景については、
&lt;a href=&quot;http://tech.uzabase.com/entry/2018/01/26/200021&quot;&gt;SRE Lounge #1&lt;/a&gt;の記事に詳しく書きましたので、
ぜひご覧下さい。&lt;/p&gt;

&lt;p&gt;今回も前回と同様に、&lt;/br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SRE取り組み事例の共有（情報交換・発信）&lt;/li&gt;
&lt;li&gt;SREについて議論し、知見を深める&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;といったことを目的として開催しました。&lt;/p&gt;

&lt;h2&gt;開催日時&lt;/h2&gt;

&lt;p&gt;3/13(火) 19:00〜&lt;/p&gt;

&lt;h2&gt;開催場所&lt;/h2&gt;

&lt;p&gt;今回は&lt;a href=&quot;https://go.chatwork.com/ja/&quot;&gt;ChatWork様&lt;/a&gt;の東京オフィスをお借りして開催しました。
スクリーン付きのシアタールームがあったり、文字通り間近に東京タワーを眺めることが出来たりと、
とても素敵なオフィスでした。&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;ChatWork様のオフィス&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksksgtt/20180314/20180314193353.jpg&quot; alt=&quot;f:id:ksksgtt:20180314193353j:plain&quot; title=&quot;f:id:ksksgtt:20180314193353j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
  &lt;figcaption&gt;ChatWork様のオフィス&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;会場の様子&quot;&gt;&lt;div class=&quot;images-row mceNonEditable&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksksgtt/20180314/20180314193926.jpg&quot; alt=&quot;f:id:ksksgtt:20180314193926j:plain&quot; title=&quot;f:id:ksksgtt:20180314193926j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksksgtt/20180314/20180314193959.jpg&quot; alt=&quot;f:id:ksksgtt:20180314193959j:plain&quot; title=&quot;f:id:ksksgtt:20180314193959j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;figcaption&gt;会場の様子&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h2&gt;参加企業&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://go.chatwork.com/ja/&quot;&gt;ChatWork様&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crowdworks.jp/&quot;&gt;CrowdWorks様&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://studist.jp/&quot;&gt;スタディスト様&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.uzabase.com/&quot;&gt;ユーザベース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;コンテンツ概要&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;各社の取り組み事例等の発表と質疑応答（各社20分程度）&lt;/li&gt;
&lt;li&gt;発表を踏まえた座談会（30分程度）&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;ピザやChatWork様が提供して下さった飲み物で軽食をとりつつ行いました。&lt;/p&gt;

&lt;h2&gt;各社の取り組み事例等の発表と質疑応答&lt;/h2&gt;

&lt;p&gt;各社の発表内容を発表資料と共に以下にまとめます。&lt;/p&gt;

&lt;h3&gt;ChatWork様&lt;/h3&gt;

&lt;p&gt;マイクロサービスアーキテクチャを積極的に取り入れ、Kubernetes環境を運用しているとのことでした。
現在は新しいシステムはKubernetesで稼働させ、既存システムについてもKubernetesへ絶賛移行中とのことです。
また、サービスメッシュ（Envoy/Istio/Linkerd...）の採用検討もされており、非常に勉強になりました。
個人的には、技術負債（レガシー）をマイナスに捉えるのではなく、今までビジネスを支えてきた「レジェンド」なアプリケーションという風に敬意を持って呼ぶという点が心に刺さりました。&lt;/p&gt;

&lt;p&gt;当日発表資料：&lt;a href=&quot;https://www.slideshare.net/seikoudoku2000/microservicessre-sre-lounge/1&quot;&gt;microservicesとSRE (第２回 SRE Lounge)&lt;/a&gt;
&lt;iframe src=&quot;https://www.slideshare.net/slideshow/embed_code/key/KKUaGgsdA8pHyq&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/seikoudoku2000/microservicessre-sre-lounge&quot; title=&quot;microservicesとSRE (第２回 SRE Lounge)&quot; target=&quot;_blank&quot;&gt;microservicesとSRE (第２回 SRE Lounge)&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/seikoudoku2000&quot; target=&quot;_blank&quot;&gt;Yosuke Tomita&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.slideshare.net/seikoudoku2000/microservicessre-sre-lounge/1&quot;&gt;www.slideshare.net&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;/br&gt;&lt;/p&gt;

&lt;h3&gt;CrowdWorks様&lt;/h3&gt;

&lt;p&gt;Monitoringに対する取り組みとして、DatadogやAWS CloudWatch、その他周辺ツールの活用をしつつ、
さらにDatadogに連携するツール&lt;a href=&quot;https://github.com/crowdworks/cyqldog&quot;&gt;cyqldog&lt;/a&gt;を開発しているとのことでした。
また、Infrastructure as Codeの取り組みとして、ChefやTerraformを採用しつつ、
Terraformで作成したサーバーと、秘伝のタレ化したサーバーの差分を検出してくれる&lt;a href=&quot;https://github.com/crowdworks/ajimi&quot;&gt;ajimi&lt;/a&gt;を使って、コード化をスムーズにしているそうです。
OSSを活用するだけでなく、独自のソフトウェアを積極的に開発しOSS化している点は、弊社も見習いたいところです。&lt;/p&gt;

&lt;p&gt;当日発表資料：&lt;a href=&quot;https://speakerdeck.com/minamijoyo/sre-lounge-number-2-sre-at-crowdworks&quot;&gt;SRE at CrowdWorks&lt;/a&gt;&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;351565e1dcfc44e88be2862e908f8953&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;&lt;/br&gt;
&lt;/br&gt;&lt;/p&gt;

&lt;h3&gt;スタディスト様&lt;/h3&gt;

&lt;p&gt;Monitoringでは、Fluentd・ElasticSearch・Kibanaの組み合わせやstackdriver・newrelicを、Infrastructure as CodeではAnsible・Serverspecを活用されているとのことでした。
さらに、組織的な取り組みとして、&lt;a href=&quot;http://www.hatena.ne.jp/&quot;&gt;はてな様&lt;/a&gt;でも実施されているPerformance Working Groupという取り組みを行い、
SRE以外のチームメンバと計測数値や情報を共有し、議論する場を定期的に設けているとのことでした。
パフォーマンスを上げるためにSREだけで全ての範囲をカバーすることは難しく、SRE以外の開発メンバーの協力を必要とする機会は多々ありますので、こういった場を設けることは非常に大事なことだと思いました。&lt;/p&gt;

&lt;p&gt;当日発表資料：&lt;a href=&quot;https://speakerdeck.com/katsuhisa91/debusami2018-dechuan-ekirenakatuta-kuai-shi-namaniyuaruzuo-cheng-gong-you-wozhi-erusite-reliability-engineering&quot;&gt;デブサミ2018 で伝えきれなかった 快適なマニュアル作成共有を支えるSite Reliability Engineering&lt;/a&gt;&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;f781d22e269f40c8aa7c23833448a990&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;&lt;/br&gt;
&lt;/br&gt;&lt;/p&gt;

&lt;h3&gt;ユーザベース&lt;/h3&gt;

&lt;p&gt;ユーザベースの発表は今回で２回目なので、焦点を絞って日々発生するデータエラーについてどんな取り組みをしているか紹介しました。弊社が提供しているSPEEDAのプロダクトの要はデータです。一言にデータと言っても多種多様なデータの種類・形式を取り扱うため、データの抜け漏れやデータ同士の競合など考慮すべき点は多くあります。これをエラーが発生してから対応するのではなく、SREとしてvalidationを高度化し、先手を打つための仕組み作りについて発表しました。&lt;/p&gt;

&lt;p&gt;当日発表資料：&lt;a href=&quot;https://speakerdeck.com/toshianan/sre-lounge-number-2-uzabase&quot;&gt;SRE Lounge#2 UZABASE &lt;/a&gt;&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;0c28949ec42b4a13870d3965ec8321fc&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;&lt;/br&gt;
&lt;/br&gt;&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;形式は前回と同様ですが、発表後の懇親会の中で、各参加企業の&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;異なる規模やSREとしての体制・内部事情&lt;/li&gt;
&lt;li&gt;SREとして取り入れているノウハウ&lt;/li&gt;
&lt;li&gt;目指そうとしているSREのあり方&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;といったことをざっくばらんに共有し、議論する場を設けたことで、知識はもちろんお互いの交流を深めることが出来、非常に密度の濃い勉強会となりました。&lt;/p&gt;

&lt;p&gt;SRE Loungeは、今後も継続して開催する予定ですので、もし興味を持ってくださり、参加を希望される企業の方はこちらまでご連絡ください。&lt;/br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メールアドレス: sre@uzabase.com&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/178417569426196/?ref=bookmarks&quot;&gt;Facebookコミュニティ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;集合写真&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksksgtt/20180314/20180314180656.jpg&quot; alt=&quot;f:id:ksksgtt:20180314180656j:plain&quot; title=&quot;f:id:ksksgtt:20180314180656j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
  &lt;figcaption&gt;集合写真&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;今回参加したユーザベース SREチームメンバー&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksksgtt/20180314/20180314180740.jpg&quot; alt=&quot;f:id:ksksgtt:20180314180740j:plain&quot; title=&quot;f:id:ksksgtt:20180314180740j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;今回参加したユーザベース SREチームメンバー&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;h3&gt;仲間募集！！&lt;/h3&gt;

&lt;p&gt;ユーザベースのSPEEDA SREチームは、&lt;b&gt;No Challenge, No SRE, No SPEEDA&lt;/b&gt;　を掲げて業務に取り組んでいます。&lt;/br&gt;
「挑戦しなければ、SREではないし、SREがなければ、SPEEDAもない」という意識で、日々ユーザベースのMissionである、&lt;b&gt;「経済情報で、世界をかえる」&lt;/b&gt;の実現に向けて邁進しています。&lt;/br&gt;
&lt;/br&gt;
少しでも興味を持ってくださった方は&lt;a href=&quot;https://uzabase-inc.workable.com/jobs/626352&quot;&gt;こちらまで&lt;/a&gt;！&lt;/p&gt;
</description>          <pubDate>Mon, 19 Mar 2018 15:39:11 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/17391345971625585571</guid>
          
            <category>SRE</category>
          
            <category>勉強会</category>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksksgtt/20180314/20180314180656.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>【k8s合宿】   Kubernetesのメトリクスを取得する 〜PrometheusにGrafanaを添えて〜</title>
          <link>http://tech.uzabase.com/entry/2018/03/14/200512</link>          <description>&lt;p&gt;こんにちは、&lt;a href=&quot;https://jp.ub-speeda.com/&quot;&gt;SPEEDA&lt;/a&gt;のSREチームの阿南です。&lt;a href=&quot;http://tech.uzabase.com/entry/2018/02/01/161447&quot;&gt;前回&lt;/a&gt;から少し時間が経ってしまいましたが、今回はKubernetesのメトリクス取得についてです。本番環境でkubernetesを運用する際、ポッドがどの程度リソースを消費しているのか、クラスター自体のリソースは大丈夫かなど常に把握しておく必要があります。ただ、Kubernetesってどう監視すればいいのって疑問ありますよね。PrometheusとかGrafanaとかよく出てきて概要は理解できるんだけど、実際どう構築すればいいの、とお悩みの方に役立つ記事にしたいと思います。ちなみに弊社ではRancher上にKubernetes環境を本番で利用していますが、大枠は今回紹介するような構成で運用しています。&lt;/p&gt;

&lt;h2&gt;構築する環境&lt;/h2&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tanan55/20180301/20180301095238.png&quot; alt=&quot;f:id:tanan55:20180301095238p:plain&quot; title=&quot;f:id:tanan55:20180301095238p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;利用する環境はGKEです。まずKubernetesクラスターの中にPrometheusを構築し、メトリクスを取得します。さらに、クラスター外部にfederation用のPrometheusを構築し、Grafanaでメトリクスを可視化します。概要をざっくりと箇条書きすると、下記のようになります。&lt;/p&gt;

&lt;p&gt;&lt;b&gt;【クラスター内部（図の左側）】&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;KubernetesクラスターにPrometheus ポッドを稼働させる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prometheus ポッドでクラスター内のメトリクスを取得する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NodeExporter ポッドをDaemonSetで稼働させ、Node（GCEインスタンス）のメトリクスを取得&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prometheus ポッドで取得したデータについては保持期間を１日とする&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;b&gt;【 クラスター外部（図の右側）】&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;federationを使ってクラスター外部のPrometheusから値を取得&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Grafanaでメトリクスを可視化&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;本記事では、まずKubernetesクラスターの中にprometheus ポッドを稼働させて値を取得するところまで紹介し、federationやGrafanaでの可視化周りは次回記事で紹介したいと思います。&lt;/p&gt;

&lt;h2&gt;構築手順&lt;/h2&gt;

&lt;p&gt;前回同様手順は別途まとめていますので&lt;a href=&quot;https://gist.github.com/tanan/8b1ac5e7428ee0ed8fb8dc57a7947a46&quot;&gt;こちら&lt;/a&gt;をご参照ください。&lt;/p&gt;

&lt;h2&gt;Kubernetesの認証方式について&lt;/h2&gt;

&lt;p&gt;GKEのKubernetesバージョン1.8からはRBACがデフォルトで適用されているため、Prometheusで監視をする際に監視に必要な権限を与えてあげる必要があります。
さて構築する際のポイントですが、まずは自分自身のアカウント(kubectlを実行するユーザ)にcluster-adminを付与します。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ gcloud info | grep Account
$ kubectl create clusterrolebinding anan-cluster-admin-binding --clusterrole=cluster-admin --user=sample-owner@sample-project.iam.gserviceaccount.com&lt;/pre&gt;


&lt;p&gt;cluster-adminを設定する理由は、kubectlを実行するユーザの権限より強い権限をroleとして設定することはできないためです。
ちなみにbindingには、&lt;code&gt;clusterrolebinding&lt;/code&gt;と&lt;code&gt;rolebinding&lt;/code&gt;の２つがあり、それぞれ適用範囲をクラスター全体にするか、細かく設定するかを選択できるようになっています。この辺りの設計は利用するサービスや会社によって最適な設定が異なると思いますので、ぜひ事例があれば聞いてみたいですね。
次にPrometheus用にサービスアカウントを作成します。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ kubectl create serviceaccount prometheus --namespace monitoring&lt;/pre&gt;


&lt;p&gt;このサービスアカウントに対して、参照権限を付与します。ここで、&lt;code&gt;resources&lt;/code&gt; が&lt;code&gt;pods, services, deployment&lt;/code&gt;などのリソースを表し、&lt;code&gt;verbs&lt;/code&gt; がそのリソースに対する操作を表します。&lt;s&gt;Prometheusは全てのリソースに対して参照権限を与えたいので、&lt;code&gt;resources&lt;/code&gt; を &lt;code&gt;*&lt;/code&gt; とし、&lt;code&gt;verbs&lt;/code&gt; で &lt;code&gt;get, watch, list&lt;/code&gt; の動作を許可します。&lt;code&gt;nonResourceURLs&lt;/code&gt;はエンドポイントの権限設定なので、細かく設定する際は&lt;code&gt;/api&lt;/code&gt;等のエンドポイントを指定します。今回は&lt;code&gt;nonResourceURLs&lt;/code&gt;を&lt;code&gt;*&lt;/code&gt;、verbsを&lt;code&gt;get&lt;/code&gt;としてエンドポイントに対してGETリクエストを許可します。これでread_onlyな形で権限を作成することができました。&lt;/s&gt;
Prometheusの監視について、secrets等は閲覧権限不要のため内容を修正しました。ご指摘いただいた方ありがとうございます！&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/tanan/c22d0adfc8ef6adc968992e612709acf.js&quot;&gt; &lt;/script&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://gist.github.com/tanan/c22d0adfc8ef6adc968992e612709acf&quot;&gt;gist.github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;GKEの場合1.7まではデフォルトのサービスアカウントで全てのリソース、操作が許可されていました。Kubernetes v1.8からRBACがstableになっているのでGKE側でもこの辺りの変更が入っているようです。まだPrometheusにはたどり着いておりません。序盤からハマリどころ満載で、楽しくなってきました。&lt;/p&gt;

&lt;h2&gt;ConfigMap設定&lt;/h2&gt;

&lt;p&gt;ConfigMapにPrometheusのconfigファイルを設定します。最初のglobal設定で、メトリクスの取得間隔を指定しています。ポイントとして、 &lt;code&gt;kubernetes_sd_configs&lt;/code&gt; を利用してメトリクスの取得先をdiscoveryできるようにしています。このservice discoveryの設定を利用することにより、サーバが追加になったりした際にも自動的にそれを検知しメトリクスを取得できるようになります。Prometheusの強力な機能ですね。&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/tanan/b9baca251d48e119b50cc75bfb3dc457.js&quot;&gt; &lt;/script&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://gist.github.com/tanan/b9baca251d48e119b50cc75bfb3dc457&quot;&gt;gist.github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kubernetes_sd_configs&lt;/code&gt;の中身については正直いきなり理解するのは難しいと思いますので、とりあえず細かい説明は置いて次に進みます。&lt;/p&gt;

&lt;h2&gt;Deployment設定&lt;/h2&gt;

&lt;p&gt;PrometheusのDeploymentの設定ですが、ここで最初に作成しておいたサービスアカウントが登場します。下記16行目に&lt;code&gt;serviceAccountName: prometheus&lt;/code&gt;の記載があります。これを指定することで、全てのリソースに対する参照&lt;code&gt;all-reader&lt;/code&gt;ができるようにしています。ちなみに、サービスアカウントを作成するとsecretにca.crt、tokenというデータが作成されます。このsecretはポッドが起動した際に、自動的に&lt;code&gt;/var/run/secrets/kubernetes.io/serviceaccount&lt;/code&gt; の配下にマウントされます。これをPrometheusのconfigに指定することでAPI Serverの認証をパスできるようにしています。先ほどのConfigMapの設定で&lt;code&gt;ca_file&lt;/code&gt;と&lt;code&gt;bearer_token_file&lt;/code&gt;によくわからないパスが出てきましたがシークレットがマウントされていたんですね。この辺りの仕様は&lt;a href=&quot;https://kubernetes.io/docs/admin/service-accounts-admin/&quot;&gt;公式ドキュメント&lt;/a&gt;に記載がありますので見てみるといいと思います。Deploymentにサービスアカウントを指定しなかった場合、defaultのサービスアカウントが適用されますので、認証が通らずメトリクスの収集ができなくなります。だからと言って権限を全解放すると色々な事故が起こる可能性がありますし、後からこの認証を入れていくのはかなりしんどいと思います。最初から正しく仕事をする。頑張りましょう。&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/tanan/5a121133abc08225fb3203b07c089ae0.js&quot;&gt; &lt;/script&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://gist.github.com/tanan/5a121133abc08225fb3203b07c089ae0&quot;&gt;gist.github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;Service設定とポート解放&lt;/h2&gt;

&lt;p&gt;Prometheusのサービスを公開します。今回はNodePortモードでノードの30001番ポートを解放しています。つまり、&lt;code&gt;http://&amp;lt;Prometheus 稼働中 Node IP&amp;gt;:30001&lt;/code&gt; にアクセスするとPrometheus ポッドの9090番ポートに接続されるので、Prometheusにアクセスするためには30001番のポートをGCPのネットワーク設定で解放しておく必要があります。GCPの管理コンソールの&lt;code&gt;VPC ネットワーク &amp;gt; ファイアウォールルール&lt;/code&gt;からポートを解放してください。ちなみに、本記事では手間を省くためにNodePortモードを利用しておりますが、Production環境等ではInternalのLoadBalancerを利用した方がノードに依存することがなくなるため運用しやすいと思います。&lt;/p&gt;

&lt;p&gt;最後に、Prometheusにアクセスしてみて下記のようにサービスディスカバリができていれば完了です！
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tanan55/20180305/20180305183938.png&quot; alt=&quot;f:id:tanan55:20180305183938p:plain&quot; title=&quot;f:id:tanan55:20180305183938p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
結構難しいですよね。。。弊社の本番環境でもPrometheusを利用していますが、正直全てのメトリクスを把握できないほどの種類を取得しています。それだけ細かく取得できているのは素晴らしいのですが、どうやって可視化するのか迷いますよね。次回はそんな方にオススメのGrafana周りを紹介しますのでご興味のある方は楽しみにしていてください。&lt;/p&gt;

&lt;h2&gt;お知らせ&lt;/h2&gt;

&lt;p&gt;SREチームでは&lt;b&gt;「No Challenge, No SRE, No SPEEDA」&lt;/b&gt;を掲げ、ユーザベースグループのミッションである&lt;b&gt;「経済情報で、世界をかえる」&lt;/b&gt;の実現に向けて、日々業務に取り組んでいます。
興味を持ってくださった方は&lt;a href=&quot;https://uzabase-inc.workable.com/jobs/626352&quot;&gt;こちら&lt;/a&gt;をご確認ください。&lt;/p&gt;

&lt;p&gt;また、2018/03/15（木）にハートビーツ社主催で&lt;a href=&quot;https://heartbeats.jp/hbstudy/&quot;&gt;「SRE大全：ユーザベース編」&lt;/a&gt; が開催されます。Youtube Liveでも配信されますのでご興味ある方はぜひご覧ください。&lt;/p&gt;
</description>          <pubDate>Wed, 14 Mar 2018 20:05:12 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/17391345971620808629</guid>
          
            <category>SRE</category>
          
            <category>kubernetes</category>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tanan55/20180301/20180301095238.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>ユーザベースで社内ハッカソンを初開催しました</title>
          <link>http://tech.uzabase.com/entry/2018/02/22/141810</link>          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180217/20180217001643.png&quot; alt=&quot;f:id:uzabase:20180217001643p:plain&quot; title=&quot;f:id:uzabase:20180217001643p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;はじめに&lt;/h2&gt;

&lt;p&gt;ryoqunこと小野寺です。突然ですが、うだるような熱狂的なハック、最近してますか？僕らのそんな刺激的で情熱的な一夜限りの思い出を今日はレポートしたいと思います。&lt;/p&gt;

&lt;p&gt;ユーザベースでは2017年12月15日に社内ハッカソンを開催しました。初開催にも関わらずとても楽しかったので、その取り組みについて紹介したいと思います。&lt;/p&gt;

&lt;p&gt;今回の社内ハッカソンがユーザベースでの栄えある1回目の開催です。大好評に終わり、こういったエンジニアの社内イベントは継続的に開催していくことになりました。&lt;/p&gt;

&lt;h2&gt;聞くだけに終わらない「Tech Meeting」にするために&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;「エンジニアみんなが等しく能動的に技術に向き合う時間にしたい」&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;この思いを実現したいがために、板倉というエンジニアから今回のハッカソンは立案され、開催されました。その根底には、週次のエンジニア全体ミーティング（いわゆるTech Meeting）の本来の意義を、180度違う角度から解決したいという熱意が板倉にあったためでした。&lt;/p&gt;

&lt;p&gt;これまでの弊社のTech Meetingは持ち回りで担当者が何らかのテーマで発表をするというものです。&lt;/p&gt;

&lt;p&gt;そこには、「話す」、「聞く」という参加者の二分があり、「聞く」側の中ではさらに、「質問する」、「聞いているだけ」というさらなる二分があり、 Tech Meetingに参加しているエンジニア各人の時間の濃さにムラがあるのが課題でした。ユーザベースグループという組織において、それは望むところではなく、そこに強い問題意識を持ったのが彼でした。&lt;/p&gt;

&lt;p&gt;弊社におけるTech Meetingの意義とは、「技術」を軸にエンジニア同士が交流すること。だからこそ、あえてTech 「Meeting」でなくてもよいのでは？その問題提起から、四半期分のTech Meetingの時間をまとめ、1日まるまる時間を確保し社内ハッカソンを開催することになりました。&lt;/p&gt;

&lt;p&gt;ちなみにそのような大胆な改革であっても、(あるいは、ならばこそ)すんなり挑戦よいとなりました。というのも、ユーザベースの&lt;a href=&quot;https://www.uzabase.com/company/seven-rules/&quot;&gt;7つのルール&lt;/a&gt;に「自由主義で行こう」や「迷ったら挑戦」とあり、基本的に社員の&lt;i&gt;Will&lt;/i&gt;が尊重されるからです。&lt;/p&gt;

&lt;p&gt;そして同じような問題意識に共感し、ハッカソンを運営したいと手を上げたメンバーを加え、板倉を中心に数名の運営チームが組成されました。&lt;/p&gt;

&lt;h2&gt;自由と挑戦を念頭に、ユーザベースらしいハッカソンを。&lt;/h2&gt;

&lt;p&gt;まず、ハッカソンのお題はありません。つまり開発テーマは完全に自由です。作るものの制限はなく何でもOKでした。この背景には、できるだけレギュレーションとして制約を設けずに運営側の思いとして個々人が好きな技術に能動的に触れてほしいというのがあったためです。&lt;/p&gt;

&lt;p&gt;結果、業務に関係あるものから、関係無いものまで、具体的にはゲームからチャットボットに至るまで、実に色々なものが作られました。&lt;/p&gt;

&lt;p&gt;さらに、チーム分けはランダムに極力「混ざる」ようになりました。ユーザベースが大きくなるのにつれ事業部間のエンジニアの距離が遠のいてしまうのを解消したいという運営チームの思いから、有志がなんとなくいつも通りにまとまるのではなく、基本的には運営チームによって決めました。ただ、参加者の志向性をまったく考慮しないわけではなく、興味ある技術や趣味を参考とするためにアンケートを取りました。&lt;/p&gt;

&lt;p&gt;そして、当然のごとく、最終発表後には表彰と賞品の贈呈「アリ」とのことでみんなは俄然やる気がでます。&lt;/p&gt;

&lt;p&gt;ハッカソンの日程は、告知から打ち上げまで、大きくは次のように進んでいきました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180217/20180217001028.png&quot; alt=&quot;f:id:uzabase:20180217001028p:plain&quot; title=&quot;f:id:uzabase:20180217001028p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;10/2: ハッカソン開催の発表&lt;/li&gt;
&lt;li&gt;10/18: ハッカソンのチーム分け発表&lt;/li&gt;
&lt;li&gt;10/30: チーム別中間発表(チームごとの取り組む開発内容の発表)&lt;/li&gt;
&lt;li&gt;12/14: ハッカソン開催宣言(18:00〜)&lt;/li&gt;
&lt;li&gt;12/15: チーム別最終発表＆表彰＆打ち上げ(17:00〜)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;では、時系列順に足早になりますが、写真を織り交ぜつつ説明していきたいと思います！&lt;/p&gt;

&lt;h2&gt;10/2: まさかのハッカソン開催の告知&lt;/h2&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20180131/20180131212300.png&quot; alt=&quot;f:id:ryoqun:20180131212300p:plain&quot; title=&quot;f:id:ryoqun:20180131212300p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;今日も代わり映えの無いTech Meetingの発表の最後に突如出たこの素っ気ないスライド一枚から全ては始まりました。&lt;/p&gt;

&lt;p&gt;まず、突然に、4QではTech Meetingの代わりにハッカソンをするという発表がありました。当然、発表直後はざわつきました。&lt;/p&gt;

&lt;p&gt;ともかくも、Tech Meetingの時間枠を集めてハッカソンにしてしまうという発想が非常に新鮮で、みんなの不安と期待と野望(？)の中で、ここから物事は動き出しました。&lt;/p&gt;

&lt;h2&gt;10/18: どきどきのチーム発表！&lt;/h2&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20180131/20180131094856.jpg&quot; alt=&quot;f:id:ryoqun:20180131094856j:plain&quot; title=&quot;f:id:ryoqun:20180131094856j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;まずはともかく、ハッカソンをやるにはチーム分けから始まります。2〜6人のチームが合計が15チームができ、ユーザベースグループのエンジニアが総動員した結果、55名とかなりの大規模です！&lt;/p&gt;

&lt;p&gt;前述の通り、チームの構成はなるべく事業をまたぐよう意識されました。この工夫にはエンジニアの交流を増やしたい狙いがありました。ただ、個人の希望も考慮するため、ハッカソン告知後に興味のある技術や趣味のアンケートは参考のために事前に実施されました。そして、運営メンバーも各チームのメンバーとして実際のハッカソンに参加しました。これもまた運営チームの思いの現れです。つまりは、Tech Meetingでの「聞く側」と「話す側」の二分構造と同じような「運営側」と「参加側」の二分構造の発生を避けるためでした。&lt;/p&gt;

&lt;p&gt;チーム分け後、各チームのメンバーは基本的には初対面です。自己紹介したり、キックオフランチに行くチームもありつつ、各チームは早急に何を作るのかを中間発表に向けて決めなければなりません。もちろんチームの各メンバーの持ち味を活かしつつ！&lt;/p&gt;

&lt;h2&gt;10/30: 夢が膨らむチーム別中間発表！&lt;/h2&gt;

&lt;p&gt;チーム発表後、お互いのチームが何を作るかの噂が流れたりして、そわそわしつつ、ついにこの日に各チームが発表しお互いが何を作るのかが明らかになりました。&lt;/p&gt;

&lt;p&gt;前述の通り、お題は完全自由で実に多彩な案が出ました。Slackのボットから簡単なWebサービス、はたまたゲーム、音声認識、IoTなどなど、やはり最新技術を取り入れたチームが大半です。&lt;/p&gt;

&lt;p&gt;どのチームの企画もチームの特色があり、ひねったアイディアばかりで新規性や革新性があり、発表内容を聞いているだけでワクワクしました。&lt;/p&gt;

&lt;p&gt;そして、この中間発表以降、本気で賞を取りにいこうとしたチームは先行して開発に着手し始めました。&lt;/p&gt;

&lt;h2&gt;12/14: 前夜祭的な開催宣言！&lt;/h2&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20180131/20180131134910.jpg&quot; alt=&quot;f:id:ryoqun:20180131134910j:plain&quot; title=&quot;f:id:ryoqun:20180131134910j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;準備したチームがありつつも、ついにハッカソンの開催が宣言されました！&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20180131/20180131213222.jpg&quot; alt=&quot;f:id:ryoqun:20180131213222j:plain&quot; title=&quot;f:id:ryoqun:20180131213222j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ちなみにこんな感じでお祭り感UP！ということで趣ある方法で成果発表の順番は決められました。&lt;/p&gt;

&lt;h2&gt;がっつりハック！各チームの開発風景&lt;/h2&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20180131/20180131213846.jpg&quot; alt=&quot;f:id:ryoqun:20180131213846j:plain&quot; title=&quot;f:id:ryoqun:20180131213846j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20180131/20180131212926.jpg&quot; alt=&quot;f:id:ryoqun:20180131212926j:plain&quot; title=&quot;f:id:ryoqun:20180131212926j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20180131/20180131213111.jpg&quot; alt=&quot;f:id:ryoqun:20180131213111j:plain&quot; title=&quot;f:id:ryoqun:20180131213111j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;みんなが楽しそうに各チームが1つの目標の元で開発しています。最新技術や、技術を使っての誰かために問題解決が好きなんだなと思えた瞬間でした。&lt;/p&gt;

&lt;h2&gt;ぎりぎりまで粘った上での成果発表！&lt;/h2&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20180131/20180131213659.jpg&quot; alt=&quot;f:id:ryoqun:20180131213659j:plain&quot; title=&quot;f:id:ryoqun:20180131213659j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20180131/20180131214332.jpg&quot; alt=&quot;f:id:ryoqun:20180131214332j:plain&quot; title=&quot;f:id:ryoqun:20180131214332j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ハッカソンなので完璧さは求められません。大事なのは、とりあえず動くものを作ること。その心意気で、みんな発表開始直前の直前まで開発していましたが、時間は無情で成果発表の時間となりました。&lt;/p&gt;

&lt;p&gt;今回のハッカソンのテーマは&lt;b&gt;「楽しく」&lt;/b&gt;なので、最後まで追い込んでまで必死に開発したご褒美というわけで、ビール片手の乾杯から成果発表はスタートしました。&lt;/p&gt;

&lt;p&gt;各チームの発表持ち時間は5分で、うまく動いて歓声があがったり、ツッコミが入ったりしながらもテンポよく和気あいあいと進んでいきます。やはりデモを披露するチームが多かったです。&lt;/p&gt;

&lt;p&gt;そして、成果発表後、交流の時間が設けられ、気になるチームのところに行って話したり、デモを試したり、逆に興味を持ってくれたエンジニアにデモを見せたりしました。&lt;/p&gt;

&lt;p&gt;そして、各賞にふさしいと思うチームへの投票も終え、ついに、どきどきの表彰タイムです！果たして自分のチームは選ばれたのでしょうか？？&lt;/p&gt;

&lt;h2&gt;表彰！&lt;/h2&gt;

&lt;p&gt;泣いても笑っても結果が全て。以下の通りで各チームがそれぞれ受賞しました！！&lt;/p&gt;

&lt;p&gt;今回の賞は合計4つでした。エンジニアみんなが投票して選ぶ「Good Idea賞」、「Tech賞」、「最優秀賞」の3つと、サプライズでユーザベースグループのCTOの竹内さんからの「特別賞」がありました。&lt;/p&gt;

&lt;h3&gt;「Good Idea賞」&lt;/h3&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20180131/20180131135706.jpg&quot; alt=&quot;f:id:ryoqun:20180131135706j:plain&quot; title=&quot;f:id:ryoqun:20180131135706j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;まず、「Good Idea賞」に輝いたのは、「Slaxフレンズ制作員会」というチームで、Slackの中でUnixコマンドの思想に則ったコマンドライン環境を提供するという一風変わったBotを作りました。ちょっと補足すると例えばSlack上で&lt;code&gt;tail -n100 @ryoqun | grep &quot;ハッカソン&quot;&lt;/code&gt;と入力すると、ある特定の人の直近100件の発言から特定ワードで絞り込んで表示するというBotです。&lt;/p&gt;

&lt;h3&gt;「Tech賞」&lt;/h3&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20180131/20180131140214.jpg&quot; alt=&quot;f:id:ryoqun:20180131140214j:plain&quot; title=&quot;f:id:ryoqun:20180131140214j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;次に、「Tech賞」に輝いたのは、「チームPon!」というチームで、ARと体を動かすというのを組み合わせたホッケーのようなゲームを作っていました。対戦もでき、スマホがコントローラー代わりになり、ブラウザからゲーム状況も見えたりと&lt;a href=&quot;https://developer.apple.com/arkit/&quot;&gt;ARKit&lt;/a&gt;を使った本格的なARと同時にゲームとしての完成度も十分でした。&lt;/p&gt;

&lt;h3&gt;「最優秀賞」&lt;/h3&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180207/20180207211449.jpg&quot; alt=&quot;f:id:uzabase:20180207211449j:plain&quot; title=&quot;f:id:uzabase:20180207211449j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;では、栄えある「最優秀賞」に輝いたのは、「もんめ」というチームで、社内ポータルをリニューアルさせました。なんといっても開発成果のインパクトが一番でした。ユーザベースでは社内ポータルとして&lt;a href=&quot;http://site.crowi.wiki/&quot;&gt;Crowi&lt;/a&gt;を使い始めているのですが、それをフロントエンドを中心にデザイン含め、大規模にリニューアルしました。&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;を使って書き換え、オープンソースも予定しているとのことで期待も高まります。&lt;/p&gt;

&lt;h3&gt;「CTO特別賞」&lt;/h3&gt;

&lt;p&gt;最後に、サプライズだった「CTO特別賞」に輝いたのは2チームでした。&lt;/p&gt;

&lt;p&gt;1チーム目は、「私立恵比寿中学水樹奈々がかり」というチームで、&lt;a href=&quot;https://store.google.com/product/google_home&quot;&gt;Google Home&lt;/a&gt;で、アイドルのライブイベント当日の移動等の準備に便利な音声操作のツールを作りました。&lt;/p&gt;

&lt;p&gt;2チーム目は、「UBHome」というチームで、&lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt;と各種音声認識や発声APIを使ったIoT的な音声受付システムを作りました。&lt;/p&gt;

&lt;h2&gt;無事に終わり、金曜夜、あとはやることといったら…&lt;/h2&gt;

&lt;p&gt;そして、成果発表開始時よりアルコール解禁になっていたのもあり、ウォーミングアップ（？）も済ませ、睡眠不足のテンションで意気揚々に、有志で打ち上げへと恵比寿の居酒屋に繰り出していくのでした〜。&lt;/p&gt;

&lt;h2&gt;「（ハッカソンを通して）仲良くなれた。楽しかった」&lt;/h2&gt;

&lt;p&gt;開催後のアンケートから抜粋すると以下のようなものがありました。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;「運営お疲れさまでした！最後の発表会で予想を遥かに越えて、けっこうみんなが真面目に取り組み、良いものができたと思います！」&lt;/p&gt;

&lt;p&gt;「普段業務で会話することがない人とも、短期間ではあったものの１つの目標に向かって協力できたことで仲良くなれたな、と思いました。」&lt;/p&gt;

&lt;p&gt;「久しぶりにコーディングに集中しすぎて発表の時に疲れましたがめっちゃくちゃ楽しかった！！」&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ありきたりかもですが、こういう反応こそを引き出せたのは、その当たり前を多くの苦労で実現した運営チームの尽力あってのことだと思います。&lt;/p&gt;

&lt;h2&gt;「みんなが楽しめたならOK！&lt;span style=&quot;font-size: 80%&quot;&gt;（運営は大変だった…）&lt;/span&gt;」&lt;/h2&gt;

&lt;p&gt;開催後日、最後に板倉より以下のメッセージがありました。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;「告知時に話をしましたが、今回のハッカソンはみんなが能動的に参加できるように考えたものです。撮影した写真の中では、ハッカソン当日はみなさん笑顔が多く、良い時間が過ごせたのではないかと思います。上記の目的が少しは達成できていたのであれば良かったです！」&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;という形で初開催のハッカソンは無事に幕を閉じました。&lt;/p&gt;

&lt;p&gt;また、最初から完璧な運営できたわけではなく、反省として、「もっとお祭り感を運営チーム働きかけて作りだせたのではないか」、「チーム間の取り組みへの温度感のムラをもっと埋められないか」、「受賞したいと思えるような賞品にできたのでないか」などがありました。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;ユーザベースでは、「経済情報で世界をかえる」というミッションの実現のため、エンジニアが共に力を合わせ自由闊達で働ける環境を作ろうとしています。&lt;/p&gt;

&lt;p&gt;ユーザベースはグループとして、ただそのミッションために存在し、そのミッションで束ねられた組織の団結力は非常に重要であると考えています。そのためにも、エンジニアという1つの職能という横串の切り口で、今回のようなレクレーションイベントを通し、結束力を高められたのは本当によかったです。&lt;/p&gt;

&lt;p&gt;さらに朗報で、今回の社内エンジニアイベントに続き、次は社内ISUCONを開催しようということが決定しています。&lt;/p&gt;

&lt;p&gt;最後になりますが、ユーザベースでは、絶賛エンジニアを&lt;a href=&quot;https://www.uzabase.com/recruit/occupation/&quot;&gt;大募集中&lt;/a&gt;なので興味ある方は是非とも応募してください！&lt;/p&gt;
</description>          <pubDate>Thu, 22 Feb 2018 14:18:10 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812342410914</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20180131/20180131212926.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>【k8s合宿】   Kubernetesのログ分析環境を作る</title>
          <link>http://tech.uzabase.com/entry/2018/02/01/161447</link>          <description>&lt;p&gt;こんにちは、&lt;a href=&quot;https://jp.ub-speeda.com/&quot;&gt;SPEEDA&lt;/a&gt;のSREチームでエンジニアをしている阿南です。SPEEDAのSREチームでは、昨年末kubernetesについて理解を深めるために&lt;a href=&quot;http://tech.uzabase.com/entry/2018/01/25/192144&quot;&gt;合宿&lt;/a&gt;を行いました。やり方はA〜Cの３チームに分けて、それぞれのチームでkubernetesに関することを調査、構築するという形式で、今回はAチームが実際にやってみた内容についてブログを書きたいと思います。（それぞれのチームでかなりボリュームがあるので、複数回に渡って連載的な形でお届けしたいと思います。）
Aチームでは、kubernetesを本番環境に投入するにあたり、ログ収集周りをあまり調査できてないなと感じ、GCP上に環境を作ってみることにしました。&lt;/p&gt;

&lt;h2&gt;構築する環境&lt;/h2&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180115/20180115151549.png&quot; alt=&quot;f:id:uzabase:20180115151549p:plain&quot; title=&quot;f:id:uzabase:20180115151549p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;GKEでKubernetesクラスターを構築し、その上にwordpress(Apache) + MySQLコンテナを稼働させました。ログ収集と言っても、kubernetesクラスター自体のログとその上で稼働するコンテナのログでは取得する設定も若干違ってきますので、今回はコンテナのログを収集する環境を作りました。
またポイントとして、GKEの公式DocumentではStackdriverにログを送ってBigQueryにエクスポートするという構成が紹介されているのですが、BigQueryに直接送る構成はあまり情報がなく、SPEEDAのコアな部分はオンプレ環境で運用しているため、BigQueryに直接送る構成にしました。&lt;/p&gt;

&lt;h2&gt;構築手順&lt;/h2&gt;

&lt;p&gt;ログを収集するという単純な環境ですが、意外と設定項目が多いです。手順を一つずつまとめるとかなり分量があるため、設定内容も含めてgithubに手順をまとめました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Ftanan%2Fgke-setting%2Ftree%2Fmaster%2Ffluentd-gcp&quot; title=&quot;tanan/gke-setting&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/tanan/gke-setting/tree/master/fluentd-gcp&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;１から構築してみたいという方はぜひご参考にしてください。
本ブログ内では、私が重要だと思った点や注意点のみ記載したいと思います。&lt;/p&gt;

&lt;h4&gt;クラスター構築&lt;/h4&gt;

&lt;p&gt;GKEは下記コマンドのみでkubernetesのクラスターを構築することができます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ gcloud container clusters create sample-cluster &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;デフォルトではGCEのインスタンスが３台起動し、そのVMを利用してkubernetesのclusterが作成されます。&lt;/p&gt;

&lt;h4&gt;wordpress + MySQL構築&lt;/h4&gt;

&lt;p&gt;続いて、wordpress + MySQL です。こちらについては、&lt;a href=&quot;https://cloud.google.com/kubernetes-engine/docs/tutorials/persistent-disk?hl=ja&quot;&gt;GCPの公式ページ&lt;/a&gt;のステップ２〜５を参考にしました。wordpressのコンテンツファイルやDBのデータを永続化するために、 &lt;code&gt;volumes&lt;/code&gt; で外部ディスクを指定し、&lt;code&gt;containers&lt;/code&gt; の &lt;code&gt;volumeMounts&lt;/code&gt; でマウント設定しています。&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/tanan/f254c0c6acb0381b2f0c0433415295d3.js&quot;&gt; &lt;/script&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://gist.github.com/tanan/f254c0c6acb0381b2f0c0433415295d3&quot;&gt;gist.github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h4&gt;Fluentdイメージの作成&lt;/h4&gt;

&lt;p&gt;利用するイメージは、&lt;a href=&quot;https://github.com/GoogleCloudPlatform/k8s-stackdriver/tree/master/fluentd-gcp-image&quot;&gt;GCPのリポジトリ&lt;/a&gt;を参考にイメージを作成すればOKです。ポイントとして今回はbigqueryに直接ログをアップロードするため、gemfileで、fluentdのバージョンをv0.14に変更し、fluent-plugin-bigqueryを追記しています。このgemfileを保存して、&lt;code&gt;docker build&lt;/code&gt;してください。 &lt;code&gt;fluentd.conf&lt;/code&gt; の設定は全てConfigMapで記載します。&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/tanan/73bf196f94b0639c35e7a86928995813.js&quot;&gt; &lt;/script&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://gist.github.com/tanan/73bf196f94b0639c35e7a86928995813&quot;&gt;gist.github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h4&gt;ConfigMap設定&lt;/h4&gt;

&lt;p&gt;ConfigMapは、設定情報（環境変数やファイル）を定義できるkubernetesの機能です。これを使うと、kubernetes上でコンテナを実行した際に、ConfigMapに設定した情報を読み取ってくれます。例えば、fluentdのイメージをDocker単体で実行した場合、configをホストマウントしたりしますよね。kubernetesだとホストが頻繁に変わる可能性もあるのでホストマウントするわけにもいきません。そのような場合に、ConfigMapを利用すればconfigをimageに含めなくてもよくなり、ノードが変更した時にも追従できるということでクラスターのノードを捨てやすくなると思います。&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/tanan/b08b82628e30e462c747c03993581192.js&quot;&gt; &lt;/script&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://gist.github.com/tanan/b08b82628e30e462c747c03993581192&quot;&gt;gist.github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;実際のfluentdの設定についてはファイルを確認して頂ければと思いますが、注意点として&lt;a href=&quot;https://github.com/kaizenplatform/fluent-plugin-bigquery&quot;&gt;fluent-plugin-bigquery&lt;/a&gt;の現在のバージョンでは &lt;code&gt;inject&lt;/code&gt; セクションが追加されているようです。過去のブログ記事で設定にinjectがないものもあり、そのまま設定するとBigQueryのtimeだけnullになってしまうことになりますのでご注意を。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;&amp;lt;inject&amp;gt;
    time_key &amp;#34;time&amp;#34;
    time_format &amp;#34;%s&amp;#34;
&amp;lt;/inject&amp;gt;&lt;/pre&gt;


&lt;h4&gt;DaemonSet設定&lt;/h4&gt;

&lt;p&gt;DaemonSetはクラスターの各ノードにコンテナをデーモンで動作させることができるkubernetesの機能です。コンテナのログは各ノードに出力されるようになっています。このDaemonSetを利用してfluentdを各ノードに稼働させ、各ノードのログを収集します。&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/tanan/bd39fc9648af7bfce7b9e304e7a3ec97.js&quot;&gt; &lt;/script&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://gist.github.com/tanan/bd39fc9648af7bfce7b9e304e7a3ec97&quot;&gt;gist.github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;長いので、かなり省略していますが、 &lt;code&gt;volumes&lt;/code&gt; で先ほど設定した &lt;code&gt;configMap&lt;/code&gt; を指定し、 &lt;code&gt;containers&lt;/code&gt; の &lt;code&gt;volumeMounts&lt;/code&gt; に設定しています。これで、ConfigMapで定義したファイルをfluentdが起動時に読み込み、ログ収集ができるようになります。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180115/20180115173310.png&quot; alt=&quot;f:id:uzabase:20180115173310p:plain&quot; title=&quot;f:id:uzabase:20180115173310p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、下記コマンドでwordpressのpodと同じノードで稼働しているfluentdのpodを確認し、shellを起動するとfluentdのログを見ることができます。うまくfluentdのログがアップロードできない等の場合は見てみるといいかもしれません。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ kubectl get pods -o wide
NAME                         READY     STATUS    RESTARTS   AGE       IP           NODE
fluentd-gcp-v2.0-5t96f       1/1       Running   0          5h        10.52.2.9    gke-sample-cluster-default-pool-a7431f33-rqbs
fluentd-gcp-v2.0-j45c7       1/1       Running   0          13m       10.52.0.13   gke-sample-cluster-default-pool-a7431f33-4x57
fluentd-gcp-v2.0-wmv3h       1/1       Running   0          5h        10.52.1.10   gke-sample-cluster-default-pool-a7431f33-nv5h
mysql-3368603707-ng8pr       1/1       Running   0          6h        10.52.0.7    gke-sample-cluster-default-pool-a7431f33-4x57
wordpress-3479901767-tc9p6   1/1       Running   0          6h        10.52.0.8    gke-sample-cluster-default-pool-a7431f33-4x57

$ kubectl exec -it fluentd-gcp-v2.0-j45c7 /bin/sh
# tail -f /var/log/fluentd.log
&lt;/pre&gt;


&lt;p&gt;最終的に、下記のようにアップロードされました。現状だと全てのコンテナログが同じテーブルにinsertされてしまいますので、この辺りは別途テーブルやfluentdを細かく設計した方が良さそうです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180118/20180118112409.png&quot; alt=&quot;f:id:uzabase:20180118112409p:plain&quot; title=&quot;f:id:uzabase:20180118112409p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;ログをアップロードするために必要な設定を見ていきました。使ってる機能が意外と多いので、少し時間がかかりましたが、本番環境で運用するにはマストの機能ばかりかと思います。また、fluentdから直接BigQueryに送ることにより、マルチクラウドでも対応できるし、OutputをBigQueryから他サービスに変更（もしくは追加）することも簡単にできますので、シーンに応じて使い分けできると思います。結構つまづいたのがfluentdで、jsonログをparseし、特定のキーに対してさらに複雑な加工をしたい場合にちょうどいいプラグインが見つからなかったのでその辺りは調査、もしくは、自分でプラグインを作るのもありかなと思います。
次回以降で、データの可視化やkubernetesのメトリクス収集等も紹介していきますのでこちらも乞うご期待。&lt;/p&gt;

&lt;h2&gt;お知らせ&lt;/h2&gt;

&lt;p&gt;SREチームでは&lt;b&gt;「No Challenge, No SRE, No SPEEDA」&lt;/b&gt;を掲げ、ユーザベースグループのミッションである&lt;b&gt;「経済情報で、世界をかえる」&lt;/b&gt;の実現に向けて、日々業務に取り組んでいます。
興味を持ってくださった方は&lt;a href=&quot;https://uzabase-inc.workable.com/jobs/626352&quot;&gt;こちら&lt;/a&gt;をご確認ください。&lt;/p&gt;
</description>          <pubDate>Thu, 01 Feb 2018 16:14:47 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812337751883</guid>
          
            <category>Container技術</category>
          
            <category>SRE</category>
          
            <category>kubernetes</category>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180115/20180115151549.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>クローズドな勉強会 SRE Lounge始動！</title>
          <link>http://tech.uzabase.com/entry/2018/01/26/200021</link>          <description>&lt;p&gt;はじめまして、SPEEDA SREチームの久保です。&lt;/p&gt;

&lt;p&gt;今回当社のSREチームとハートビーツ社が共同で、1/17(水)に他社を巻き込んで、SRE LoungeというクローズドなSRE勉強会を開催したので、シェアしたいと思います。&lt;/p&gt;

&lt;h3&gt;SREとは？&lt;/h3&gt;

&lt;p&gt;Site Reliability Engineeringの略で、日本語に訳すと、「サイト信頼性エンジニアリング」です。
簡単に説明しますと、&lt;a href=&quot;http://itpro.nikkeibp.co.jp/atcl/column/14/346926/030600869/?rt=nocnt&quot;&gt;IT Proの記事&lt;/a&gt;にありますように、&lt;/p&gt;

&lt;p&gt;&lt;i&gt;SREとはコーディングやソフトウエアエンジニアリングによって、ハードウエアを含めたシステム全体の性能や可用性、セキュリティを高める活動全般を指す方法論&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;を指します。&lt;/p&gt;

&lt;p&gt;ユーザベースのSPEEDA SREチームとしては、&lt;/br&gt;
従来のようなDevとOpsに役割やプロセスが分かれており、それぞれのエンジニアが&lt;b&gt;各々の役割だけにコミットする状態&lt;/b&gt;ではなく、ソフトウェアの設計、開発・構築、デプロイ、運用、改善といった&lt;b&gt;ソフトウェアの一連のライフサイクルのすべて（DevとOps全体）に焦点&lt;/b&gt;を当て、サイトの信頼性の向上にコミットするために、&lt;b&gt;ソフトウェアエンジニアリングによってプロダクトの改善&lt;/b&gt;を行う。
&lt;/br&gt;
&lt;/br&gt;
と解釈し、プロダクト全体の改善に日々努めています。&lt;/p&gt;

&lt;h3&gt;SRE Loungeの開催背景・趣旨&lt;/h3&gt;

&lt;p&gt;O&#39;Reillyの&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873117911/&quot;&gt;SRE本&lt;/a&gt;にもありますようにSREはGoogleのDevOpsであり、必ずしも各社にとっての最適解ではあるとは限りません。&lt;/p&gt;

&lt;p&gt;また、SREチームを持つ企業各社によって、SREとしての取り組みも様々なのが現状です。
SREチームを構成するメンバーのエンジニアとしてのバックグラウンドも会社によって異なります。
ユーザベースのSPEEDA SREチームでは、ソフトウェアエンジニアとインフラエンジニアが1:1ですが、その比率は企業によって様々です。&lt;/p&gt;

&lt;p&gt;そのため、既に各地で開催されているような&lt;b&gt;一方向の講座形式の勉強会&lt;/b&gt;ではなく、
双方向に取り組みのシェアや課題の共有などができる、&lt;b&gt;双方向のインタラクティブな場&lt;/b&gt;が必要と考え、今回SRE Loungeという名前で企画しました。&lt;/p&gt;

&lt;h3&gt;SRE Loungeのコアコンピタンス&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1回の勉強会で複数社のSRE取り組み事例を知ることができる&lt;/li&gt;
&lt;li&gt;少人数のクローズドな場にすることで、双方向なコミュニケーションが取りやすいこと（=質問がしやすく、参加者-発表者間で議論ができる場）&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;勉強会ゴール&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;SRE取り組み事例の共有（情報交換, 発信）&lt;/li&gt;
&lt;li&gt;SREについて議論し、知見を深める&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;開催日時&lt;/h2&gt;

&lt;p&gt;1/17(水)19:00〜で、 &lt;a href=&quot;https://heartbeats.jp/&quot;&gt;ハートビーツ様&lt;/a&gt;のラウンジをお借りして開催しました。&lt;/p&gt;

&lt;p&gt;ハートビーツ様の会場はとても素敵な場所でした。代表の藤崎さんのこだわりで作られたとのことです。羨ましい！
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/h/hir023/20180122/20180122104731.jpg&quot; alt=&quot;f:id:hir023:20180122104731j:plain&quot; title=&quot;f:id:hir023:20180122104731j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/h/hir023/20180121/20180121203821.jpg&quot; alt=&quot;f:id:hir023:20180121203821j:plain&quot; title=&quot;f:id:hir023:20180121203821j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;参加企業&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://heartbeats.jp&quot;&gt;ハートビーツ社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.dely.jp/&quot;&gt;dely社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://eure.jp/&quot;&gt;eureka社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.uzabase.com&quot;&gt;ユーザベース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;コンテンツ概要&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;各社SRE関連の取り組み事例紹介&amp;amp;質疑応答　(各社20~25分)&lt;/li&gt;
&lt;li&gt;意見交換会、ディスカッション（with ビール・ピザ）　(30~40分)&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;コンテンツ&lt;/h2&gt;

&lt;p&gt;各社それぞれのSREの取り組み事例を知ることができ、非常に濃い時間でした。
簡単に各社の発表内容をシェアしたいと思います。&lt;/p&gt;

&lt;h3&gt;ハートビーツ社&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/heartbeatsjp/happo-agent&quot;&gt;happo&lt;/a&gt;というツールを独自で作成し、自動でNagiosのメトリクスを収集し、かつ自動でメトリクス設定するツールなども開発して監視している。&lt;/br&gt;
　参考：&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fheartbeats.jp%2Fhbblog%2F2016%2F08%2Fhappo-agent---yet-another-nagios-nrpe.html&quot; title=&quot;happo-agent - Yet another Nagios nrpe を公開しました&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://heartbeats.jp/hbblog/2016/08/happo-agent---yet-another-nagios-nrpe.html&quot;&gt;heartbeats.jp&lt;/a&gt;&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;トイルの削減方法としては、nagiosのアラートをslackに通知し、スレッド単位で対応している。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;当日発表資料：&lt;a href=&quot;https://speakerdeck.com/abnoumaru/sre-lounge-20180117&quot;&gt;https://speakerdeck.com/abnoumaru/sre-lounge-20180117&lt;/a&gt;&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;29e8ad6da857420b851845fd51092590&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;&lt;/br&gt;
&lt;/br&gt;&lt;/p&gt;

&lt;h3&gt;dely社&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;障害対応訓練（dely Apollo Program）という、過去に発生した障害と同じ状況を生み出し、インフラエンジニア以外のエンジニアにその復旧作業に取り組んでもらう。復旧作業での作業をすべてメモし、なぜその作業を行ったかをヒアリングし、振り返るプログラムを実施している。&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;当日発表資料：&lt;a href=&quot;https://www.slideshare.net/motonobufukao/dely-sre-principles&quot;&gt;https://www.slideshare.net/motonobufukao/dely-sre-principles&lt;/a&gt;&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/m9LeqbDJPhzB0n&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;p&gt;&lt;/br&gt;
&lt;/br&gt;&lt;/p&gt;

&lt;h3&gt;eureka社&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;AWS環境で、Packer × Ansible × Terraformで、プロビジョニング用のAMIを作成し、そのAMIベースでインスタンスを作成。一度起動したインスタンスには変更を加えない構成にしている。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;当日発表資料：&lt;a href=&quot;https://speakerdeck.com/takuya542/ji-sok-de-nacui-ruo-xing-jian-zhi-topatutimanezimentoshou-fa-falseshao-jie-1&quot;&gt;https://speakerdeck.com/takuya542/ji-sok-de-nacui-ruo-xing-jian-zhi-topatutimanezimentoshou-fa-falseshao-jie-1&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;http://speakerdeck.com/embed/8e2b1a2a473a417fa05103b10ad96b32.js&quot;&gt; &lt;/script&gt;


&lt;p&gt;&lt;/br&gt;
&lt;/br&gt;&lt;/p&gt;

&lt;h3&gt;ユーザベース&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;プロジェクトチーム編成方法や開発手法（TDD、DDD、クリーンアーキテクチャなど）を取り入れて、手動運用のオペレーションの自動化など、 SRE内でのソフトウェア開発を行っている事例を紹介。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;当日発表資料：&lt;a href=&quot;https://speakerdeck.com/tkitsunai/software-development-in-uzabase-sre&quot;&gt;https://speakerdeck.com/tkitsunai/software-development-in-uzabase-sre&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;http://speakerdeck.com/embed/42f6bb98f208426e826dc69ab983be92.js&quot;&gt; &lt;/script&gt;


&lt;p&gt;&lt;/br&gt;
&lt;/br&gt;
&lt;/br&gt;
このような形で、各社発表後のビールを片手にピザを食べながら行ったディスカッションでは、当初21:30で解散の予定が23:00まで続くという盛り上がりを見せ、参加された方の満足度が非常に高い勉強会となりました。&lt;/p&gt;

&lt;h2&gt;今後のSRE Lounge&lt;/h2&gt;

&lt;p&gt;今後のSRE Loungeとしては下記のように考えています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SREをテーマで、所属関係なく、横のつながりを生み出すコミュニティを作っていく（SREコミュニティ化）&lt;/li&gt;
&lt;li&gt;どこか1社が主導してSRE Loungeを企画するというよりも、SREコミュニティ内の各社が主体となって、自律的に分散的に企画されるような形を目指す&lt;/li&gt;
&lt;li&gt;そして様々な会社のオフィスで開催する&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;もし興味持ってくださり、参加希望の企業はこちらまでご連絡ください。&lt;/br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メールアドレス: sre@uzabase.com&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/178417569426196/?ref=bookmarks&quot;&gt;Facebookコミュニティ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;最後に&lt;/h2&gt;

&lt;p&gt;第2回開催の話も挙がりましたので、ぜひ今後も継続して開催していきたいと思います。
&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;集合写真&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/h/hir023/20180121/20180121203940.jpg&quot; alt=&quot;f:id:hir023:20180121203940j:plain&quot; title=&quot;f:id:hir023:20180121203940j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;集合写真&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;今回参加したユーザベース SREチームメンバー&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/h/hir023/20180121/20180121203932.jpg&quot; alt=&quot;f:id:hir023:20180121203932j:plain&quot; title=&quot;f:id:hir023:20180121203932j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;今回参加したユーザベース SREチームメンバー&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/br&gt;
&lt;/br&gt;
&lt;/br&gt;
&lt;/br&gt;&lt;/p&gt;

&lt;h3&gt;仲間募集！！&lt;/h3&gt;

&lt;p&gt;ユーザベースのSPEEDA SREチームは、&lt;b&gt;No Challenge, No SRE, No SPEEDA&lt;/b&gt;　を掲げて業務に取り組んでいます。&lt;/br&gt;
「挑戦しなければ、SREではないし、SREがなければ、SPEEDAもない」という意識で、日々ユーザベースのMissionである、&lt;b&gt;「経済情報で、世界をかえる」&lt;/b&gt;の実現に向けて邁進しています。&lt;/br&gt;
&lt;/br&gt;
少しでも興味を持ってくださった方は&lt;a href=&quot;https://uzabase-inc.workable.com/jobs/626352&quot;&gt;こちらまで&lt;/a&gt;！&lt;/p&gt;
</description>          <pubDate>Fri, 26 Jan 2018 20:00:21 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812339668602</guid>
          
            <category>SRE</category>
          
            <category>勉強会</category>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/h/hir023/20180121/20180121203932.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>SREチームの2018年度を占う</title>
          <link>http://tech.uzabase.com/entry/2018/01/25/192144</link>          <description>&lt;p&gt;初めまして、株式会社ユーザベースのSPEEDA Japan Company、Site Reliability Engineering （SRE） Teamでエンジニアをしています、川口・阿南です。&lt;/p&gt;

&lt;h3&gt;SREチームについて&lt;/h3&gt;

&lt;p&gt;私たち、SREチームは2017年7月に始動しましたが、どのような業務をしているのかをあまり発信できていませんでしたので、少しご説明します。&lt;/br&gt;
端的に言うと、以下2点が主な業務になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;企業・業界情報プラットフォーム「SPEEDA」のインフラ構築、ソフトウェア改善&lt;/li&gt;
&lt;li&gt;ユーザベース全体の社内インフラの構築、運用&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;前者については「SREといえばこれ！」という業務ですが、後者の社内インフラについては、SREと別チームになっている会社も多いのではないでしょうか。&lt;/br&gt;
弊社では、社内ネットワークの構築、社内メンバーのPCセットアップ、ヘルプデスク等全てSREチームが担当しており、サービスだけでなく社内インフラの信頼性も向上しようと、日々業務に取り組んでいます。&lt;/p&gt;

&lt;h3&gt;SRE合宿&lt;/h3&gt;

&lt;p&gt;2018年度（2018年1月～12月）にSREチームが向かうべき方向を合わせるための合宿を行いましたので、ブログ記事として書き残したいと思います。今回の合宿のテーマは以下の2つです。&lt;/p&gt;

&lt;p&gt;1日目：2018年度のSREチーム施策決定&lt;br/&gt;
2日目：Kubernetesのスキルを上げる&lt;/p&gt;

&lt;p&gt;1日目は、2018年度に取り組むテーマについての議論を行いました。SREチームでは四半期ごとにこのような合宿を行っていますが、前回の合宿では予定より大幅に時間がかかってしまったという反省があります。そこで、今回は以下のような取り組みを行いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2017年度の振り返りは事前に実施&lt;/li&gt;
&lt;li&gt;チーム外からファシリテータを立てて、タイムマネジメントを依頼&lt;/li&gt;
&lt;li&gt;合宿運営委員で、スケジュールを詳しく検証&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;合宿会場は、駒場東大前のレンタルスペースです。前回のSRE合宿でも利用させていただきましたが、古民家風の大変おしゃれなスペースで、皆とても気に入っています。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180115/20180115230003.jpg&quot; alt=&quot;f:id:uzabase:20180115230003j:plain&quot; title=&quot;f:id:uzabase:20180115230003j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;チームテーマ議論&lt;/h3&gt;

&lt;p&gt;合宿当日。集合時間の午前9時半には続々メンバーが集まり、いよいよSRE合宿がスタート。まずはチームリーダーの羽山より、2017年度のSPEEDAサービス状況の報告や、来年度のSPEEDA事業の体制等について説明がありました。
ここからバトンをファシリテータの田中氏に渡し、あらためて我々のミッションや今年度のおさらいなどをしてから、いよいよ2018年度のチームテーマについての議論に入ります。各自で付箋に「これだ！」と思うテーマを記し、それをホワイトボードに貼り付けていきます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180115/20180115233331.jpg&quot; alt=&quot;f:id:uzabase:20180115233331j:plain&quot; title=&quot;f:id:uzabase:20180115233331j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;約30枚のテーマから絞り込んでいった結果、来年度のチームテーマは&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 150%&quot;&gt;「Production Ready k8s」&lt;br/&gt;
「Data Driven Automation」&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;に決まりました。
一つ目の「Production Ready k8s」は、「Kubernetes」というコンテナ管理システムを本番サービスに本格導入するという意味です。「Kubernetes」について、詳しくは合宿2日目のレポートをご参照ください。二つ目の「Data Driven Automation」はチーム内で話して作ったテーマで、システムの自動化をただやみくもに行うのではなく、時間がかかっているオペレーションや、障害になりかねないような複雑なオペレーションなど、数値化したデータを元に自動化を進めていこうという意味が込められています。&lt;/p&gt;

&lt;h3&gt;プロジェクト選別&lt;/h3&gt;

&lt;p&gt;その後は、各メンバーから事前に提出されたプロジェクト案について、重要度や上記テーマとの一致度を精査し、SREチームとして我々が取り組みたいプロジェクトに絞っていきました。ここで、その一部を紹介します。&lt;/p&gt;

&lt;h5&gt;オペレーションタスクの自動化・システム化&lt;/h5&gt;

&lt;p&gt;会社やサービスの拡大に伴いオペレーションタスクが増え続ける中、今後アップサイドの改善を行っていくためには、手動で行っているオペレーションにかかる時間を減らし、ソフトウェア開発・導入に注力する必要があります。これまでも取り組んできましたが、2018年度に自動化プロジェクトを実施し、手動オペレーションの自動化・システム化を集中して行いたいと考えています。&lt;/p&gt;

&lt;h5&gt;ログ分析 / モニタリング基盤の強化&lt;/h5&gt;

&lt;p&gt;SREチームとして改善を行うために、ログを分析してボトルネックやエラーの原因を調査したり、サービスの稼働状況をモニタリングすることは非常に重要です。しかしながら、ログを可視化してもうまく活用できていなかったり、そもそも何のためにログを収集しているのか明確でない、といったことは意外と多いのではないでしょうか。弊社でも、現状ではビジュアライズ出来ていないログがあったり、Kubernetesを本格的に利用していくにあたってますますログやメトリクスの可視化が重要になりますので、今後の重点テーマとしたいと思っています。&lt;/p&gt;

&lt;h5&gt;アラート発生時のエスカレーション自動化&lt;/h5&gt;

&lt;p&gt;サーバやネットワーク等の障害発生時、アラートを早くかつ確実に検知し、速やかに対応に入ることが重要です。その強化策として、自動エスカレーションシステムの導入を行います。&lt;/p&gt;

&lt;p&gt;なお、プロジェクト選別の途中でランチ休憩を挟みましたが、前回はお店を探すだけで結構時間がかかってしまったので、今回は事前にお弁当を注文して会場まで配達していただきました。意外とおしゃれな弁当で、合宿会場に合った感じで良かったと思います。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180115/20180115231015.jpg&quot; alt=&quot;f:id:uzabase:20180115231015j:plain&quot; title=&quot;f:id:uzabase:20180115231015j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;OKR策定&lt;/h3&gt;

&lt;p&gt;後半では、2018年度1Q（第1四半期）のOKR策定を行いました。OKRとは「Objectives and Key Results」の略で、業務の目標と成果を管理する手法です。当社のSPEEDA国内事業では2016年度からOKRについての取り組みを開始し、現在ではOKRベースでの活動が当たり前になっています。&lt;/p&gt;

&lt;p&gt;まずは、前半で決めた2018年度テーマの中から、1Q・2Qで取り組むプロジェクトを選びます。選び方はボトムアップで、各自がコミットしたいプロジェクトを1つずつ出してもらい、その希望を元にプロジェクトごとのオーナーを決めて、メンバーアサインを調整していきました。&lt;/p&gt;

&lt;p&gt;前述の通り、SREチームでは社内全体や「SPEEDA」のインフラ構築・運用も担当していますので、自分たちの希望するプロジェクトだけでなく、会社やSPEEDA事業全体に関わる業務も実施する必要があります。2018年には弊社オフィスの移転も計画されており、SREチームとしても様々な作業が必要になるため、オフィス移転自体も必須プロジェクトの一つとして上がりました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180115/20180115232130.jpg&quot; alt=&quot;f:id:uzabase:20180115232130j:plain&quot; title=&quot;f:id:uzabase:20180115232130j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;このようにして決定したプロジェクトごとに集まって、1QのOKRを策定しました。具体的には、プロジェクトの目標である「Objective」と計測可能な達成内容である「Key Results」を決めます。これがプロジェクトの活動のベースであり、進捗評価基準となるものですので、どのプロジェクトも真剣に議論していました。&lt;/p&gt;

&lt;p&gt;最後に、各プロジェクトのOKRを発表して、合宿の1日目はお開きとなりました。&lt;/p&gt;

&lt;h3&gt;合宿1日目を終えて&lt;/h3&gt;

&lt;p&gt;この記事の最初の方で記述したような施策を常に意識した結果、またファシリテータの田中氏の手腕も大きかったと思われますが、非常にスムーズにスケジュールを進めることが出来ました。今回の合宿同様、2018年度の各プロジェクトも順調に進みそうです。&lt;/p&gt;

&lt;p&gt;2日目の「Kubernetes合宿」については、各グループごとの取り組み内容をブログ記事として紹介したいと思いますので、どうぞご期待ください。&lt;/p&gt;

&lt;h3&gt;お知らせ&lt;/h3&gt;

&lt;p&gt;SREチームでは&lt;b&gt;「No Challenge, No SRE, No SPEEDA」&lt;/b&gt;を掲げ、ユーザベースグループのミッションである&lt;b&gt;「経済情報で、世界をかえる」&lt;/b&gt;の実現に向けて、日々業務に取り組んでいます。
興味を持ってくださった方は&lt;a href=&quot;https://uzabase-inc.workable.com/jobs/626352&quot;&gt;こちら&lt;/a&gt;をご確認ください。&lt;/p&gt;
</description>          <pubDate>Thu, 25 Jan 2018 19:21:44 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812337782127</guid>
          
            <category>SRE</category>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20180115/20180115230432.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Chrome hackingと称しブラウザのレイアウトバグをみんなで調べてみました</title>
          <link>http://tech.uzabase.com/entry/2017/10/11/130352</link>          <description>&lt;p&gt;はじめまして。プロダクト開発チームの&lt;a href=&quot;https://github.com/ryoqun&quot;&gt;小野寺 (ryoqun)&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://google.com/chrome/browser/&quot;&gt;Google Chrome (以下、Chrome)&lt;/a&gt;にて、HTMLのレンダリングの回帰バグが紛れ込み、その影響で&lt;a href=&quot;https://jp.ub-speeda.com/&quot;&gt;SPEEDA&lt;/a&gt;の一部分のレイアウトが崩れてしまう問題が発生しました。そこで、「Chrome hacking」と称し、数名の希望者を社内で募り、みんなでこのバグを調査、あわよくば解決しChromeのコミットログに&lt;code&gt;@uzabase.com&lt;/code&gt;のドメインを刻もうと奮い立ちました。&lt;/p&gt;

&lt;p&gt;しかし結論として、別の案件が入り、作業を中断している間に先を越され、名を刻むことはできませんでした。つまりは現在このバグは別の開発者によって修正が完了しています。しかし、結果的にはOSSのソースコードレベルでの調査の実例としては非常に好例となりました。&lt;/p&gt;

&lt;p&gt;その活動記録として、SPEEDA上での問題の発覚からChromeのバグであるという原因の特定や調査から収束に至るまでの一連の出来事を共有したいと思います。&lt;/p&gt;

&lt;h2&gt;前提として、&lt;b&gt;本当に&lt;/b&gt;Chromeのレイアウトバグでした&lt;/h2&gt;

&lt;p&gt;最初はChromeのバグだと断言できませんでした。&lt;/p&gt;

&lt;p&gt;そのため、本当にChromeがCSS 2.1のレイアウト回帰バグを混入させてしまったことが原因だと分かった時は驚きでした。&lt;/p&gt;

&lt;p&gt;当然として、SPEEDAでのレイアウトバグの発覚直後は、SPEEDAのCSSの問題だと考えていました。
というのもCSSは呆れるくらいに枯れたバグの入る余地のないWebの基礎技術だからです。&lt;/p&gt;

&lt;p&gt;CSS 2.1として2011年6月に&lt;a href=&quot;https://en.wikipedia.org/w/index.php?title=Cascading_Style_Sheets&amp;amp;oldid=797497810#cite_note-w3.org-40&quot;&gt;W3C Recommendationとなり&lt;/a&gt;、それから5年以上が経過しています。それまでの歩みは決して容易いものではなかったため、CSSは鉄壁の仕様となっています(1990年代の血みどろのブラウザ競争の中で産み落とされたCSS 1.0がのたうちまわり、当時のWebエンジニアたちをInteroperatabilityの名の下苦悩させ、戦禍の反省とでもいうかのごとく「複数レンダリングエンジン上で実装済み」という大義名分の元、W3CによってひねりだされたCSS 2.0が2000年代を通し、これでもかというくらいに精緻に策定され、晴れてCSS 2.1は生み出されました)。&lt;/p&gt;

&lt;p&gt;培われた仕様の厳密性、テストケースの網羅性はもはや芸術レベルで、1つの仕様に対しての手厚さとしては数有る仕様の中でもトップクラスにCSSは位置すると思います(特に個人的には&lt;a href=&quot;https://www.w3.org/TR/CSS22/visuren.html&quot;&gt;9 Visual formatting model&lt;/a&gt;や&lt;a href=&quot;https://www.w3.org/TR/CSS22/visudet.html&quot;&gt;10 Visual formatting model details&lt;/a&gt;あたりは傑作だと思います)。&lt;/p&gt;

&lt;p&gt;ということで、2017年の今日において、枯れたCSSに対し、&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Explorer_6&quot;&gt;IE 6&lt;/a&gt;やガラケーと戯れて涙を飲みながらレイアウトバグの回避を模索していた苦悩の2000年代を彷彿とさせる事象に再び直面し、非常に印象的でした。
&lt;b&gt;どんなに枯れていようが常にソフトウェアにはバグがつきものであり、バグに直面した時、時には自分たちのコードだけでなくミドルウェアも疑う必要性を痛感しました。&lt;/b&gt;
また、CSSを正しく実装することがいかに難しいことであるかの証左なのかもしれません。&lt;/p&gt;

&lt;h2&gt;バグの発覚と内容&lt;/h2&gt;

&lt;p&gt;今回のバグは、SPEEDAの本番環境にて、&lt;a href=&quot;https://chromereleases.googleblog.com/2017/06/stable-channel-update-for-desktop.html&quot;&gt;デスクトップ向けのChromeのStableチャンネルに59が出始めてから&lt;/a&gt;ようやく気づきました。&lt;/p&gt;

&lt;p&gt;バグの内容は、サイト検索フォームの下に表示されるサジェスト候補の一覧が異様に高くなってしまうというものでした。SPEEDAは一般公開されているサービスではないので見せられるスクリーンショットがかなり限定的でわかりにくいのですが、正しいレンダリング時の画像はこのようになります：&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170901/20170901011237.png&quot; alt=&quot;f:id:ryoqun:20170901011237p:plain&quot; title=&quot;f:id:ryoqun:20170901011237p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;逆に、正しくないレンダリング時の画像は、このようにかなり縦長な感じになってしまいます：&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170901/20170901011251.png&quot; alt=&quot;f:id:ryoqun:20170901011251p:plain&quot; title=&quot;f:id:ryoqun:20170901011251p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;これだけだとイメージがつきにくいのですが、サジェスト候補が画面表示領域に対してかなりの占有率になってしまい、ユーザーにも違和感を与えるレベルになってしまいました。&lt;/p&gt;

&lt;h2&gt;とりあえず応急処置&lt;/h2&gt;

&lt;p&gt;他のブラウザや以前のバージョンのChromeでは問題が起きなかったことから、どう考えてもChromeのバグらしいというのが判明してきました。そうなってくるとChromeはすぐには修正されないのでまずは応急処置です。
レンダリングエンジンがどう動いているかを想像しつつ、クロスブラウザで無害で等価なCSSを色々と試行錯誤した結果、結局は以下の変更だけで直ってしまいました。&lt;/p&gt;

&lt;pre class=&quot;code lang-diff&quot; data-lang=&quot;diff&quot; data-unlink&gt; .g-search-suggest li .suggestItem {
&lt;span class=&quot;synSpecial&quot;&gt;-  display: block;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+  display: inline-block;&lt;/span&gt;
   padding-left: 90px;
   color: #555;
&lt;/pre&gt;


&lt;p&gt;CSS的にはほとんど等価なはずなので、やはりどう考えてもChromeのバグのようでした(ちなみに、こういうレイアウトバグの回避策なんてものは、すっかり失われし技術となってしまいました)。&lt;/p&gt;

&lt;p&gt;この応急処置をSPEEDAに反映し、次にChromeを直そうということになりました。&lt;/p&gt;

&lt;h2&gt;ミニマルテストケースの作成&lt;/h2&gt;

&lt;p&gt;ともかくも最初はミニマルテストケースを作りました。そうすることによって社内に公開しても大丈夫で&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/list&quot;&gt;Googleにもバグレポートを送れる&lt;/a&gt;ようになります。
作ったミニマルテストケースは↓の通りです。&lt;/p&gt;

&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;.suggestItemOk1&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;display&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;inline&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;.suggestItemOk2&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;display&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;inline-block&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;.suggestItemNg&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;display&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;block&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;.item&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;overflow&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;hidden&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;display&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;inline-block&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemOk1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;AAA&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemOk1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;BBB&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemOk1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;CCC&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemOk2&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;AAA&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemOk2&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;BBB&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemOk2&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;CCC&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemNg&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;AAA&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemNg&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;BBB&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemNg&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;CCC&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;ミニマルテストケースの正しいレンダリング時の画像はこうなります:&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170901/20170901013353.png&quot; alt=&quot;f:id:ryoqun:20170901013353p:plain&quot; title=&quot;f:id:ryoqun:20170901013353p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;逆に、正しくないレンダリング時の画像はこうなります：&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170901/20170901013155.png&quot; alt=&quot;f:id:ryoqun:20170901013155p:plain&quot; title=&quot;f:id:ryoqun:20170901013155p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;SPEEDA上でのレイアウトバグとなんとなく似ているのは想像できるかと思います。&lt;/p&gt;

&lt;p&gt;このミニマルテストケースから分かることは、&lt;code&gt;display: list-item&lt;/code&gt;と&lt;code&gt;overflow: hidden&lt;/code&gt;,&lt;code&gt;display: block&lt;/code&gt;が組み合わさるとどうやらまずいということです。その情報を元に&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/list?can=2&amp;amp;q=inline+block+overflow+hidden&amp;amp;colspec=ID+Pri+M+Stars+ReleaseBlock+Component+Status+Owner+Summary+OS+Modified&amp;amp;x=m&amp;amp;y=releaseblock&amp;amp;cells=ids&quot;&gt;Chromiumのバグを検索&lt;/a&gt;してみましたが、同様のバグが見当たらなかったため、自分たちで直してみようということになりました(ちなみに、今現在はこのキーワードで検索すると、今回の回帰バグのレポートを見つけることができます)。&lt;/p&gt;

&lt;h2&gt;Chromiumのビルド&lt;/h2&gt;

&lt;p&gt;Chromeは、オープンソースである&lt;a href=&quot;https://www.chromium.org/&quot;&gt;Chromium&lt;/a&gt;から作られています。そこでオープンソースの真価を発揮ということで、&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/linux_build_instructions.md&quot;&gt;手元のマシンでビルド&lt;/a&gt;してみました。Chromiumは相当な数のサードパーティーライブラリに依存していますが、独自ツール(&lt;code&gt;gyp&lt;/code&gt;)を使って比較的簡単にビルド環境を構築できます。ただストレージ容量は結構必要で、例えば私の場合は50GBは必要でした。&lt;/p&gt;

&lt;p&gt;また、今回は回帰バグなのでChromium 58とChromium 59のどちらも並行させてビルドし、比較調査しやすいようにしました。&lt;/p&gt;

&lt;h2&gt;実際にHackして怪しい箇所を見つける&lt;/h2&gt;

&lt;p&gt;ChromeのDeveloper Toolsから得られる情報だけではレイアウトバグの状況が分からなかったので、ブラウザの真骨頂であるレンダリングの中のレイアウト(Reflow)コードを読む必要があります。大抵の大規模ソフトウェアは開発目的で色々な内部状態をダンプする機能があり、Chromiumも例外ではありません。ですが、今回の参加メンバーはChromeにはそれほど詳しくないため、当初はそのやり方が分からず、ソースコードとWebと変更履歴をつっつきまわり、最終的にはデバッグ情報を出力させることができました。&lt;/p&gt;

&lt;p&gt;具体的には下のように、デバッグ関数をよく通るであろうコードパスから呼び出してみました。&lt;/p&gt;

&lt;pre class=&quot;code lang-diff&quot; data-lang=&quot;diff&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;diff --git a/third_party/WebKit/Source/core/layout/LayoutListItem.cpp b/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
index 92af305..946e7c9 100644
&lt;span class=&quot;synType&quot;&gt;--- a/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;+++ b/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;@@ -466,6 +466,10 @@&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; void LayoutListItem::PositionListMarker() {&lt;/span&gt;
 
 void LayoutListItem::Paint(const PaintInfo&amp;amp; paint_info,
                            const LayoutPoint&amp;amp; paint_offset) const {
&lt;span class=&quot;synIdentifier&quot;&gt;+  this-&amp;gt;ShowTreeForThis();&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+  this-&amp;gt;ShowLayoutTreeForThis();&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+  this-&amp;gt;ShowLineTreeForThis();&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+  //this-&amp;gt;ShowDebugData();&lt;/span&gt;
   ListItemPainter(*this).Paint(paint_info, paint_offset);
 }
&lt;/pre&gt;


&lt;p&gt;そして、レイアウトバグの有無によって、↓のような違う2つのレイアウトツリーが生成されていることが分かりました。&lt;/p&gt;

&lt;p&gt;&lt;b&gt;正しい&lt;/b&gt;レイアウトツリー:&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;LayoutListItem 0x19a65d2243d0   LI
  LayoutListMarker (anonymous) 0x19a65d218df0
  LayoutBlockFlow 0x19a65d218f18        SPAN class=&amp;#34;suggestItemOk2&amp;#34;
    LayoutBlockFlow 0x19a65d219040      SPAN class=&amp;#34;item&amp;#34;
      LayoutText 0x19a65d2415f0 #text &amp;#34;CCC&amp;#34;
LayoutListItem 0x19a65d224290   LI
  LayoutBlockFlow 0x19a65d218828        SPAN class=&amp;#34;suggestItemNg&amp;#34;
    LayoutListMarker (anonymous) 0x19a65d2184b0
    LayoutBlockFlow 0x19a65d218cc8      SPAN class=&amp;#34;item&amp;#34;
      LayoutText 0x19a65d241528 #text &amp;#34;AAA&amp;#34;  &lt;/pre&gt;


&lt;p&gt;&lt;b&gt;正しくない&lt;/b&gt;レイアウトツリー(&lt;code&gt;suggestItemNg&lt;/code&gt;の&lt;code&gt;LayoutListMarker&lt;/code&gt;が外出しされてしまっている):&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;LayoutListItem 0x19a65d224650   LI
  LayoutListMarker (anonymous) 0x19a65d219168
  LayoutBlockFlow 0x19a65d219290        SPAN class=&amp;#34;suggestItemOk2&amp;#34;
    LayoutBlockFlow 0x19a65d2193b8      SPAN class=&amp;#34;item&amp;#34;
      LayoutText 0x19a65d240ee8 #text &amp;#34;CCC&amp;#34;
LayoutListItem 0x19a65d224790   LI
  LayoutBlockFlow (anonymous) 0x19a65d218a78
    LayoutListMarker (anonymous) 0x19a65d219608
  LayoutBlockFlow 0x19a65d219e20        SPAN class=&amp;#34;suggestItemNg&amp;#34;
    LayoutBlockFlow 0x19a65d219cf8      SPAN class=&amp;#34;item&amp;#34;
      LayoutText 0x19a65d241910 #text &amp;#34;AAA&amp;#34;
&lt;/pre&gt;


&lt;p&gt;正しくないレイアウトツリー中で、アドレスが&lt;code&gt;0x19a65d218a78&lt;/code&gt;の&lt;code&gt;LayoutBlockFlow&lt;/code&gt;が余計に生成されています。これによって余計な論理的な行が追加され、意図せず高さがおかしくなってしまうというからくりのようでした。&lt;/p&gt;

&lt;p&gt;ここまでくればもう峠を越していて、あとはこの差異をとことん調べ込んでいけばよくなります。&lt;/p&gt;

&lt;p&gt;今まではまったくの五里霧中で、どこにバグがあるのか分からず怪しそうなところをとにかく広く浅く探す必要がありました。胸をなでおろせた瞬間でした。&lt;/p&gt;

&lt;h2&gt;コミットの特定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;関連の実装が肝になっているようだったので、&lt;code&gt;LayoutListItem&lt;/code&gt;のソースコードを入念に見ました。調べた結果、回帰バグを混入させた&lt;a href=&quot;https://chromium.googlesource.com/chromium/src.git/+/fd1e60f0bee4b6b25d898f4f4f859aa38d1a9643%5E%21/#F2&quot;&gt;コミット&lt;/a&gt;を特定することができ、それを&lt;code&gt;git revert&lt;/code&gt;してビルドし直したらバグが発生しなくなりました！
いろいろな切り口で調べたのですが、結果的には&lt;code&gt;git annotate&lt;/code&gt;が決め手でした。比較的浅い回帰バグには&lt;code&gt;git annotate&lt;/code&gt;は有効です。&lt;/p&gt;

&lt;p&gt;変更内容としては非常に小さいです。ちなみにこの変更を見てみると、もともとはまた別のレイアウトのバグを直そうとしていたようです。&lt;/p&gt;

&lt;pre class=&quot;code lang-diff&quot; data-lang=&quot;diff&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;diff --git a/third_party/WebKit/Source/core/layout/LayoutListItem.cpp b/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
index 6c98974..4dbf2a7 100644
&lt;span class=&quot;synType&quot;&gt;--- a/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;+++ b/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;@@ -257,6 +257,11 @@&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; static LayoutObject* getParentOfFirstLineBox(LayoutBlockFlow* curr,&lt;/span&gt;
     if (currChild == marker)
       continue;

&lt;span class=&quot;synIdentifier&quot;&gt;+    // Shouldn&#39;t add marker into Overflow box, instead, add marker&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+    // into listitem&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+    if (currChild-&amp;gt;hasOverflowClip())&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+      break;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+&lt;/span&gt;
     if (currChild-&amp;gt;isInline() &amp;amp;&amp;amp;
         (!currChild-&amp;gt;isLayoutInline() ||
          curr-&amp;gt;generatesLineBoxesForInlineChild(currChild)))
&lt;/pre&gt;


&lt;h2&gt;いざ修正！(は叶わず…)&lt;/h2&gt;

&lt;p&gt;直そう！と思って一旦保留していたら、先を越され、その間にupstreamで修正されてしまいました。非常に残念です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=626293&quot;&gt;今回回帰バグを紛れ込ませてしまったChromiumのBTS上のIssue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=747695&quot;&gt;その回帰バグを修正したChromiumのBTS上のIssue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;修正に必要なコードはたったの一行でした。もともとが2行を追加しただけで回帰バグが発生したのですから、その2行のどちらかを直せば回帰バグは直るというわけです。&lt;/p&gt;

&lt;pre class=&quot;code lang-diff&quot; data-lang=&quot;diff&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;diff --git a/third_party/WebKit/Source/core/layout/LayoutListItem.cpp b/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
index 18e98a78..893ee6e 100644
&lt;span class=&quot;synType&quot;&gt;--- a/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;+++ b/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;@@ -259,7 +259,7 @@&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; static LayoutObject* GetParentOfFirstLineBox(LayoutBlockFlow* curr,&lt;/span&gt;
 
     // Shouldn&#39;t add marker into Overflow box, instead, add marker
     // into listitem
&lt;span class=&quot;synSpecial&quot;&gt;-    if (curr_child-&amp;gt;HasOverflowClip())&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+    if (curr-&amp;gt;HasOverflowClip())&lt;/span&gt;
       break;
 
     if (curr_child-&amp;gt;IsInline() &amp;amp;&amp;amp;
&lt;/pre&gt;


&lt;h2&gt;コードリーディング&lt;/h2&gt;

&lt;p&gt;今回の一連の修正で問題なのは、&lt;code&gt;ListMarker&lt;/code&gt;をLayout Treeに配置する場所です。
回帰バグの発生前後に関わらず、大前提として&lt;b&gt;&lt;code&gt;LayoutBlockFlow(class=suggeestItemNg)&lt;/code&gt;の子として&lt;code&gt;ListMarker&lt;/code&gt;を追加する&lt;/b&gt;必要があります。しかし、その前提が1つ目の修正で崩れてしまいました。回帰バグにより&lt;code&gt;LayoutListItem(&amp;lt;li&amp;gt;)&lt;/code&gt;の子として追加するように意図せず実装が変わってしまいました。&lt;/p&gt;

&lt;p&gt;その原因を少し説明します。&lt;/p&gt;

&lt;p&gt;まず、1つ目の修正で本当に直したかったことは、&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;に&lt;code&gt;overflow: hidden&lt;/code&gt;な子要素があるとき、その子として&lt;code&gt;ListMarker&lt;/code&gt;を追加するとclipされ、表示されないという問題でした。&lt;/p&gt;

&lt;p&gt;その場合は&lt;code&gt;ListItem&lt;/code&gt;の子として&lt;code&gt;ListMarker&lt;/code&gt;を入れる必要があります。なので1つ目の修正ではそういうロジックを&lt;code&gt;GetParentOfFirstLineBox()&lt;/code&gt;に新規に追加しました。&lt;/p&gt;

&lt;p&gt;具体的には、特定条件時に&lt;code&gt;GetParentOfFirstLineBox()&lt;/code&gt;からは&lt;code&gt;break&lt;/code&gt;経由で&lt;code&gt;nullptr&lt;/code&gt;を返し、呼び元である&lt;code&gt;UpdateMarkerLocation()&lt;/code&gt;が&lt;code&gt;ListItem&lt;/code&gt;の子として&lt;code&gt;ListMarker&lt;/code&gt;を追加するというものです。しかし、その判定条件が正しくなく回帰バグが発生してしまいました。&lt;/p&gt;

&lt;p&gt;ちなみに、この処理の副作用として改行が必然的に発生します(これがCSS的に正しいかは微妙です)。これは1つ目の修正としては許容するようですが、我々のミニマルテストケースでは許容されません。ミニマルテストケースの正しいレイアウトの挙動は&lt;code&gt;LayoutBlockFlow(class=suggeestItemNg)&lt;/code&gt;の子として&lt;code&gt;ListMarker&lt;/code&gt;を追加することです。&lt;/p&gt;

&lt;p&gt;追加した判定条件中で&lt;code&gt;HasOverflowClip()&lt;/code&gt;が判定すべき対象は&lt;code&gt;curr&lt;/code&gt;(つまりは&lt;code&gt;LayoutBlockFlow(class=suggeestItemNg)&lt;/code&gt;)であり&lt;code&gt;curr_child&lt;/code&gt;ではありません。まさに2つ目の修正ではそうなっています。
というのも、&lt;code&gt;curr_child&lt;/code&gt;をどうこうというよりもまずは&lt;code&gt;curr&lt;/code&gt;が&lt;code&gt;HasOverflowClip()&lt;/code&gt;でないならば、&lt;code&gt;curr&lt;/code&gt;は&lt;code&gt;ListMarker&lt;/code&gt;の親として適切なので、&lt;code&gt;curr&lt;/code&gt;に&lt;code&gt;ListMarker&lt;/code&gt;を追加すべきだからです。&lt;/p&gt;

&lt;p&gt;上のミニマルテストケースは&lt;code&gt;&amp;lt;span class=&quot;suggeestItemNg&quot;&amp;gt;&lt;/code&gt;の子として&lt;code&gt;&amp;lt;span class=&quot;item&quot;&amp;gt;&lt;/code&gt;がいます。正しくない条件では、&lt;b&gt;&lt;code&gt;overflow: hidden&lt;/code&gt;な&lt;/b&gt;&lt;code&gt;&amp;lt;span class=&quot;item&quot;&amp;gt;&lt;/code&gt;が&lt;code&gt;&amp;lt;span class=&quot;suggeestItemNg&quot;&amp;gt;&lt;/code&gt;の子要素となっているために、判定結果が誤って真になり、&lt;code&gt;ListMarker&lt;/code&gt;が&lt;code&gt;ListItem&lt;/code&gt;の子として追加されてしまいました。繰り返しますが、本来は&lt;code&gt;overflow: hidden&lt;/code&gt;でない&lt;code&gt;LayoutBlockFlow(class=suggeestItemNg)&lt;/code&gt;の子として追加すべきです。&lt;/p&gt;

&lt;p&gt;結果、不要な&lt;code&gt;LayoutBlockFlow&lt;/code&gt;ができたことで論理改行が発生し、最終的には高さが意図せず高くなってしまうというレイアウト崩れが発生しました。&lt;/p&gt;

&lt;h2&gt;感想&lt;/h2&gt;

&lt;p&gt;参加したメンバーの感想です。&lt;/p&gt;

&lt;p&gt;小野寺: 複数人でレイアウトロジックの動きを追うのは難しかったです。当社のSPEEDA開発グループではペアプロを積極採用しているのでペアプロの応用実践として何かいい解決案を考えてみたいと思いました。&lt;/p&gt;

&lt;p&gt;北内: レンダリングエンジンのソースコードを追うのは骨の折れる作業でしたが、複数人で協力しながら作業したおかげで根気よく進めることができました。また、Appleと共同で開発していたWebKitからフォークしてBlinkに移行したことにともない、メンバ関数の名前をlower-camelcaseからupper-camelcaseに変更するといった変更履歴を見ることができたのも興味深かったです。&lt;/p&gt;

&lt;p&gt;鈴木: Chromeがマルチプロセスで動いているからかデバッガでうまくプロセスにattachできなかったため、git grepとデバッグプリントを利用した最終的かつ原始的な手法でバグを調査しましたが、結果的に、これは思いの外有効な策となりました。また、複数人でバグ調査を行う場合、様々な視点・観点を得られ、またメンタル的にもメリットがあるので、機会があればおすすめしたいです。&lt;/p&gt;

&lt;p&gt;久保: SREチームでインフラエンジニアとして普段業務をしているため、Chromeのバグ改修は自分には非常にハードルが高く、先輩方についていくだけで必死でしたが、Chromeのような超大なソースのバグの原因を特定する際に、どのようにあたりをつけていくのかについて少し掴めたように思います。今後のSREチームとしての業務に活かせると思いました（Uzabaseのinfraチームは今年の7月よりinfraチームから&lt;a href=&quot;https://landing.google.com/sre/&quot;&gt;SRE&lt;/a&gt;チームに変わり、4Q(10月)以降本格的にSREチームとしてサービス改善にコミットし、バグの改修やレスポンス改善などこれまでのインフラレイヤーにとどまらない業務範囲になります）。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回はソースコードレベルまでの調査を業務で行いました。当社では今後もOSSにも積極的に取り組んでいきたいと思います。Chrome内のソースコードが原因の修正までは特定できたのはよかったのですが、別件の案件が入り、Chrome hackingを一旦保留にしていたら、upstreamでその間に修正されてしまい惜しかったです(本来は自分たちでバグレポートを立てて、テストケース込みでパッチを提出しようとしていたのですが……)。&lt;/p&gt;

&lt;p&gt;長くなりましたが、最後にまとめでこの記事を終わりたいと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;天下のGoogleのしかもChromeでさえも回帰バグが紛れ込んでしまうことがある。&lt;/li&gt;
&lt;li&gt;オープンソースだと簡単なバグは自分たちで調査＆修正はやろうと思えばできて、みんなでOSSに貢献できる。&lt;/li&gt;
&lt;li&gt;弊社では、時にはミドルウェアへのソースコード調査＆解決も厭わない情熱あふれる問題解決大好きエンジニアを募集しています。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fprojects%2F114230&quot; title=&quot;急成長の新サービスでSUPERなエンジニアになりたい人WANTED！ by 株式会社ユーザベース&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/114230&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fprojects%2F136928&quot; title=&quot;日本最大級のベンチャー情報プラットフォームの開発エンジニア募集！！ by 株式会社ユーザベース&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/136928&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fprojects%2F45821&quot; title=&quot;海外で世界一の経済情報プラットフォームを作りたいエンジニア募集！ by 株式会社ユーザベース&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/45821&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</description>          <pubDate>Wed, 11 Oct 2017 13:03:52 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812293694236</guid>
          
          <enclosure url="https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Gauge Test Automation Toolとアジャイル開発</title>
          <link>http://tech.uzabase.com/entry/2017/09/26/191009</link>          <description>&lt;p&gt;こんにちはSPEEDAのQAチームの工藤です。&lt;br/&gt;
最近ではテスト自動化周りのツールが数多く存在していますが、英語でのみ提供されていて日本で多くの人に知られていないサービスも多いと思います。&lt;br/&gt;
そんな中、&lt;b&gt;Gauge&lt;/b&gt;という自動化のツールがイケてるという情報を発見したので実際に調べてみました。&lt;/p&gt;

&lt;h1&gt;はじめに&lt;/h1&gt;

&lt;p&gt;GaugeとはThoughtWorks社が開発しているオープンソースのテスト自動化ツールです（2017年7月現在でベータ版）。&lt;br/&gt;
もっと具体的に言うと様々なロールのメンバーが自動テストのスクリプトを理解できるようにするためのspecificationツール（恐らく立ち位置的にはCucumber/Gherkinの代替）になります。&lt;br/&gt;
ざっくりGaugeの良いところを挙げると下記になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selenium Webdriverと一緒に使える&lt;/li&gt;
&lt;li&gt;マークダウン形式で記述できる&lt;/li&gt;
&lt;li&gt;ビジネス言語でテスト仕様を記述できる（実行可能な仕様書の概念をサポート）&lt;/li&gt;
&lt;li&gt;多言語、マルチプラットフォームをサポート&lt;/li&gt;
&lt;li&gt;外部データソースからテストデータを読み込める&lt;/li&gt;
&lt;li&gt;拡張可能（自分でpluginを開発できる）&lt;/li&gt;
&lt;li&gt;IDEのサポートが充実している&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Gaugeで使う用語&lt;/h1&gt;

&lt;p&gt;下記がGaugeで使用する基本的な用語（概念）です。&lt;br/&gt;
使い始めるのに最低限必要そうなものをピックアップしているので、当然他にもあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specifications(spec)&lt;/li&gt;
&lt;li&gt;Scenarios&lt;/li&gt;
&lt;li&gt;Steps&lt;/li&gt;
&lt;li&gt;Tags&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;もう少し詳しく説明していきます。&lt;/p&gt;

&lt;h4&gt;Specification(spec)&lt;/h4&gt;

&lt;p&gt;テスト対象アプリケーションの特定の機能の仕様を説明しています。&lt;/p&gt;

&lt;h4&gt;Scenarios&lt;/h4&gt;

&lt;p&gt;各Scenarioは、特定の仕様の1つのフローを表しています。仕様には少なくとも1つのScenarioが含まれている必要があります。&lt;/p&gt;

&lt;h4&gt;Steps&lt;/h4&gt;

&lt;p&gt;仕様を実行可能なコンポーネントに分けたものがStepになります。マークダウン形式のunordered list items（bulleted points）として記述されます。&lt;br/&gt;
（大きくContext Steps、Tear Down Steps、Scenarioやconcepts内のStepsに分けられますが、今回はそこらへんの説明は割愛します）。&lt;/p&gt;

&lt;h4&gt;Tags&lt;/h4&gt;

&lt;p&gt;TagはspecやScenarioを関連付けするために使用します。タグを用いてspecやScenarioをフィルタリングすることができ、後々便利になります。&lt;/p&gt;

&lt;h1&gt;Gaugeのインストール&lt;/h1&gt;

&lt;p&gt;下記ページからダウンロードできます。インストール方法も簡単で、下記ページに書いてある通りに進めていけば5分もかからずにGauge自体はインストールできます。&lt;br/&gt;
&lt;a href=&quot;https://getgauge.io/get-started.html&quot;&gt;https://getgauge.io/get-started.html&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;サンプルコードを見てみる&lt;/h1&gt;

&lt;p&gt;下記ページから自分の好みの言語のSampleコードのGithubリンクへ飛ぶことができます。&lt;br/&gt;
&lt;a href=&quot;https://docs.getgauge.io/examples.html&quot;&gt;https://docs.getgauge.io/examples.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;私はWeb app using SeleniumのJavaのSampleコードを選択しました。&lt;br/&gt;
&lt;a href=&quot;https://github.com/getgauge/gauge-example-java&quot;&gt;https://github.com/getgauge/gauge-example-java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下記がSpecificationのファイルになります。&lt;br/&gt;
上記で説明した用語はこんな形で使われます。&lt;/p&gt;

&lt;p&gt;user.spec（自然言語でテストケースを記述していくファイル）&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Signup   //Specification
======

Register a customer  //Scenario
-------------------
tags: user, signup, high, final, smoke  //Tags

* Sign up a new customer                  //Step1
* On the customer page                    //Step2
* Just registered customer is listed      //Step3
&lt;/pre&gt;


&lt;p&gt;上記のSpecファイルはIDEでタブ切り替えでHTML Previewを閲覧できます。Specファイルがそのまま仕様書として使えます。
（自分の場合はIntelliJを使いました。IDE側でプラグインをインストールしてやる必要があります）　　
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kudogen/20170718/20170718122930.png&quot; alt=&quot;f:id:kudogen:20170718122930p:plain&quot; title=&quot;f:id:kudogen:20170718122930p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;下記がSeleniumのテストコードになります。
各Stepに対してのテストコードが@Stepという形で実装されているのが分かります。&lt;br/&gt;
UserSpec.java&lt;/p&gt;

&lt;pre class=&quot;code lang-java&quot; data-lang=&quot;java&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt; UserSpec {
    &lt;span class=&quot;synType&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;final&lt;/span&gt; WebDriver driver;

    &lt;span class=&quot;synType&quot;&gt;public&lt;/span&gt; UserSpec() {
        &lt;span class=&quot;synType&quot;&gt;this&lt;/span&gt;.driver = DriverFactory.getDriver();
    }

    &lt;span class=&quot;synType&quot;&gt;public&lt;/span&gt; String localPart() {
        &lt;span class=&quot;synComment&quot;&gt;// Creating a random local part of an email address also used as username&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; UUID.randomUUID().toString();
    }

    &lt;span class=&quot;synPreProc&quot;&gt;@Step&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;On signup page&amp;quot;&lt;/span&gt;)    &lt;span class=&quot;synComment&quot;&gt;//Stepsの実装部分&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;void&lt;/span&gt; navigateToSignUpPage() {
        driver.get(SignUpPage.SignUpUrl);
    }
&lt;/pre&gt;


&lt;h1&gt;レポート機能&lt;/h1&gt;

&lt;p&gt;プラグインをインストールしてやるだけで、テスト流す度にHTMLのテストレポートを吐き出してくれます（下記画像参照）&lt;br/&gt;
実行したテストをSpecificationやTagで検索できて、Spec毎、Scenario毎、Step毎にどれくらい実行時間がかかったかも簡単にわかります。&lt;br/&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kudogen/20170718/20170718123453.png&quot; alt=&quot;f:id:kudogen:20170718123453p:plain&quot; title=&quot;f:id:kudogen:20170718123453p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;今回カバーしていない機能&lt;/h1&gt;

&lt;p&gt;これまでに紹介したのはあくまでも超基本的なTerminologyです。
他にも下記のようなものがあるのですが、今回は触れられていません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Concepts&lt;/li&gt;
&lt;li&gt;Parameters&lt;/li&gt;
&lt;li&gt;Stepの種類（Contexts, Tear Down Steps）&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;またかなり役立ちそうな下記機能もありますが、今回はカバーしていません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data driven execution&lt;/li&gt;
&lt;li&gt;Parallel Execution&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;まとめ&lt;/h1&gt;

&lt;p&gt;弊社ではテストケース＝仕様書という考え方から、ほぼすべてのプロジェクトでUATを書いています。&lt;br/&gt;
元々上記のような取り組みをしていたのですが、もっといいやり方がないか探していたところに見つけたのがGaugeでした。&lt;br/&gt;
Gaugeは実行可能なドキュメントという概念(&quot;the concept of executable documentation&quot;)をサポートしています。&lt;br/&gt;
また自動テストのケースを誰でも読めるようにするという考え方も弊社の開発チームが今まで取り組んできていたことですが、Gaugeを使えばよりスマートに実現できそうです。&lt;br/&gt;
今後は様々なプロジェクトでGaugeを導入していこうと考えています。&lt;/p&gt;

&lt;p&gt;次回は今回カバーできなかったGaugeのAdvancedな機能を中心に取り上げたブログ記事を執筆予定です。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;株式会社ユーザベースでは、より良い開発プロセスを共に作り上げていきたいエンジニアを&lt;a href=&quot;https://www.uzabase.com/recruit/occupation/&quot;&gt;大募集中&lt;/a&gt;です！&lt;/p&gt;
</description>          <pubDate>Tue, 26 Sep 2017 19:10:09 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812280671827</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kudogen/20170718/20170718122930.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>TCP Fast Open</title>
          <link>http://tech.uzabase.com/entry/2017/09/20/174010</link>          <description>&lt;p&gt;はじめまして。プロダクト開発チームの&lt;a href=&quot;https://github.com/ryoqun&quot;&gt;小野寺 (ryoqun)&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;今回は最近少しずつ浸透し始めてきた「&lt;a href=&quot;https://en.wikipedia.org/wiki/TCP_Fast_Open&quot;&gt;TCP Fast Open&lt;/a&gt;(以下、Fast Open)」という最新技術についてTCP/IPのおさらいを踏まえながら紹介したいと思います。ちなみに、この技術はTCPを高速化するもので、Google、Facebook、Appleなどでも本番投入され初めているものの、まだ国内では浸透していなくだいぶ先取りな紹介となります。&lt;/p&gt;

&lt;p&gt;Fast Openという技術は比較的枯れたTCPに対してプロトコルレベルで変更を加える比較的インパクトが大きいと勝手に思っている技術です。
最近は低レイヤーの技術はアプリケーション・サービス開発エンジニアだとあまり意識しないとは思いますが、基礎は大事なので
最新動向を掴むと共に、TCP/IPの良い復習ということで少しの間ですがお付き合い下さい。&lt;/p&gt;

&lt;h2&gt;Fast Openとは？&lt;/h2&gt;

&lt;p&gt;一言でいうとTCPのレイテンシーを改善する新しい拡張技術です。具体的には接続確立時(= Open)のレイテンシーを軽減(= Fast)します(よってFast Openという名前の由来となっています)。正確には、TCPの&lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol#Connection_establishment&quot;&gt;Three-way handshake&lt;/a&gt;を省略することで1 &lt;a href=&quot;https://en.wikipedia.org/wiki/Round-trip-time&quot;&gt;RTT&lt;/a&gt;分のレイテンシーを削減できます。&lt;/p&gt;

&lt;p&gt;Three-way handshakeを明示的に省略する必要性から、クライアント側とサーバー側の両方がFast Openに対応して初めて有効になります。&lt;/p&gt;

&lt;p&gt;注意点としては、僅かに接続確立時の信頼性が犠牲となることです。これについては後述します。また、各ホストへの初回接続時には使えません。理由は、セキュリティのため認証情報(Cookie)が必要になるためです。これはTCPの&lt;a href=&quot;https://en.wikipedia.org/wiki/SYN_flood&quot;&gt;SYN flooding&lt;/a&gt;攻撃に似た危険性を軽減する対策余地をプロトコル上に残すためです。&lt;/p&gt;

&lt;h2&gt;Three-way handshakeとFast Open&lt;/h2&gt;

&lt;p&gt;本来ならばTCPだとThree-way handshakeが必要になります。つまりは接続確立時に実際の通信ができるまでに、まずクライアント側からSYNフラグが立ったペイロードが無い小さいパケットを送り、サーバー側からSYN+ACKフラグが立ったペイロードが無い小さいパケットを受け取らなければなりません。これがまさしく1 RTT分のレイテンシーに相当するわけです。&lt;/p&gt;

&lt;p&gt;他方でFast Openが有効な場合、接続確立時にいきなりSYNフラグを立てた上で、ペイロードを乗せることができます。例えば、HTTPリクエストが&lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_segment_size&quot;&gt;TCPのMSS&lt;/a&gt;以下の場合は、0 RTTで&lt;a href=&quot;https://nginx.org/&quot;&gt;nginx&lt;/a&gt;などのHTTPサーバーはリクエストの内容をアプリケーションプロセスに渡すことが実現可能です。ただ、現在だとHTTPというよりかはHTTPS(=TLS)が主流です。その場合はTLS handshakeを即座に開始できるというわけです。なお、Fast Openと&lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_1.3_.28draft.29&quot;&gt;TLS 1.3&lt;/a&gt;を組み合わせるとTLSを含めて0-RTTを実現できるようになるようです。&lt;/p&gt;

&lt;h2&gt;デモ&lt;/h2&gt;

&lt;p&gt;百聞は一見にしかずということで、まずは実際の動きを見てみましょう。&lt;/p&gt;

&lt;p&gt;Fast Openが有効になっているサイトから、Fast Openが有効になっているブラウザで&lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/0/0a/A4_lands_on_melbourne.jpg&quot;&gt;ファイル&lt;/a&gt;を&lt;a href=&quot;https://www.chromium.org/&quot;&gt;Chromium&lt;/a&gt;でダウンロードしてみました。その時の&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#timing&quot;&gt;ChromiumのDeveloper toolsのNetworkのtiming&lt;/a&gt;と&lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt;で状態を確認してみました。ちなみにテストに使ったサービスはWikimediaですが、Fast Openが有効なサービスにはGoogleなどもありますが、日本国内からのアクセス時にレイテンシーが発生しFast Openの効果がわかりやすくなるようにWikimediaを選んでいます。&lt;/p&gt;

&lt;h3&gt;ChromiumのDeveloper tools&lt;/h3&gt;

&lt;p&gt;Fast Openが無効と有効になっている時の違いを比べてみました。&lt;/p&gt;

&lt;p&gt;無効時:&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170803/20170803105742.png&quot; alt=&quot;f:id:ryoqun:20170803105742p:plain&quot; title=&quot;f:id:ryoqun:20170803105742p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;有効時:&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170803/20170803105730.png&quot; alt=&quot;f:id:ryoqun:20170803105730p:plain&quot; title=&quot;f:id:ryoqun:20170803105730p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;赤の矢印(&lt;span style=&quot;color: #ff0000&quot;&gt;↑&lt;/span&gt;)のところに着目するとわかるように、Initial connection(= TCPのThree-way handshakeのこと)がFast Open有効時は必要なくなっていて、SSLのhandshakeが前倒しになって開始されているのがよくわかります。ただ、SSLのhandshakeにかかった時間や実際のデータの転送にかかった時間はそれほど変わっていません。結果としては、Initial connection分の時間(レイテンシー)だけが綺麗に全体のレスポンス時間から減っています。&lt;/p&gt;

&lt;h3&gt;Wireshark&lt;/h3&gt;

&lt;p&gt;Fast Openが無効と有効になっている時の違いを比べてみました。&lt;/p&gt;

&lt;p&gt;無効時:&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170803/20170803111734.png&quot; alt=&quot;f:id:ryoqun:20170803111734p:plain&quot; title=&quot;f:id:ryoqun:20170803111734p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;有効時:&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170803/20170803111746.png&quot; alt=&quot;f:id:ryoqun:20170803111746p:plain&quot; title=&quot;f:id:ryoqun:20170803111746p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;赤枠(&lt;span style=&quot;color: #ff0000&quot;&gt;□&lt;/span&gt;)のところに着目するとわかるように、Fast Open無効時は、TCPのThree-way handshakeをちゃんとやっています。しかしFast Open有効時は、Three-way handshakeをスキップしていきなりペイロード(Client Hello; TLS handshakeの最初のパケット)があるパケットを送っているのがわかります。結果、パケットのLengthが大きくなっています。なお、このスクリーンショットからはわからないのですが、この最初のパケットにはSYNフラッグがきちんと立っています。その後のやり取りの流れは無効時と変わりありません。&lt;/p&gt;

&lt;h2&gt;長所と短所&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;○ 接続確立時のRTTが減る！！！！(これは前述の通りですね)&lt;/li&gt;
&lt;li&gt;△ 接続確立後のデータ通信のレイテンシーは向上しない(Fast Openは接続確立時だけの話です)&lt;/li&gt;
&lt;li&gt;✕ アプリケーション層での冪等性が必要(これについては後述します)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;短所： アプリケーション層での冪等性が必要&lt;/h2&gt;

&lt;p&gt;これが、この記事の冒頭で書いたFast Openを有効にすることによって犠牲にされた信頼性となります。しかしながら、この懸念を考慮する必要はインターネットから到達可能なWebサービスにおいてはほとんどありません。より正確にいうと、そのような前提の場合はブラウザの多重Submit問題と同じ問題であり、ネットワーク起因やユーザー操作起因の違いはあれど、Fast Open抜きにしても必ず考慮する必要があるからです。しかし、TLSを使っていなかったり、あるいは、イントラネット内で完結するWebサービス、またはTCP本来の高信頼性を要求する通信にてFast Openを有効にする場合には懸念となります。&lt;/p&gt;

&lt;p&gt;そのFast Openを有効にした際の信頼性の問題というのは、1つのTCP上のアプリケーションリクエストがIP通信網の品質の問題により、2つになりえるという理論的な問題となります。そのためアプリケーション層において、リクエストが2つになっても問題無いという冪等性が必要になります。&lt;/p&gt;

&lt;p&gt;その問題の原因を説明する前にまずは、前提となる背景を説明します。TCPの役割というのは、信頼性が担保されないIP通信上に、信頼できる双方向通信路を実現するためのプロトコルです。Three-way handshakeはその信頼性の担保のために接続確立時に必要となります。当時のTCPの設計に問題があったわけでもなく、現時点に至るまでの技術的発展があったわけでもなく、昔も今も、レイテンシーと信頼性のトレードオフの結果、本来のTCPは信頼性を重視するためにはThree-way handshakeを必要としています。反面、IP通信は、設計思想として、耐障害性、冗長性を重視し、ごく稀なパケットロスやパケット重複は許容しています。&lt;/p&gt;

&lt;p&gt;というわけで、Fast Openを有効にした上で、Three-way handshakeが省かれ、パケット重複が万が一発生した場合、サーバーにとってはあたかもTCP接続確立が2つ来たかのように見えるので、2回リクエスト処理をしてしまうということになるわけです。&lt;/p&gt;

&lt;h2&gt;普及状況&lt;/h2&gt;

&lt;p&gt;繰り返しになりますが、Fast Openはクライアント側とサーバー側がどちらも対応して初めて使えるようになります。具体的にいうと、TCP/IPスタックは多くの場合、OSが実装しているので、OSがFast Openを実装し、それが有効になっている事と、ミドルウェアやアプリケーションが対応している事が必要になります。&lt;/p&gt;

&lt;p&gt;クライアント側とサーバー側に分けて、2017年9月時点での普及状況について説明します。&lt;/p&gt;

&lt;h3&gt;サーバー&lt;/h3&gt;

&lt;p&gt;Google, Wikipedia, CloudFront, Facebookで有効になっているようです。Fast Openはどちらかというと一般的なWebサービスでは効果が出にくく、CDNや広告配信等の1ショットのHTTPリクエストのトラフィックが大量に発生する場合に効果的です。日本サイトは筆者が簡単に確認する範囲では見つけられませんでした。&lt;/p&gt;

&lt;h3&gt;クライアント&lt;/h3&gt;

&lt;p&gt;Webブラウザはそれぞれ対応が始まっています。筆者は&lt;a href=&quot;https://www.ubuntu.com/&quot;&gt;Ubuntu 16.04/LTS&lt;/a&gt;の&lt;a href=&quot;https://packages.ubuntu.com/xenial/chromium-browser&quot;&gt;Chromium&lt;/a&gt;で動作確認をしています。
OS的にも、iOS、Android、Windowsでそれぞれ動きがあるようです。&lt;/p&gt;

&lt;h3&gt;ツール/ミドルウェア&lt;/h3&gt;

&lt;p&gt;ちらほらとサポートが始まっています。網羅的に調べたわけではありませんが、&lt;a href=&quot;http://netty.io/news/2015/09/30/4-0-32-Final.html&quot;&gt;netty&lt;/a&gt;、&lt;a href=&quot;https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/42865&quot;&gt;Ruby&lt;/a&gt;、&lt;a href=&quot;https://daniel.haxx.se/blog/2016/04/29/curl-7-49-0-goodies-coming/&quot;&gt;curl&lt;/a&gt;などで対応情報を見つけることができます。&lt;/p&gt;

&lt;h2&gt;他の技術との関連&lt;/h2&gt;

&lt;p&gt;最後に、Fast Openがそれぞれ他の技術とどのような関連を持つのかを見てみて、Fast Openの理解を多角的に深めていきたいと思います。&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Network_address_translation&quot;&gt;NAT&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;NATの実装によっては、Fast Openとの相性が良くない場合があります。これは当然で、NATはその原理上TCP接続の状態遷移をトラッキングしなければならないのですが、NATの実装が厳しすぎると、Fast OpenによってThree-way handshakeが省かれれば十分に正しくトラッキングできなくなる場合はあります。&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_persistent_connection&quot;&gt;HTTP keep-alive&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;HTTP通信におけるTCPの接続確立時のレイテンシーを軽減するという目的の上では、Fast OpenもHTTP keep-aliveも同じ立ち位置です。HTTP keep-aliveによってだいぶレイテンシーは改善されます。なので通常のブラウジングでは、keep-aliveに比べてFast Openというのはそれほど如実に効果があるわけではありません。ただ、Fast Openの策定背景としては、&lt;a href=&quot;https://tools.ietf.org/html/rfc7413#section-6.3.3&quot;&gt;HTTP keep-aliveはモバイル回線網にてあまり機能していない&lt;/a&gt;という指摘もあります。&lt;/p&gt;

&lt;h3&gt;スマートフォン向けのHTTP APIのエンドポイント&lt;/h3&gt;

&lt;p&gt;アプリがkeep-aliveしていないならば効果はあります。ただし、まずはkeep-aliveを対応したほうがいいのは言うまでもありません。&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Last_mile&quot;&gt;ラストワンマイル回線網(FTTHと4G)&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;宅地のラストワンマイル回線網というと今で言えば日本国内で言えば、FTTHが圧倒的なシェアになっています。FTTHで通信ホストが国内の場合はそもそものレイテンシーは数msなのでFast Openの効果はほとんどありません。ADSLならば多少は効果はあります。しかし、ラストワンマイルが何にしろ、海外ホストへのアクセスの場合には効果が望めます。&lt;/p&gt;

&lt;p&gt;モバイルのラストワンマイル回線網というと今で言えば4G回線が全盛となっています。こちらの場合は国内ホスト、海外ホストに限らず一定のレイテンシー向上が望めます。&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_cookie#Other_uses&quot;&gt;Supercookie&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Fast Openの際に使われるCookieの転用例としては、Supercookieが挙げられます。セキュリティ上、DOS攻撃対策としてCookieが必要なわけですが、別のセキュリティ観点では、匿名性が犠牲となっています。特に&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_ETag#Tracking_using_ETags&quot;&gt;E-tag&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security#Privacy_issues&quot;&gt;HSTS&lt;/a&gt;同様、passiveでドメインをまたいだ(=クロスドメイン)トラッキングが実現できてしまいます。今回新たにFast Openがトラッキング手段として加わったわけですが、他の既存の代替手段も存在するのも含め、残念ながらトラッキングを現在において完全に抑制することは非常に困難となっています。&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP/2&quot;&gt;HTTP/2&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;HTTP/2になってもTCPベースなので引き続きFast Openは意味があります。しかし&lt;a href=&quot;https://en.wikipedia.org/wiki/QUIC&quot;&gt;QUIC&lt;/a&gt;に対してはこちらはUDPベースなので関係なくなります。&lt;/p&gt;

&lt;h2&gt;参考情報&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7413&quot;&gt;仕様(比較的手頃な文量でまとまっていて読みやすい)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://devstreaming.apple.com/videos/wwdc/2015/719ui2k57m/719/719_your_app_and_next_generation_networks.pdf&quot;&gt;WWDC 15での言及(冪等性についてわかりやすい図があります)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://insouciant.org/tech/some-quick-thoughts-on-tcp-fast-open-and-chromium/&quot;&gt;Chromiumの開発者の考察&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.windows.com/msedgedev/2016/06/15/building-a-faster-and-more-secure-web-with-tcp-fast-open-tls-false-start-and-tls-1-3/&quot;&gt;Microsoftの0-RTT TLSと絡めながらの言及&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;レイテンシーが速くなります。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc675#section-4.3.2&quot;&gt;半世紀近く変わらなかったTCP(のThree-way handshake)&lt;/a&gt;が地味に変わるかもしれません。&lt;/li&gt;
&lt;/ul&gt;


&lt;hr /&gt;

&lt;p&gt;株式会社ユーザベースでは、ローレベル含め技術が大好きなエンジニアを&lt;a href=&quot;https://www.uzabase.com/recruit/occupation/&quot;&gt;大募集中&lt;/a&gt;です！&lt;/p&gt;
</description>          <pubDate>Wed, 20 Sep 2017 17:40:10 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812285136297</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170803/20170803105742.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>マルチホストでのDocker Container間通信 第3回: Kubernetesのネットワーク(CNI, kube-proxy, kube-dns)</title>
          <link>http://tech.uzabase.com/entry/2017/09/12/164756</link>          <description>&lt;p&gt;こんにちは。SPEEDA開発チームの鈴木です。&lt;/p&gt;

&lt;p&gt;これまでマルチホストでのContainer間通信について、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dockerのネットワークの基礎(&lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/07/172411&quot;&gt;前々回&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;マルチホストでのContainer間通信を実現する手段の一つとしてのOverlayNetwork(&lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/23/175813&quot;&gt;前回&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;といった話をしてきましたが、3回目となる今回はこれまでの内容を踏まえた上でKubernetesのネットワークについてお話します。内容としては大きく次の2つになります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;どうやってマルチホストでのContainer間通信を実現しているか&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Service名でPodと通信できるようするための仕組み&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;では早速1つ目の話をはじめましょう。Kubernetesを利用する場合、基本的には複数のノード上にKubernetesクラスタを構築することになります。
（&lt;a href=&quot;https://github.com/kubernetes/minikube&quot;&gt;minikube&lt;/a&gt;を使って単一ノードからなるKubernetesクラスタを構築するような例外はあります）&lt;br/&gt;
つまり何らかの方法でホストをまたいでContainer間通信を行うわけですが、そのための方法は3つあります。&lt;/p&gt;

&lt;h1&gt;マルチホストでContainer間通信を行う3つの方法&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;自前でOverlayNetworkを構築し、それをKubernetesと連携させる&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNI(Container Networking Interface)を使う&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kubenetを使う&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;それではこれから上記3つについて少し詳しく説明していきます。&lt;/p&gt;

&lt;h1&gt;1.自前でOverlayNetworkを構築してKubernetesと連携させる&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/23/175813&quot;&gt;前回&lt;/a&gt;説明した &lt;a href=&quot;https://github.com/coreos/flannel&quot;&gt;flannel&lt;/a&gt; のようなツールを用いてOverlayNetworkを構築する方法です。&lt;br/&gt;
私が2016年にCoreOSクラスタ上でKubernetesクラスタをマニュアルで構築したとき、CoreOSの公式ドキュメントに記載されていた方法がこれです(CoreOSがContainer Linuxに改名される前の話です)。&lt;br/&gt;
ちなみにCoreOSの場合はflannelを用います(flannelはCoreOS社が開発しています)。&lt;br/&gt;
この場合、CoreOSのcloud-configにflannelの設定とflannelに合わせたDockerの設定が必要になります。&lt;br/&gt;
当然すべてのノードに対して設定が必要になるのでなかなか面倒です。&lt;/p&gt;

&lt;h1&gt;2.CNI(Container Network Interface)を使う&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/containernetworking/cni&quot;&gt;CNI&lt;/a&gt;は、&lt;a href=&quot;https://www.cncf.io/&quot;&gt;Cloud Native Computing Foundation&lt;/a&gt;※のプロジェクトで、&lt;br/&gt;
Container内のNetwork Interfaceを構成するためのプラグインを開発するための仕様とライブラリなどから構成されています。&lt;br/&gt;
ネットワーク層をプラガブルにしたいという考えは、多くのContainer RuntimeとOrchestration Toolが共通して持っている考えのため、重複を避けるために定義されました。&lt;/p&gt;

&lt;p&gt;※Cloud Native Computing Foundationは、Kubernetesの開発主体です。
DockerやCoreOS、Red Hat、Google、IBM、Mesosphere、シスコ、インテルなどが主導して2015年7月に発足しました。&lt;/p&gt;

&lt;p&gt;KubernetesはこのCNIプラグインを利用することができます。
ちなみにDocker自体もCNIとは別に&lt;a href=&quot;http://docs.docker.jp/engine/extend/plugins_network.html&quot;&gt;ネットワークプラグイン&lt;/a&gt;を利用できる仕組みを持っています。&lt;/p&gt;

&lt;h3&gt;CNIを利用できるContainer Runtime&lt;/h3&gt;

&lt;p&gt;公式ページによると現在(2017年9月)CNIを利用できるContainer Runtimeは以下のようなものがあるようです。&lt;br/&gt;
Kubernetesだけではなく、MesosなんかもCNIを利用できるみたいですね。&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://coreos.com/blog/rkt-cni-networking.html&quot;&gt;rkt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kurma.io/&quot;&gt;Kurma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kubernetes.io/docs/admin/network-plugins/&quot;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/openshift/origin/blob/master/docs/openshift_networking_requirements.md&quot;&gt;OpenShift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cloudfoundry-incubator/cf-networking-release&quot;&gt;Cloud Foundry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apache/mesos/blob/master/docs/cni.md&quot;&gt;Mesos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;hr /&gt;

&lt;h3&gt;3rd Party Plugins&lt;/h3&gt;

&lt;p&gt;以下はCNIの仕様に則って作成されたCNIプラグインです(2017年9月現在)。&lt;br/&gt;
注意点として、上述したようにCNIはKubernetesのためだけのインタフェースではないので、Kubernetes用ではないプラグインもあることを挙げておきます。&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/projectcalico/cni-plugin&quot;&gt;Project Calico&lt;/a&gt; - L3の仮想ネットワーク&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/weaveworks/weave&quot;&gt;Weave&lt;/a&gt; - 仮想ネットワーク&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/contiv/netplugin&quot;&gt;Contiv Networking&lt;/a&gt; - 仮想ネットワーク + 柔軟なネットワークポリシー制御を提供&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hustcat/sriov-cni&quot;&gt;SR-IOV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cilium/cilium&quot;&gt;Cilium&lt;/a&gt; - Container用 BPF &amp;amp; XDP&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/infobloxopen/cni-infoblox&quot;&gt;Infoblox&lt;/a&gt; - ContainerのIPアドレスを管理するサービス(IPAM)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Intel-Corp/multus-cni&quot;&gt;Multus&lt;/a&gt; - Kubernetesのマルチプラグインとして動作。複数のプラグインのグループ化(他のプラグインをdelegateして呼び出すらしい)。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/romana/kube&quot;&gt;Romana&lt;/a&gt; - KubernetesのためのL3の仮想ネットワーク + ネットワークポリシー制御&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Huawei-PaaS/CNI-Genie&quot;&gt;CNI-Genie&lt;/a&gt; - Kubernetesのマルチプラグインとして動作。一つのContainerに複数のネットワークインタフェースを割り当て、インタフェースごとにCNIプラグインを割り当てられる。例えばeth0はCalico、eth1はFlannel、eth2はWeaveなど。つまりContainerが複数のネットワークにまたがることができる。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nuagenetworks/nuage-cni&quot;&gt;Nuage CNI&lt;/a&gt; - Kubernetesのための仮想ネットワーク + ネットワークポリシー制御&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cloudfoundry-incubator/silk&quot;&gt;Silk&lt;/a&gt; - Cloud Foundryのためのプラグイン。flannelに触発されたらしい。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/John-Lin/linen-cni&quot;&gt;Linen&lt;/a&gt; - Open vSwitchでOverlayNetworkを構築するプラグイン&lt;/li&gt;
&lt;/ul&gt;


&lt;hr /&gt;

&lt;p&gt;これらを見ると、CalicoやWeaveといった単体でContainerの仮想ネットワークを構築できるツールがCNIプラグインとしても提供されていることがわかります。&lt;br/&gt;
プラグインの要件を満たすように既存の機能をうまく使っているのでしょうね。&lt;br/&gt;
余談ですが、flannelもそうですが、Calico, Weave, Silk, Linenというように「生地」に関連した名前のものが多いですね。&lt;/p&gt;

&lt;p&gt;Kubernetesから利用するのは当然Calico, Weave, Contivといった仮想ネットワークのためのCNIプラグインになります。&lt;/p&gt;

&lt;h3&gt;CNIプラグインの動作&lt;/h3&gt;

&lt;p&gt;続いてCNIプラグインはどう動作するのか、具体的にどんなものなのかをご理解いただくために、少々ソースコードを読みながら解説します。&lt;/p&gt;

&lt;h4&gt;CNIプラグインのソースコード&lt;/h4&gt;

&lt;p&gt;CNIプロジェクトは、CNIプラグインを簡単に開発できるようにスケルトンを用意しています。&lt;br/&gt;
プラグインの動作は、このスケルトンと実際にスケルトンを使って作られたプラグインの両方を見ると理解できると思います。&lt;br/&gt;
では順番に見ていきましょう。まずスケルトンからです。軽く眺めて次にいきましょう。&lt;br/&gt;
(注：抜粋です。コードすべてではありません。またあくまでこれは今現在のバージョンのコードです。)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/containernetworking/cni/blob/HEAD/pkg/skel/skel.go&quot;&gt;cni/pkg/skel/skel.go&lt;/a&gt;&lt;/p&gt;

&lt;pre class=&quot;code lang-go&quot; data-lang=&quot;go&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;type&lt;/span&gt; CmdArgs &lt;span class=&quot;synStatement&quot;&gt;struct&lt;/span&gt; {
    ContainerID &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt;
    Netns       &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt;
    IfName      &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt;
    Args        &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt;
    Path        &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt;
    StdinData   []&lt;span class=&quot;synType&quot;&gt;byte&lt;/span&gt;
}

&lt;span class=&quot;synStatement&quot;&gt;type&lt;/span&gt; dispatcher &lt;span class=&quot;synStatement&quot;&gt;struct&lt;/span&gt; {
    Getenv &lt;span class=&quot;synType&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt;
    Stdin  &lt;span class=&quot;synType&quot;&gt;io.Reader&lt;/span&gt;
    Stdout &lt;span class=&quot;synType&quot;&gt;io.Writer&lt;/span&gt;
    Stderr &lt;span class=&quot;synType&quot;&gt;io.Writer&lt;/span&gt;

    ConfVersionDecoder version.ConfigDecoder
    VersionReconciler  version.Reconciler
}

&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; PluginMain(cmdAdd, cmdDel &lt;span class=&quot;synType&quot;&gt;func&lt;/span&gt;(_ *CmdArgs) &lt;span class=&quot;synType&quot;&gt;error&lt;/span&gt;,&lt;span class=&quot;synError&quot;&gt; &lt;/span&gt;
  versionInfo version.PluginInfo) {
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; e := PluginMainWithError(cmdAdd, cmdDel, versionInfo); e != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err := e.Print(); err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
            log.Print(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Error writing error JSON to stdout: &amp;quot;&lt;/span&gt;, err)
        }
        os.Exit(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
    }
}

&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; PluginMainWithError(cmdAdd, cmdDel &lt;span class=&quot;synType&quot;&gt;func&lt;/span&gt;(_ *CmdArgs) &lt;span class=&quot;synType&quot;&gt;error&lt;/span&gt;,&lt;span class=&quot;synError&quot;&gt; &lt;/span&gt;
  versionInfo version.PluginInfo) *types.Error {
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (&amp;amp;dispatcher{
        Getenv: os.Getenv,
        Stdin:  os.Stdin,
        Stdout: os.Stdout,
        Stderr: os.Stderr,
    }).pluginMain(cmdAdd, cmdDel, versionInfo)
}

&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; (t *dispatcher) pluginMain(cmdAdd, cmdDel &lt;span class=&quot;synType&quot;&gt;func&lt;/span&gt;(_ *CmdArgs) &lt;span class=&quot;synType&quot;&gt;error&lt;/span&gt;,&lt;span class=&quot;synError&quot;&gt; &lt;/span&gt;
  versionInfo version.PluginInfo) *types.Error {
    cmd, cmdArgs, err := t.getCmdArgsFromEnv()
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; createTypedError(err.Error())
    }

    &lt;span class=&quot;synStatement&quot;&gt;switch&lt;/span&gt; cmd {
    &lt;span class=&quot;synStatement&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ADD&amp;quot;&lt;/span&gt;:
        err = t.checkVersionAndCall(cmdArgs, versionInfo, cmdAdd)
    &lt;span class=&quot;synStatement&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;DEL&amp;quot;&lt;/span&gt;:
        err = t.checkVersionAndCall(cmdArgs, versionInfo, cmdDel)
    &lt;span class=&quot;synStatement&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;VERSION&amp;quot;&lt;/span&gt;:
        err = versionInfo.Encode(t.Stdout)
    &lt;span class=&quot;synStatement&quot;&gt;default&lt;/span&gt;:
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; createTypedError(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;unknown CNI_COMMAND: %v&amp;quot;&lt;/span&gt;, cmd)
    }

    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; e, ok := err.(*types.Error); ok {
            &lt;span class=&quot;synComment&quot;&gt;// don&#39;t wrap Error in Error&lt;/span&gt;
            &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; e
        }
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; createTypedError(err.Error())
    }
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt;
}
&lt;/pre&gt;


&lt;p&gt;はい、続いてはスケルトンを利用した実際のプラグインです。&lt;br/&gt;
これはCNIプロジェクトがサンプルとして用意している単純なプラグインです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/containernetworking/plugins/blob/master/plugins/main/loopback/loopback.go&quot;&gt;plugins/plugins/main/loopback/loopback.go&lt;/a&gt;&lt;/p&gt;

&lt;pre class=&quot;code lang-go&quot; data-lang=&quot;go&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; main() {
    skel.PluginMain(cmdAdd, cmdDel, version.All)
}

&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; cmdAdd(args *skel.CmdArgs) &lt;span class=&quot;synType&quot;&gt;error&lt;/span&gt; {
    args.IfName = &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;lo&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// ignore config, this only works for loopback&lt;/span&gt;
    err := ns.WithNetNSPath(args.Netns, &lt;span class=&quot;synType&quot;&gt;func&lt;/span&gt;(_ ns.NetNS) &lt;span class=&quot;synType&quot;&gt;error&lt;/span&gt; {
        link, err := netlink.LinkByName(args.IfName)
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
            &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; err &lt;span class=&quot;synComment&quot;&gt;// not tested&lt;/span&gt;
        }

        err = netlink.LinkSetUp(link)
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
            &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; err &lt;span class=&quot;synComment&quot;&gt;// not tested&lt;/span&gt;
        }

        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt;
    })
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; err &lt;span class=&quot;synComment&quot;&gt;// not tested&lt;/span&gt;
    }

    result := current.Result{}
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; result.Print()
}

&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; cmdDel(args *skel.CmdArgs) &lt;span class=&quot;synType&quot;&gt;error&lt;/span&gt; {
    args.IfName = &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;lo&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// ignore config, this only works for loopback&lt;/span&gt;
    err := ns.WithNetNSPath(args.Netns, &lt;span class=&quot;synType&quot;&gt;func&lt;/span&gt;(ns.NetNS) &lt;span class=&quot;synType&quot;&gt;error&lt;/span&gt; {
        link, err := netlink.LinkByName(args.IfName)
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
            &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; err &lt;span class=&quot;synComment&quot;&gt;// not tested&lt;/span&gt;
        }

        err = netlink.LinkSetDown(link)
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
            &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; err &lt;span class=&quot;synComment&quot;&gt;// not tested&lt;/span&gt;
        }

        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt;
    })
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; err &lt;span class=&quot;synComment&quot;&gt;// not tested&lt;/span&gt;
    }

    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt;
}
&lt;/pre&gt;


&lt;h4&gt;CNIプラグインのソースコード解説&lt;/h4&gt;

&lt;p&gt;それではいよいよ解説に入ります。このサンプルのmain関数を見てください。CmdArgsを引数にとる関数2つを、スケルトンのPluginMain関数に渡しています。&lt;/p&gt;

&lt;pre class=&quot;code lang-go&quot; data-lang=&quot;go&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; main() {
    skel.PluginMain(cmdAdd, cmdDel, version.All)
}
&lt;/pre&gt;


&lt;p&gt;この&lt;code&gt;cmdAdd&lt;/code&gt;と&lt;code&gt;cmdDel&lt;/code&gt;はContainerが追加・削除されたタイミングで(CNIプラグインを利用するプログラム)から呼び出される関数です。&lt;br/&gt;
引数の&lt;code&gt;CmdArgs&lt;/code&gt;は、スケルトンを見ると次のようになっています。&lt;/p&gt;

&lt;pre class=&quot;code lang-go&quot; data-lang=&quot;go&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;type&lt;/span&gt; CmdArgs &lt;span class=&quot;synStatement&quot;&gt;struct&lt;/span&gt; {
    ContainerID &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// ContainerのID&lt;/span&gt;
    Netns       &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// ネットワーク名前空間名&lt;/span&gt;
    IfName      &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// インタフェース名&lt;/span&gt;
    Args        &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// プラグイン実行時の引数&lt;/span&gt;
    Path        &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// CNIプラグインを検索するパスのリスト(パスは:で区切る)&lt;/span&gt;
    StdinData   []&lt;span class=&quot;synType&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// 標準入力の値&lt;/span&gt;
}
&lt;/pre&gt;


&lt;p&gt;つまり、プラグインはContainerの追加・削除を契機として、上記構造体の情報を元に任意の処理を行います。&lt;br/&gt;
ちなみにこのサンプルはContainerの追加時にループバックインタフェースをContainerのネットワーク名前空間内に作成し、Containerの削除時にループバックインタフェースをネットワーク名前空間から削除しています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;code&gt;CmdArgs&lt;/code&gt;について補足 &lt;/strong&gt;&lt;br/&gt;
main関数では&lt;code&gt;cmdAdd&lt;/code&gt;,&lt;code&gt;cmdDel&lt;/code&gt;の両方を渡しているが、addとdelのどちらを使うかどう決定されるのでしょう。
これはスケルトンのコードを見ればわかるのですが、&lt;code&gt;CNI_COMMAND&lt;/code&gt;という環境変数の値により決定されます。&lt;br/&gt;
値が&lt;code&gt;ADD&lt;/code&gt;の場合&lt;code&gt;cmdAdd&lt;/code&gt;が呼び出され、値が&lt;code&gt;DEL&lt;/code&gt;の場合&lt;code&gt;cmdDel&lt;/code&gt;が呼び出されます。&lt;br/&gt;
また&lt;code&gt;cmdAdd&lt;/code&gt;,&lt;code&gt;cmdDel&lt;/code&gt;に渡ってくる`CmdArgsの値はどのようにセットされているのでしょうか。&lt;br/&gt;
これも環境変数が使われていて、単純に以下の環境変数の値が構造体の対応する変数にセットされています。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left;&quot;&gt;環境変数&lt;/th&gt;
&lt;th style=&quot;text-align:left;&quot;&gt;CmdArgsの変数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;CNI_CONTAINERID&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;ContainerID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;CNI_NETNS&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;Netns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;CNI_IFNAME&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;IfName&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;CNI_ARGS&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;Args&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;CNI_PATH&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;Path&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;つまりCNIプラグインの処理を呼び出すプログラムは、予めこれらの環境変数をセットしておく必要があります。&lt;/p&gt;

&lt;p&gt;ここまで簡単にコードを見てきましたが、どうでしょう。結構シンプルな仕組みではないでしょうか。&lt;/p&gt;

&lt;h3&gt;KubernetesでCNIを使うには&lt;/h3&gt;

&lt;p&gt;KubernetesでCNIを使う場合は、&lt;a href=&quot;https://kubernetes.io/docs/concepts/cluster-administration/network-plugins/#cni&quot;&gt;公式ドキュメント&lt;/a&gt;に書いてありますが、&lt;br/&gt;
&lt;code&gt;kubelet&lt;/code&gt; の引数に &lt;code&gt;--network-plugin=cni&lt;/code&gt; の指定と、&lt;br/&gt;
CNIの設定を配置するディレクトリ&lt;code&gt;--cni-conf-dir&lt;/code&gt;(defaultは &lt;code&gt;/etc/cni/net.d&lt;/code&gt;)の指定が必要になります。&lt;br/&gt;
またCNIプラグイン自体は&lt;code&gt;--cni-bin-dir&lt;/code&gt;（defaultは&lt;code&gt;/opt/cni/bin&lt;/code&gt;）に存在する必要があります。&lt;/p&gt;

&lt;p&gt;例えばCNIプラグインとして、Weaveを使用する場合、このような感じになります。&lt;/p&gt;

&lt;pre class=&quot;code lang-json&quot; data-lang=&quot;json&quot; data-unlink&gt;$ &lt;span class=&quot;synError&quot;&gt;view&lt;/span&gt; /&lt;span class=&quot;synError&quot;&gt;etc&lt;/span&gt;/&lt;span class=&quot;synError&quot;&gt;cni&lt;/span&gt;/&lt;span class=&quot;synError&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;synError&quot;&gt;d&lt;/span&gt;/10-&lt;span class=&quot;synError&quot;&gt;weave&lt;/span&gt;.&lt;span class=&quot;synError&quot;&gt;conf&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;
    &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;name&lt;/span&gt;&amp;quot;: &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;weave&lt;/span&gt;&amp;quot;,
    &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;type&lt;/span&gt;&amp;quot;: &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;weave-net&lt;/span&gt;&amp;quot;,
    &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;hairpinMode&lt;/span&gt;&amp;quot;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;




&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ ls -lat /opt/cni/bin/weave*
lrwxrwxrwx 1 root root       18 Aug 10 14:51 weave-ipam -&amp;gt; weave-plugin-1.9.7*
lrwxrwxrwx 1 root root       18 Aug 10 14:51 weave-net -&amp;gt; weave-plugin-1.9.7*
-rwxr-xr-x 1 root root  9446280 Jun  7 02:37 weave-plugin-1.9.7*&lt;/pre&gt;


&lt;h3&gt;CNIの仕様について更に詳しく&lt;/h3&gt;

&lt;p&gt;CNIの仕様について更に詳しく知りたい場合は、公式の&lt;a href=&quot;https://github.com/containernetworking/cni/blob/master/SPEC.md#example-configurations&quot;&gt;こちら&lt;/a&gt;をご覧ください。&lt;br/&gt;
CNIの設定ファイルについての説明なども書いてあります。&lt;/p&gt;

&lt;h1&gt;3.kubenetを使う&lt;/h1&gt;

&lt;p&gt;これはGKEでKubernetesクラスタを構築した場合に利用されている方法です。&lt;br/&gt;
kubenetが使用されていることは、GKEのクラスタに接続して &lt;code&gt;ps ax | grep kubelet&lt;/code&gt;などとして&lt;code&gt;kubelet&lt;/code&gt;コマンドの引数を見ることで分かります。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ ps ax | &lt;span class=&quot;synStatement&quot;&gt;grep&lt;/span&gt; kubelet
 &lt;span class=&quot;synConstant&quot;&gt;3461&lt;/span&gt; ?        Sl   &lt;span class=&quot;synConstant&quot;&gt;1218&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt; /usr/&lt;span class=&quot;synStatement&quot;&gt;local&lt;/span&gt;/bin/kubelet
 &lt;span class=&quot;synSpecial&quot;&gt;--api-servers=https://xx.xxx.xxx.xxx&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--enable-debugging-handlers=true&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--cloud-provider=gce&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--pod-manifest-path=/etc/kubernetes/manifests&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--allow-privileged=True&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--v=2&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;--cluster-dns=10.11.240.10&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--cluster-domain=cluster.local&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--cgroup-root=/&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--system-cgroups=/system&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--network-plugin=kubenet&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# ←ここ&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--runtime-cgroups=/docker-daemon&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--kubelet-cgroups=/kubelet&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--node-labels=beta.kubernetes.io/fluentd-ds-ready=true,cloud.google.com/gkenodepool=default-pool&lt;/span&gt; 
 &lt;span class=&quot;synSpecial&quot;&gt;--babysit-daemons=true&lt;/span&gt; 
 &lt;span class=&quot;synSpecial&quot;&gt;--eviction-hard=memory.available&amp;lt;100Mi,nodefs.available&amp;lt;10%,nodefs.inodesFree&amp;lt;5%&lt;/span&gt; 
 &lt;span class=&quot;synSpecial&quot;&gt;--anonymous-auth=false&lt;/span&gt; 
 &lt;span class=&quot;synSpecial&quot;&gt;--authorization-mode=Webhook&lt;/span&gt; 
 &lt;span class=&quot;synSpecial&quot;&gt;--client-ca-file=/etc/kubernetes/pki/ca-certificates.crt&lt;/span&gt; 
 &lt;span class=&quot;synSpecial&quot;&gt;--feature-gates=ExperimentalCriticalPodAnnotation=true&lt;/span&gt; 
 &lt;span class=&quot;synSpecial&quot;&gt;--experimental-allocatable-ignore-eviction&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;--network-plugin=kubenet&lt;/code&gt;という引数が与えられていますね。&lt;br/&gt;
ちなみにCNIを使う場合は&lt;code&gt;--network-plugin=cni&lt;/code&gt;という指定でした。&lt;/p&gt;

&lt;p&gt;kubenetを使用する場合、cbr0という名前のブリッジが作成され、cbr0に接続されたpod用のvethペアも作成されます。&lt;br/&gt;
更に言うとkubenetを使用する場合、実はCNIプラグインが使用されているようです(恐らくブリッジへの接続などで)。&lt;br/&gt;
例えばGKEの場合、クラスタの&lt;code&gt;/opt/cni/bin&lt;/code&gt;配下を見てみると、以下のようなプラグインが配置されています。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;/opt/cni/bin$ ls -l
-rwxr-xr-x 1 root root 4026452 Mar 22 20:04 bridge
-rwxr-xr-x 1 root root 2901956 Mar 22 20:03 cnitool
-rwxr-xr-x 1 root root 9636499 Mar 22 20:04 dhcp
-rwxr-xr-x 1 root root 2910884 Mar 22 20:03 flannel
-rwxr-xr-x 1 root root 3102946 Mar 22 20:04 host-local
-rwxr-xr-x 1 root root 3609358 Mar 22 20:04 ipvlan
-rwxr-xr-x 1 root root 3170507 Mar 22 20:04 loopback
-rwxr-xr-x 1 root root 3640336 Mar 22 20:04 macvlan
-rwxr-xr-x 1 root root 2733314 Mar 22 20:04 noop
-rwxr-xr-x 1 root root 4000236 Mar 22 20:04 ptp
&lt;/pre&gt;


&lt;h4&gt;まとめ&lt;/h4&gt;

&lt;p&gt;これまでマルチホストでのContainer間通信を実現するための3つの方法を説明してきたわけですが、自前でやるにしろ、CNIプラグインやkubenetを利用するにせよ、Kubernetes本体の機能はほとんど使われていないことがわかったかと思います。&lt;/p&gt;

&lt;h2&gt;マルチホストでContainer間通信ができるだけでは解決しない問題&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/23/175813&quot;&gt;前回の記事&lt;/a&gt;で私は「Overlay Networkを構築するだけでは、Containerが起動するホストが動的に変わるようなケースには対応できません。」というようなことを書きました。これはどういうことを言っているのか説明しましょう。&lt;/p&gt;

&lt;p&gt;まず、KubernetesのようなオーケストレーションツールでContainerを起動する場合、基本的にはDeployするホストをユーザーが直接指定することはありません。Kubernetesがホストの状況(負荷とか空き容量とか)を見て、適切なホストにDeployしてくれるからです。そう、つまりContainerがどこにDeployされるかは予めわからないのです。&lt;br/&gt;
もちろんDeploy後であれば、DeployされたホストのIPを知ることができます。しかしContainer間で連携を行う場合、Deployされるまで連携するContainerのIPが分からないのは不便きわまりないです。この問題は、当然、&lt;u&gt;ホストをまたいでContainer同士が通信できても解決しません。&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;この問題を解決するには、&lt;u&gt;どのホストにContainerがDeployされてもContainerにアクセスする側が気にしなくていいような仕組みが別に必要&lt;/u&gt;になります。&lt;br/&gt;
Kubernetesでは&lt;code&gt;Service&lt;/code&gt;がそのための仕組みを提供しています。&lt;/p&gt;

&lt;h2&gt;Service&lt;/h2&gt;

&lt;p&gt;Kubernetesをお使いの方はご存知の通り、&lt;code&gt;Service&lt;/code&gt;はいわゆるロードバランサーで、名前をつけてPod(Kubernetesのリソースの一つでContainerを管理する)と紐付けておくことで、Service経由でPodとやりとりができるようになります。Podがスケールされて複数のホストに存在する場合は、ロードバランシングしてくれたりもします(Kubernetes Cluster上のPodからのみ名前解決できる)。&lt;/p&gt;

&lt;p&gt;もう少し具体的に説明しましょう。まず、Serviceを生成するとServiceには自動的にIPが割り当てられます。&lt;br/&gt;
そしてこのIP(とServiceで指定したPort)を介してServiceに紐づくPodとやりとりすることができます。そのため、どのホストにPodがDeployされているか気にする必要がなくなります。&lt;/p&gt;

&lt;p&gt;ちなみにこのIPは仮想的なIPで、紐づく物理的あるいは仮想的なNICはどこにも存在しません。&lt;br/&gt;
またこのIPはKubernetes Cluster上のPodからのみやりとりできます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170903/20170903221229.png&quot; alt=&quot;f:id:kenji-suzuki:20170903221229p:plain&quot; title=&quot;f:id:kenji-suzuki:20170903221229p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;しかし何故Podを直接名前解決できるようにせず、Serviceを挟んでいるのでしょうか。&lt;br/&gt;
Podのスケールアウトに対応するためでしょうか。でもこれはDNSラウンドロビンで対応できそうですね。&lt;br/&gt;
では、仮にPodを直接名前解決できたとしたらどうでしょう。そして、その名前解決の結果がキャッシュされ、キャッシュが有効なうちに何らかの理由でPodがフェールオーバーされて、これまでとは別のホストで起動されたらどうなるでしょうか。困ったことになりますね。このあたりのことは公式の&lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/#why-not-use-round-robin-dns&quot;&gt;ここ&lt;/a&gt;で言及されています。&lt;/p&gt;

&lt;p&gt;さて、ただただServiceの機能について説明するだけでは面白くないので、今回は最後にもう少し突っ込んだ話をしたいと思います。&lt;/p&gt;

&lt;h2&gt;Serviceの機能はどのように実現されているか&lt;/h2&gt;

&lt;p&gt;今回は機能を次の2つに絞って「誰」が「どのように」実現しているかを説明します。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;名前解決&lt;/li&gt;
&lt;li&gt;ルーティング&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;ルーティングというのは、ServiceのIP（とPort）にアクセスされたら対応するPodのIP（とPort）にフォワードするという意味で書きました。&lt;/p&gt;

&lt;h3&gt;担当者は誰だ？&lt;/h3&gt;

&lt;p&gt;まず、こちらをご覧ください。これはKubernetesのアーキテクチャ図で、これを見るとKubernetesが様々な登場人物（Component）から成るツールだということがわかります。「誰」がという表現をしたのはこのためです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170903/20170903184036.png&quot; alt=&quot;f:id:kenji-suzuki:20170903184036p:plain&quot; title=&quot;f:id:kenji-suzuki:20170903184036p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;今回の話でいうと、名前解決の部分を担当しているのが&lt;code&gt;kube-dns&lt;/code&gt;（上図にはいませんが）で、ルーティングの部分を担当しているのが&lt;code&gt;kube-proxy&lt;/code&gt;です。&lt;br/&gt;
では、「どのように」それを実現しているのでしょうか。&lt;/p&gt;

&lt;h3&gt;彼らは一体何をやっているのか？&lt;/h3&gt;

&lt;p&gt;彼らがやっていることを端的に表すと「ServiceやEndpointリソースを監視して、リソースの状況に合わせたアクションを起こす」ということをやっています（今回はEndpointリソースには言及しません）。&lt;/p&gt;

&lt;p&gt;もう少し具体的に説明しましょう。  &lt;br/&gt;
Kubernetesの&lt;code&gt;kube-apiserver&lt;/code&gt;は、自身が管理している各種リソース(ServiceやNode、Pod、Secretなど）について、問い合わせる口を持っています。&lt;br/&gt;
そして問い合わせを行った結果、以前の問い合わせの結果との差分から、リソースの「追加」「削除」「更新」といったリソースの変化を検知しイベント通知を行うためのライブラリが用意されています。このライブラリは汎用的に作られていて、「追加」「削除」「更新」のイベント通知を受けた際に処理を行うイベントハンドラを簡単に設定できるようになっています。&lt;/p&gt;

&lt;p&gt;kube-dnsやkube-proxyはサーバとして起動され、常駐しながら上記の仕組みを利用してServiceリソースを監視し、状況に応じた処理を行っています。&lt;/p&gt;

&lt;p&gt;実際のソースコードを見てみましょう。
次はkube-dnsのパッケージのコードです。&lt;br/&gt;
&lt;a href=&quot;https://github.com/kubernetes/dns/blob/35fcf7c9220f12e07d27bbca0b5de6687820ee7d/pkg/dns/dns.go&quot;&gt;dns.go&lt;/a&gt;&lt;/p&gt;

&lt;pre class=&quot;code lang-go&quot; data-lang=&quot;go&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; (kd *KubeDNS) setServicesStore() {
    &lt;span class=&quot;synComment&quot;&gt;// Returns a cache.ListWatch that gets all changes to services.&lt;/span&gt;
    kd.servicesStore, kd.serviceController = kcache.NewInformer(
        kcache.NewListWatchFromClient(
            kd.kubeClient.Core().RESTClient(),
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;services&amp;quot;&lt;/span&gt;,
            v1.NamespaceAll,
            fields.Everything()),
        &amp;amp;v1.Service{},
        resyncPeriod,
        kcache.ResourceEventHandlerFuncs{
            AddFunc:    kd.newService,
            DeleteFunc: kd.removeService,
            UpdateFunc: kd.updateService,
        },
    )
}

&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; (kd *KubeDNS) newService(obj &lt;span class=&quot;synStatement&quot;&gt;interface&lt;/span&gt;{}) {
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; service, ok := assertIsService(obj); ok {
        glog.V(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;).Infof(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;New service: %v&amp;quot;&lt;/span&gt;, service.Name)
        glog.V(&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;).Infof(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Service details: %v&amp;quot;&lt;/span&gt;, service)

        &lt;span class=&quot;synComment&quot;&gt;// ExternalName services are a special kind that return CNAME records&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; service.Spec.Type == v1.ServiceTypeExternalName {
            kd.newExternalNameService(service)
            &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt;
        }
        &lt;span class=&quot;synComment&quot;&gt;// if ClusterIP is not set, a DNS entry should not be created&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; !v1.IsServiceIPSet(service) {
            &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err := kd.newHeadlessService(service); err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
                glog.Errorf(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Could not create new headless service %v: %v&amp;quot;&lt;/span&gt;, service.Name, err)
            }
            &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt;
        }
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;len&lt;/span&gt;(service.Spec.Ports) == &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; {
            glog.Warningf(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Service with no ports, this should not have happened: %v&amp;quot;&lt;/span&gt;,
                service)
        }
        kd.newPortalService(service)
    }
}
&lt;/pre&gt;


&lt;p&gt;ServiceInformerというのが、Serviceリソースの状態を監視し、通知を行ってくれる構造体になります。&lt;br/&gt;
このInformerにハンドラを登録している部分が、AddFuncやUpdateFuncなどと書かれている部分です。&lt;/p&gt;

&lt;p&gt;続いてkube-proxyのパッケージのコードを見てみましょう。こちらも同じような感じで、Informerにハンドラが登録されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/config/config.go&quot;&gt;config.go&lt;/a&gt;&lt;/p&gt;

&lt;pre class=&quot;code lang-go&quot; data-lang=&quot;go&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; NewServiceConfig(serviceInformer coreinformers.ServiceInformer, resyncPeriod time.Duration) *ServiceConfig {
    serviceInformer.Informer().AddEventHandlerWithResyncPeriod(
        cache.ResourceEventHandlerFuncs{
            AddFunc:    result.handleAddService,
            UpdateFunc: result.handleUpdateService,
            DeleteFunc: result.handleDeleteService,
        },
        resyncPeriod,
    )
}

&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; (c *ServiceConfig) handleAddService(obj &lt;span class=&quot;synStatement&quot;&gt;interface&lt;/span&gt;{}) {
    service, ok := obj.(*api.Service)
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; !ok {
        utilruntime.HandleError(fmt.Errorf(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;unexpected object type: %v&amp;quot;&lt;/span&gt;, obj))
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt;
    }
    &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;synStatement&quot;&gt;range&lt;/span&gt; c.eventHandlers {
        glog.V(&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;).Infof(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Calling handler.OnServiceAdd&amp;quot;&lt;/span&gt;)
        c.eventHandlers[i].OnServiceAdd(service)
    }
}
&lt;/pre&gt;


&lt;h4&gt;kube-dnsのイベントハンドラは何をしているか&lt;/h4&gt;

&lt;p&gt;まずkube-dnsの&lt;a href=&quot;https://github.com/kubernetes/dns/blob/35fcf7c9220f12e07d27bbca0b5de6687820ee7d/cmd/kube-dns/app/server.go&quot;&gt;server&lt;/a&gt;の起動部分を見ると分かるのですが、&lt;a href=&quot;https://github.com/skynetservices/skydns&quot;&gt;SkyDNS&lt;/a&gt;というDNSサービスを起動しています。&lt;/p&gt;

&lt;pre class=&quot;code lang-go&quot; data-lang=&quot;go&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; (server *KubeDNSServer) Run() {
    pflag.VisitAll(&lt;span class=&quot;synType&quot;&gt;func&lt;/span&gt;(flag *pflag.Flag) {
        glog.V(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;).Infof(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;FLAG: --%s=%q&amp;quot;&lt;/span&gt;, flag.Name, flag.Value)
    })
    setupSignalHandlers()
    server.startSkyDNSServer() &lt;span class=&quot;synComment&quot;&gt;// ここ&lt;/span&gt;
    server.kd.Start()
    server.setupHandlers()

    glog.V(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;).Infof(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Status HTTP port %v&amp;quot;&lt;/span&gt;, server.healthzPort)
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; server.nameServers != &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; {
        glog.V(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;).Infof(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Upstream nameservers: %s&amp;quot;&lt;/span&gt;, server.nameServers)
    }
    glog.Fatal(http.ListenAndServe(fmt.Sprintf(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;:%d&amp;quot;&lt;/span&gt;, server.healthzPort), &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt;))
}
&lt;/pre&gt;


&lt;p&gt;SkyDNSのサーバーには、問い合わせを受けたときに呼び出される「DNSレコードを返す処理」を渡せるようになっており、その部分のみkube-dnsが実装しています。&lt;br/&gt;
そしてそのレコードの登録処理が、Serviceの変更の通知を受け取ったときに呼び出される処理なのです。&lt;br/&gt;
これによりKubernetes Cluster内で名前解決が可能になります。&lt;/p&gt;

&lt;h4&gt;kube-proxyのイベントハンドラは何をしているか&lt;/h4&gt;

&lt;p&gt;まず先に言ってしまうと、ServiceからPodへのルーティングは、iptablesによって行われています。&lt;br/&gt;
iptablesの内容を表示させてみると次のようになっています（説明に必要なものだけ抜粋しています）。これはkubernetes-dashboardのルーティングなのですが、Serviceの 10.110.169.150:80 が Pod の 10.42.0.0:9090 にフォワードされていることが分かると思います。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;-A KUBE-SEP-4 -s 10.42.0.0/32     -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34;        -j KUBE-MARK-MASQ
-A KUBE-SEP-4 -p tcp              -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -m tcp -j DNAT --to-destination 10.42.0.0:9090

-A KUBE-SERVICES -d 10.110.169.150/32 -p tcp -m comment --comment &amp;#34;kube-system/kubernetes-dashboard: cluster IP&amp;#34; -m tcp --dport 80 -j KUBE-SVC-DASH

-A KUBE-SVC-DASH    -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -j KUBE-SEP-4&lt;/pre&gt;


&lt;p&gt;ちなみにこのdashboardをスケールアウトさせてみると&lt;br/&gt;
&lt;code&gt;$ kubectl scale deploy kubernetes-dashboard -n kube-system --replicas=3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;このようになります。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;-A KUBE-SEP-3 -s 10.44.0.1/32 -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -j KUBE-MARK-MASQ
-A KUBE-SEP-3 -p tcp -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -m tcp -j DNAT --to-destination 10.44.0.1:9090
-A KUBE-SEP-1 -s 10.42.0.0/32 -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -j KUBE-MARK-MASQ
-A KUBE-SEP-1 -p tcp -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -m tcp -j DNAT --to-destination 10.42.0.0:9090
-A KUBE-SEP-2 -s 10.42.0.1/32 -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -j KUBE-MARK-MASQ
-A KUBE-SEP-2 -p tcp -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -m tcp -j DNAT --to-destination 10.42.0.1:9090

# -m statisitc でランダムに宛先を変えている
# 1/3の確率で KUBE-SEP-1
-A KUBE-SVC-XGLOHA7QRQ3V22RZ -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -m statistic --mode random --probability 0.33332999982 -j KUBE-SEP-1
# 1/2の確率で KUBE-SEP-2
-A KUBE-SVC-XGLOHA7QRQ3V22RZ -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -m statistic --mode random --probability 0.50000000000 -j KUBE-SEP-2
# 残りは KUBE-SEP-3
-A KUBE-SVC-XGLOHA7QRQ3V22RZ -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -j KUBE-SEP-3&lt;/pre&gt;


&lt;p&gt;もう分かったかと思いますが、kube-proxyのイベントハンドラがやっているのは、このiptablesの動的な更新です。
これは上記のkube-proxyのコードを追っていくと分かります(興味がありましたら&lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/iptables/proxier.go&quot;&gt;proxier.go&lt;/a&gt;のsyncProxyRulesのあたりをご覧ください)。&lt;/p&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;kube-dnsとkube-proxyがServiceを監視しており、Serviceが作成されたとき、kube-dnsによりDNSレコードが登録され名前解決が可能になり、そしてkube-proxyによりiptablesを使ったルーティングが設定されることが分かったかと思います。&lt;/p&gt;

&lt;p&gt;図にするとこのような流れになるでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170906/20170906013723.png&quot; alt=&quot;f:id:kenji-suzuki:20170906013723p:plain&quot; title=&quot;f:id:kenji-suzuki:20170906013723p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br/&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170906/20170906015645.png&quot; alt=&quot;f:id:kenji-suzuki:20170906015645p:plain&quot; title=&quot;f:id:kenji-suzuki:20170906015645p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br/&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170906/20170906013926.png&quot; alt=&quot;f:id:kenji-suzuki:20170906013926p:plain&quot; title=&quot;f:id:kenji-suzuki:20170906013926p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br/&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170906/20170906014014.png&quot; alt=&quot;f:id:kenji-suzuki:20170906014014p:plain&quot; title=&quot;f:id:kenji-suzuki:20170906014014p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br/&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170906/20170906014153.png&quot; alt=&quot;f:id:kenji-suzuki:20170906014153p:plain&quot; title=&quot;f:id:kenji-suzuki:20170906014153p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;さて、大分長くなりましたがKubernetesのネットワーク話はいかがだったでしょうか。&lt;br/&gt;
様々な仕組みは用意しつつ、巧みに自前での実装を回避しているという印象を私は受けました。&lt;br/&gt;
Kubernetesは調べていくと感心させられることが多いですね。&lt;/p&gt;

&lt;h4&gt;シリーズ&lt;/h4&gt;

&lt;p&gt;第1回: &lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/07/172411&quot;&gt;マルチホストでのDocker Container間通信 第1回: Dockerネットワークの基礎&lt;/a&gt;&lt;br/&gt;
第2回: &lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/23/175813&quot;&gt;マルチホストでのDocker Container間通信 第2回: Port Forwarding と Overlay Network&lt;/a&gt;&lt;br/&gt;
第3回: マルチホストでのDocker Container間通信 第3回: Kubernetesのネットワーク(CNI, kube-proxy, kube-dns) (当記事)&lt;/p&gt;
</description>          <pubDate>Tue, 12 Sep 2017 16:47:56 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812287412050</guid>
          
            <category>Container技術</category>
          
            <category>kubernetes</category>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170903/20170903221229.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>マルチホストでのDocker Container間通信 第2回 Port Forwarding と Overlay Network</title>
          <link>http://tech.uzabase.com/entry/2017/08/23/175813</link>          <description>&lt;p&gt;こんにちは。SPEEDA開発チームの鈴木です。&lt;br/&gt;
&lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/07/172411&quot;&gt;前回&lt;/a&gt;はマルチホストでのDocker Container間通信の説明の前段として、Dockerのネットワークが次のようになっているという話をしました。
　&lt;br/&gt;
　&lt;br/&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170710/20170710131809.png&quot; alt=&quot;f:id:kenji-suzuki:20170710131809p:plain&quot; title=&quot;f:id:kenji-suzuki:20170710131809p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;今回はいよいよ、マルチホストでどうやってDocker Container同士の通信を実現するのかを説明していきます。&lt;/p&gt;

&lt;h1&gt;はじめに&lt;/h1&gt;

&lt;p&gt;マルチホスト間でのDocker Container通信とは、次のようにホストをまたいでDocker Container同士が通信することを指します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170707/20170707164743.png&quot; alt=&quot;f:id:kenji-suzuki:20170707164743p:plain&quot; title=&quot;f:id:kenji-suzuki:20170707164743p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;図で見ると大分単純ですし、前提条件次第では実際簡単に実現できるのですが、Containerのオーケストレーションを前提におくと色々な仕組みが必要なことがわかってきます。&lt;/p&gt;

&lt;h2&gt;DockerによるContainerのマルチホスト間通信&lt;/h2&gt;

&lt;p&gt;例としてA,B,C,Dという4つのDocker Containerを、複数のホストに配置するとこのようになります（Host XとYは同じネットワークに属することとします）。&lt;br/&gt;
※以降の説明には不要なため、vethの記載は省略します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170714/20170714142929.png&quot; alt=&quot;f:id:kenji-suzuki:20170714142929p:plain&quot; title=&quot;f:id:kenji-suzuki:20170714142929p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;これをネットワーク的な視点で見ると、次のような感じです。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170714/20170714184336.png&quot; alt=&quot;f:id:kenji-suzuki:20170714184336p:plain&quot; title=&quot;f:id:kenji-suzuki:20170714184336p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Container AとContainer Bは当然通信できます。&lt;br/&gt;
また、Container AからHost Yまでも問題なく通信できます。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170714/20170714184907.png&quot; alt=&quot;f:id:kenji-suzuki:20170714184907p:plain&quot; title=&quot;f:id:kenji-suzuki:20170714184907p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;しかし、Container Cとは通信できません。なぜならContainer AとContainer Cは異なるPrivate Network上に存在するからです。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170714/20170714185209.png&quot; alt=&quot;f:id:kenji-suzuki:20170714185209p:plain&quot; title=&quot;f:id:kenji-suzuki:20170714185209p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;この問題を解決して、異なるホストのContainerと通信できるようにする方法はいくつかあります。&lt;br/&gt;
その1つがDockerのPort Forwarding機能です。&lt;/p&gt;

&lt;h3&gt;Port Forwarding&lt;/h3&gt;

&lt;p&gt;Port Forwarding機能を使うとContainerの外部からContainerにアクセスできるようになります。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Host Yの8080番ポートにアクセスしたら、Container Cの80番ポートにForwardする&lt;/span&gt;
host-y: $ docker run &lt;span class=&quot;synSpecial&quot;&gt;--name&lt;/span&gt; container-c &lt;span class=&quot;synSpecial&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;8080&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;80&lt;/span&gt; nginx
&lt;/pre&gt;


&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170714/20170714190341.png&quot; alt=&quot;f:id:kenji-suzuki:20170714190341p:plain&quot; title=&quot;f:id:kenji-suzuki:20170714190341p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;iptablesの設定内容を見ると、&lt;code&gt;docker run&lt;/code&gt;で指定したようにPort Forwardingが行われる設定がされていることがわかります。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;host-y:/$ sudo iptables-save 
*nat
&lt;span class=&quot;synComment&quot;&gt;# 略&lt;/span&gt;
-A DOCKER ! &lt;span class=&quot;synSpecial&quot;&gt;-i&lt;/span&gt; docker0 &lt;span class=&quot;synSpecial&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;synSpecial&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;synSpecial&quot;&gt;--dport&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;8080&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-j&lt;/span&gt; DNAT &lt;span class=&quot;synSpecial&quot;&gt;--to-destination&lt;/span&gt; 172.17.0.2:&lt;span class=&quot;synConstant&quot;&gt;80&lt;/span&gt;
COMMIT
&lt;span class=&quot;synComment&quot;&gt;# 略&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;この通信方法は&lt;strong&gt;「接続元のContainerが接続先のContainerのホストのIPを知っている」&lt;/strong&gt;という条件のもとに成り立っています。つまりContainerが起動するホストが動的に変わるようなケースには対応できません。&lt;br/&gt;
逆に言えばホストが固定されていて、今後も変わらないならばこれで十分です。&lt;/p&gt;

&lt;h3&gt;Overlay Network&lt;/h3&gt;

&lt;p&gt;Overlay Networkとは、あるNetworkの上に別のNetworkを構築する技術です。&lt;br/&gt;
異なるホストのContainer同士が通信できない原因はContainerが異なるネットワークに属していることにありました。&lt;br/&gt;
「じゃあOverlay Network構築して同じネットワークに属するようにしてしまえばいいじゃん」というのがこの方法です。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170714/20170714200720.png&quot; alt=&quot;f:id:kenji-suzuki:20170714200720p:plain&quot; title=&quot;f:id:kenji-suzuki:20170714200720p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Overlay Networkを使用する場合、Containerは同じネットワークに属していることになるので、異なるホストのContainerと直接通信することができるようになります。&lt;br/&gt;
続いてOverlay Networkの構築方法をいくつかご紹介します。&lt;/p&gt;

&lt;h4&gt;1. &lt;a href=&quot;https://docs.docker.com/engine/swarm/&quot;&gt;Docker Swarm mode&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dockerのオーケストレーション機能であるSwarm modeでContainerのマルチホスト間通信を実現している方法が、まさにこのOverlay Networkを利用する方法です。&lt;br/&gt;
Swarm modeでクラスタを構築した後、Docker用のネットワーク一覧を表示する&lt;code&gt;docker network ls&lt;/code&gt;コマンドを実行してみると、Overlay Networkが構築されていることがわかります。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
d95e8109f33a        bridge              bridge              local
e5430ed50f3d        docker_gwbridge     bridge              local
6f6c8c7f698d        host                host                local
1q38yeph9dnj        ingress             overlay             swarm
2bae9ccfec69        none                null                local&lt;/pre&gt;


&lt;p&gt;以前のSwarmではService Discoveryとしてconsul, etcd, zookeeperなどの分散KVSが必要でしたが、Swamr modeの登場以降は不要になっています（Dockerに組み込まれたようです）。&lt;/p&gt;

&lt;h4&gt;2. 分散KVSと&lt;code&gt;docker network create -d overlay&lt;/code&gt;コマンドを使って自前で構築&lt;/h4&gt;

&lt;p&gt;Swarm modeがやってくれているようなことを自前でやります。いまはSwarm modeがあるので、この方法が使われることはあまりないでしょう。&lt;/p&gt;

&lt;h4&gt;3. &lt;a href=&quot;https://github.com/coreos/flannel&quot;&gt;flannel&lt;/a&gt;のようなOverlay Network構築ツールを使う&lt;/h4&gt;

&lt;p&gt;flannelは公式ページの冒頭に「Flannel is a simple and easy to configure layer 3 network fabric designed for Kubernetes.」とあるように、元々Kubernetes向けに作られたものです。&lt;br/&gt;
flannelを使用する場合、次のイメージのように各ホストにflanneldとetcdをインストールします。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170717/20170717220751.png&quot; alt=&quot;f:id:kenji-suzuki:20170717220751p:plain&quot; title=&quot;f:id:kenji-suzuki:20170717220751p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;flannelの主な役割は2つです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;etcdを使ってNetwork情報を共有することで、docker0に重複しないSubNetを割り当てる。&lt;br/&gt;
(割り当て済みのSubNetのアドレス帯を共有しているので重複を避けられる）&lt;/li&gt;
&lt;li&gt;各ホストに仮想NIC&lt;code&gt;flannel0&lt;/code&gt;を作成。Container間でpacketを送受信する際、docker0と接続されたflannel0がVXLANでpacketのカプセル化・非カプセル化を行う。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;VXLANでカプセル化されたpacketは次のような構造をしています。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170718/20170718012341.png&quot; alt=&quot;f:id:kenji-suzuki:20170718012341p:plain&quot; title=&quot;f:id:kenji-suzuki:20170718012341p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;元のpacket(Inner MAC Address 〜 payloadまで)の送信先IPはContainer CのIPですが、Container Cは仮想的には同じNetworkに属しているものの物理的には別のNetworkに属しておりルーティングできないので、上記図でルータ的役割を果たしているHost Yのeth0を宛先とする別のHeader(Outer MAC Address 〜 VXLAN Headerまで)を付加しています。このようにあるプロトコルを別のプロトコルで包むことをカプセル化といいます。&lt;/p&gt;

&lt;p&gt;packetを受信した側は、付加されたHeaderの情報（VXLAN Headerの情報など）から受信したpacketがVXLANのpacketであることが判別できるので、包んでいるプロトコルを剥がして本来送信したかった宛先に送ることができます。
例えばHost XのContainer AからHost YのContainer Cにpacketを送信すると次のようにpacketが送信されていきます。NICの右側が、そのNICのpacketをキャプチャしたものです（簡略化しています）。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170726/20170726032055.png&quot; alt=&quot;f:id:kenji-suzuki:20170726032055p:plain&quot; title=&quot;f:id:kenji-suzuki:20170726032055p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170726/20170726032225.png&quot; alt=&quot;f:id:kenji-suzuki:20170726032225p:plain&quot; title=&quot;f:id:kenji-suzuki:20170726032225p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;Overlay Networkだけで解決できないこと&lt;/h4&gt;

&lt;p&gt;Port Forwardingと同様に、Containerが起動するホストが動的に変わるようなケースには対応できません。&lt;br/&gt;
同じネットワークに属してはいますが、同じホストに存在するわけではないので、dockerのlink機能やdocker-composeを使っての名前解決ができないからです。&lt;br/&gt;
Docker swarmやKubernetesなどはこの問題を解決するための仕組みをもっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2017/09/12/164756&quot;&gt;次回&lt;/a&gt;は、KubernetesにおけるContainerのマルチホスト間通信と合わせてこのあたりのことを書きたいと思います。&lt;/p&gt;

&lt;h4&gt;シリーズ&lt;/h4&gt;

&lt;p&gt;第1回: &lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/07/172411&quot;&gt;マルチホストでのDocker Container間通信 第1回: Dockerネットワークの基礎&lt;/a&gt;&lt;br/&gt;
第2回: マルチホストでのDocker Container間通信 第2回: Port Forwarding と Overlay Network (当記事)&lt;br/&gt;
第3回: &lt;a href=&quot;http://tech.uzabase.com/entry/2017/09/12/164756&quot;&gt;マルチホストでのDocker Container間通信 第3回: Kubernetesのネットワーク(CNI, kube-proxy, kube-dns)&lt;/a&gt;&lt;/p&gt;
</description>          <pubDate>Wed, 23 Aug 2017 17:58:13 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812279548363</guid>
          
            <category>Container技術</category>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170710/20170710131809.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>マルチホストでのDocker Container間通信 第1回: Dockerネットワークの基礎</title>
          <link>http://tech.uzabase.com/entry/2017/08/07/172411</link>          <description>&lt;p&gt;こんにちは。SPEEDA開発チームの鈴木です。&lt;br/&gt;
調べてみるとなかなか興味深い技術であるマルチホストでのDocker Conainer間通信。&lt;br/&gt;
これをどのように実現しているのか説明したいと思います。
が、その前に今回の投稿では、まず基礎知識的な話としてDockerのネットワークについて順を追って説明をします。&lt;/p&gt;

&lt;h1&gt;Dockerのネットワーク&lt;/h1&gt;

&lt;h2&gt;docker0&lt;/h2&gt;

&lt;p&gt;Dockerをインストールしたあと、&lt;code&gt;ifconfig&lt;/code&gt;や&lt;code&gt;ip addr show&lt;/code&gt;すると&lt;code&gt;docker0&lt;/code&gt;なるものが表示されるようになるので、気になっていた人もいるかと思います。&lt;br/&gt;
これは一体何者なのでしょうか。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ ifconfig
docker0: flags=4099&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 0.0.0.0
        ether 02:42:fb:28:ee:2d  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

&lt;/pre&gt;


&lt;p&gt;　&lt;br/&gt;
この&lt;code&gt;docker0&lt;/code&gt;はDockerによって自動的に作成された仮想ブリッジで、Docker Container同士をつなぐためのものです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170707/20170707184308.png&quot; alt=&quot;f:id:kenji-suzuki:20170707184308p:plain&quot; title=&quot;f:id:kenji-suzuki:20170707184308p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;docker0に接続されているネットワーク・インタフェース&lt;/h2&gt;

&lt;p&gt;何かしらDocker Containerを起動した状態で、ブリッジを管理する&lt;code&gt;brctl&lt;/code&gt;コマンドを実行してみると次のように&lt;code&gt;docker0&lt;/code&gt;に接続されているネットワーク・インタフェースが表示されます。
(&lt;code&gt;brctl&lt;/code&gt;は&lt;code&gt;bridge-utils&lt;/code&gt;パッケージに含まれています）&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ brctl show
bridge name     bridge id               STP enabled     interfaces
docker0         8000.0242fb28ee2d       no              veth269de4e
                                                        veth87e3222
                                                        vethbcff718&lt;/pre&gt;


&lt;p&gt;そしてこれがインタフェースを&lt;code&gt;grep veth&lt;/code&gt;してみた結果です。たしかにこのネットワーク・インタフェースは存在するようですね。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ ip addr show | grep veth
9: vethbcff718@if8: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master docker0 state UP group default 
11: veth269de4e@if10: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master docker0 state UP group default 
15: veth87e3222@if14: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master docker0 state UP group default &lt;/pre&gt;


&lt;p&gt;　&lt;br/&gt;
ちなみにDocker Containerをすべて落としてみるとこうなります。&lt;code&gt;docker0&lt;/code&gt;には何も接続されていないようですね。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ brctl show
bridge name bridge id       STP enabled interfaces
docker0     8000.0242fb28ee2d   no  &lt;/pre&gt;


&lt;p&gt;さきほど存在したネットワーク・インタフェースもいなくなっています。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ ifconfig | grep veth
[kenji@arch ~]$ 
&lt;/pre&gt;


&lt;p&gt;　&lt;br/&gt;
なるほど。じゃあこのvethXXXがDocker Containerのネットワーク・インタフェースなのか、というとちょっと違うのですが、正確なところを説明する前にそもそもvethって何なのかを説明します。&lt;/p&gt;

&lt;h2&gt;veth&lt;/h2&gt;

&lt;p&gt;vethは &lt;strong&gt;v&lt;/strong&gt;irtual&lt;strong&gt;eth&lt;/strong&gt;ernet device、つまり仮想的なネットワーク・インタフェースです。&lt;br/&gt;
vethは常にペアで作成され、このペア間で通信が行えます。&lt;br/&gt;
(vethペアの片割れをveth peerといいます)&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170707/20170707192057.png&quot; alt=&quot;f:id:kenji-suzuki:20170707192057p:plain&quot; title=&quot;f:id:kenji-suzuki:20170707192057p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　&lt;br/&gt;
vethペアは次のようなコマンドで作成できます。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ sudo ip link add name veth1 type veth peer name veth1-peer&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;ip link show&lt;/code&gt;で確認してみると、vethのペアが作成されていることが分かります。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ ip link show | grep veth
18: veth1-peer@veth1: &amp;lt;BROADCAST,MULTICAST,M-DOWN&amp;gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
19: veth1@veth1-peer: &amp;lt;BROADCAST,MULTICAST,M-DOWN&amp;gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000&lt;/pre&gt;


&lt;p&gt;　&lt;br/&gt;
さて、ここで一つの疑問が生じます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「Docker Containerを起動したときに作成されるvethって一つじゃね？」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Containerの起動後にネットワーク・インタフェースを表示してみると、たしかにそう見えます。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ docker ps --format &amp;#34;table {{.ID}} {{.Names}}&amp;#34;
CONTAINER ID NAMES
b71e096208c2 kong
7add408c9775 kong-database

# Containerが2つなので4つvethが表示されるはず？
[kenji@arch ~]$ ip link show | grep veth
17: vethb96b887@if16: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default 
21: veth9c7e462@if20: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default &lt;/pre&gt;


&lt;p&gt;　&lt;br/&gt;
この疑問に答えるキーワードが&lt;strong&gt;ネットワーク名前空間&lt;/strong&gt;です。&lt;/p&gt;

&lt;h2&gt;ネットワーク名前空間&lt;/h2&gt;

&lt;p&gt;Dockerのことを勉強すると必ずといっていいほど説明されていますが、Linuxはカーネルが扱う様々なリソースをある単位でまとめて分離する仕組みを持っています。
この仕組みを&lt;a href=&quot;https://linuxjm.osdn.jp/html/LDP_man-pages/man7/namespaces.7.html&quot;&gt;名前空間&lt;/a&gt;といいます。
分離されたリソースはその名前空間に属するプロセス以外からは直接見えなくなります。&lt;/p&gt;

&lt;p&gt;例えばunshareコマンドでUTS名前空間を新たに作成した場合、その名前空間を作成した側と別のホスト名を持つことができます。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 1. 名前空間のエントリを表示&lt;/span&gt;
kenji@test1:~$ sudo &lt;span class=&quot;synStatement&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-l&lt;/span&gt; /proc/*/ns | &lt;span class=&quot;synStatement&quot;&gt;grep&lt;/span&gt; uts | awk &lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;{print $11}&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt; | &lt;span class=&quot;synStatement&quot;&gt;sort&lt;/span&gt; | uniq
uts:&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4026531838&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 2. UTS名前空間を新たに作成し、その名前空間でbashを実行&lt;/span&gt;
kenji@test1:~$ sudo unshare &lt;span class=&quot;synSpecial&quot;&gt;-u&lt;/span&gt; /bin/bash
root@test1:~# 

&lt;span class=&quot;synComment&quot;&gt;# 1,2 とは別のシェルで名前空間のエントリを表示すると一つ増えてることが分かる&lt;/span&gt;
kenji@test1:~$ sudo &lt;span class=&quot;synStatement&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-l&lt;/span&gt; /proc/*/ns | &lt;span class=&quot;synStatement&quot;&gt;grep&lt;/span&gt; uts | awk &lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;{print $11}&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt; | &lt;span class=&quot;synStatement&quot;&gt;sort&lt;/span&gt; | uniq
uts:&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4026531838&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;
uts:&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4026532203&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 1,2 のシェルでホスト名を変更&lt;/span&gt;
root@test1:~# hostname updated-host
root@test1:~# hostname
updated-host

&lt;span class=&quot;synComment&quot;&gt;# 1,2 とは別のシェルでホスト名を表示すると、こちらには上記の変更が反映されないことが分かる&lt;/span&gt;
kenji@test1:~$ hostname
test1
&lt;/pre&gt;


&lt;p&gt;　&lt;/p&gt;

&lt;p&gt;この名前空間には色々種類があるのですが、ネットワークに対する名前空間が&lt;strong&gt;ネットワーク名前空間&lt;/strong&gt;です。&lt;br/&gt;
そして前述のvethペアの片割れは、作成したネットワーク名前空間に移動させることができるのです。&lt;br/&gt;
つまりvethペアによってネットワーク名前空間同士を仮想的なケーブルでつなぐことができます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170709/20170709234136.png&quot; alt=&quot;f:id:kenji-suzuki:20170709234136p:plain&quot; title=&quot;f:id:kenji-suzuki:20170709234136p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;移動させたvethは移動元からは見えなくなります。これがDocker Containerのvethの片割れが見えなかった理由です。&lt;br/&gt;
ここまでを踏まえるとDockerのネットワークが次のようになっていることが理解できるでしょう。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170710/20170710000413.png&quot; alt=&quot;f:id:kenji-suzuki:20170710000413p:plain&quot; title=&quot;f:id:kenji-suzuki:20170710000413p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;更に付け加えると、veth(peer)はDocker Container内ではeth0として見えるようになっています。
またDockerによりveth(peer)にIPアドレスが割り当てられます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170710/20170710132020.png&quot; alt=&quot;f:id:kenji-suzuki:20170710132020p:plain&quot; title=&quot;f:id:kenji-suzuki:20170710132020p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Docker Containerのネットワーク名前空間を参照する&lt;/h2&gt;

&lt;p&gt;ネットワーク名前空間の一覧は&lt;code&gt;ip netns&lt;/code&gt;コマンドで参照でき、&lt;code&gt;ip netns exec ネットワーク名前空間名&lt;/code&gt;コマンドを使うと指定したネットワーク名前空間で任意のコマンドが実行できるのですが、Docker Containerのネットワーク名前空間はDockerにより隠蔽されています。&lt;br/&gt;
しかし以下2つの情報を知っていれば、強引に参照することができます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Docker Containerのネットワーク名前空間は&lt;code&gt;/proc/Docker ContainerのPID/ns/net&lt;/code&gt;に割り当てられる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip netns&lt;/code&gt;コマンドで表示されるネットワーク名前空間は、&lt;code&gt;/var/run/netns&lt;/code&gt;ディレクトリ配下のものである。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;どういうことかというと、Docker ContainerのPIDを調べてネットワーク名前空間を見つけて、/var/run/netnsへのリンクを貼るのです。&lt;br/&gt;
試してみたいけど面倒くさいという方のためにシェルを用意してあります(&lt;a href=&quot;https://github.com/pujoheadsoft/docker-netns&quot;&gt;github&lt;/a&gt;)。&lt;br/&gt;
プログラムの性質上、実行にroot権限が必要になるので、気になるようでしたら内容をご確認ください。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;git clone https://github.com/pujoheadsoft/docker-netns.git
&lt;span class=&quot;synStatement&quot;&gt;cd&lt;/span&gt; docker-netns
&lt;span class=&quot;synStatement&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;+x&lt;/span&gt; docker-netns.sh 

&lt;span class=&quot;synComment&quot;&gt;# 実行例&lt;/span&gt;
~/docker-netns$ sudo ./docker-netns.sh visible
container&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;s network namespace to visible, you can show container&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;s nemespace by &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;ip netns&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; command.
kenji@master:~/docker-netns$ ip netns
bfe34b8a7972
2ec174520fda

&lt;span class=&quot;synComment&quot;&gt;# vethとvethに対応するContainerを表示&lt;/span&gt;
kenji@test1:~/docker-netns$ sudo ./docker-netns.sh showveth
VETH                 CONTAINER ID         NAMES                         
veth2753b2f          51f82f5e9712         /mywordpress_wordpress_1      
vetha334043          4939c68f1740         /mywordpress_db_1  

&lt;span class=&quot;synComment&quot;&gt;# ContainerのIPを表示(リソースはcontainer側のものですが、コマンドはホスト側のものを使えるので、IPを表示するコマンドがないContainerでもIPを表示できます)&lt;/span&gt;
kenji@test1:~/docker-netns$ sudo ./docker-netns.sh showip
CONTAINER ID    IP                                       NAMES
51f82f5e9712    inet 172.18.0.3/&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt; scope global eth0     /mywordpress_wordpress_1
4939c68f1740    inet 172.18.0.2/&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt; scope global eth0     /mywordpress_db_1
&lt;/pre&gt;


&lt;h3&gt;ルーティング&lt;/h3&gt;

&lt;p&gt;Dockerにより、Docker Containerから外部のネットワークに接続できるようIPマスカレードが行われるようなルーティングになっています。&lt;br/&gt;
これはIPテーブルを参照してみると分かります。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;kenji@arch ~&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;$ ip addr show | &lt;span class=&quot;synStatement&quot;&gt;grep&lt;/span&gt; docker
&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;: docker0: &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;NO-CARRIER,BROADCAST,MULTICAST,UP&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; mtu &lt;span class=&quot;synConstant&quot;&gt;1500&lt;/span&gt; qdisc noqueue state DOWN group default 
    inet 172.17.0.1/&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt; scope global docker0

&lt;span class=&quot;synComment&quot;&gt;# iptablesの情報を参照&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;kenji@arch ~&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;$ sudo iptables-save 
&lt;span class=&quot;synComment&quot;&gt;# Generated by iptables-save v1.6.1 on Mon Jul 10 01:15:10 2017&lt;/span&gt;
*nat
&lt;span class=&quot;synComment&quot;&gt;# --中略--&lt;/span&gt;
-A PREROUTING &lt;span class=&quot;synSpecial&quot;&gt;-m&lt;/span&gt; addrtype &lt;span class=&quot;synSpecial&quot;&gt;--dst-type&lt;/span&gt; LOCAL &lt;span class=&quot;synSpecial&quot;&gt;-j&lt;/span&gt; DOCKER
-A OUTPUT ! &lt;span class=&quot;synSpecial&quot;&gt;-d&lt;/span&gt; 127.0.0.0/&lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-m&lt;/span&gt; addrtype &lt;span class=&quot;synSpecial&quot;&gt;--dst-type&lt;/span&gt; LOCAL &lt;span class=&quot;synSpecial&quot;&gt;-j&lt;/span&gt; DOCKER

&lt;span class=&quot;synComment&quot;&gt;# これがIPマスカレードの部分。Dockerのネットワーク(172.17.0.0/16)かつ、&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# docker0以外のインタフェースからパケットが出力された場合IPマスカレードする&lt;/span&gt;
-A POSTROUTING &lt;span class=&quot;synSpecial&quot;&gt;-s&lt;/span&gt; 172.17.0.0/&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt; ! &lt;span class=&quot;synSpecial&quot;&gt;-o&lt;/span&gt; docker0 &lt;span class=&quot;synSpecial&quot;&gt;-j&lt;/span&gt; MASQUERADE
-A DOCKER &lt;span class=&quot;synSpecial&quot;&gt;-i&lt;/span&gt; docker0 &lt;span class=&quot;synSpecial&quot;&gt;-j&lt;/span&gt; RETURN

COMMIT
&lt;span class=&quot;synComment&quot;&gt;# --中略--&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;これまでの図に加えると、このような感じになりますね。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170710/20170710131809.png&quot; alt=&quot;f:id:kenji-suzuki:20170710131809p:plain&quot; title=&quot;f:id:kenji-suzuki:20170710131809p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;以上がDockerのネットワークの説明になります。&lt;br/&gt;
Docker Composeを使った場合、bridgeやルーティングはまたこれとは少し違ったものになるのですが、そこは割愛します。&lt;br/&gt;
&lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/23/175813&quot;&gt;次回&lt;/a&gt;は、いよいよマルチホストでのDocker Container間通信の話をします。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;株式会社ユーザベースでは、DockerやDocker関連技術に興味のあるエンジニアを&lt;a href=&quot;https://www.uzabase.com/recruit/occupation/&quot;&gt;大募集中&lt;/a&gt;です！&lt;/p&gt;

&lt;h4&gt;シリーズ&lt;/h4&gt;

&lt;p&gt;第1回: マルチホストでのDocker Container間通信 第1回: Dockerネットワークの基礎 (当記事)&lt;br/&gt;
第2回: &lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/23/175813&quot;&gt;マルチホストでのDocker Container間通信 第2回: Port Forwarding と Overlay Network&lt;/a&gt;&lt;br/&gt;
第3回: &lt;a href=&quot;http://tech.uzabase.com/entry/2017/09/12/164756&quot;&gt;マルチホストでのDocker Container間通信 第3回: Kubernetesのネットワーク(CNI, kube-proxy, kube-dns)&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;iframe frameborder=&#39;0&#39; height=&#39;305px&#39; name=&#39;wantedly_project_widget_114494&#39; scrolling=&#39;no&#39; src=&#39;https://www.wantedly.com/projects/114494/widget&#39; style=&#39;border: none; max-width: 100%; min-width: 240px; width: 540px;&#39;&gt;&lt;/iframe&gt;


&lt;iframe frameborder=&#39;0&#39; height=&#39;305px&#39; name=&#39;wantedly_project_widget_91396&#39; scrolling=&#39;no&#39; src=&#39;https://www.wantedly.com/projects/91396/widget&#39; style=&#39;border: none; max-width: 100%; min-width: 240px; width: 540px;&#39;&gt;&lt;/iframe&gt;


&lt;iframe frameborder=&#39;0&#39; height=&#39;305px&#39; name=&#39;wantedly_project_widget_59258&#39; scrolling=&#39;no&#39; src=&#39;https://www.wantedly.com/projects/59258/widget&#39; style=&#39;border: none; max-width: 100%; min-width: 240px; width: 540px;&#39;&gt;&lt;/iframe&gt;


&lt;iframe frameborder=&#39;0&#39; height=&#39;305px&#39; name=&#39;wantedly_project_widget_48032&#39; scrolling=&#39;no&#39; src=&#39;https://www.wantedly.com/projects/48032/widget&#39; style=&#39;border: none; max-width: 100%; min-width: 240px; width: 540px;&#39;&gt;&lt;/iframe&gt;


&lt;iframe frameborder=&#39;0&#39; height=&#39;305px&#39; name=&#39;wantedly_project_widget_45821&#39; scrolling=&#39;no&#39; src=&#39;https://www.wantedly.com/projects/45821/widget&#39; style=&#39;border: none; max-width: 100%; min-width: 240px; width: 540px;&#39;&gt;&lt;/iframe&gt;

</description>          <pubDate>Mon, 07 Aug 2017 17:24:11 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812277685273</guid>
          
            <category>Container技術</category>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170707/20170707164743.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>スタートアップ広報が新規上場するときに気をつけておきたいこと</title>
          <link>http://tech.uzabase.com/entry/2016/12/08/172316</link>          <description>&lt;div&gt;こんにちは、ユーザベースで広報とIRを担当している山田です。2016年10月21日、株式会社ユーザベースは東京証券取引所マザーズに上場しました。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;&lt;iframe style=&quot;border: none; overflow: hidden;&quot; src=&quot;https://www.facebook.com/plugins/post.php?href=https%3A%2F%2Fwww.facebook.com%2Fuzabase%2Fposts%2F1264328823599210&amp;amp;width=500&quot; width=&quot;500&quot; height=&quot;539&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;上場できたのもこれまで支えていただいた皆さまのおかげです……といった形式ばったことは最小限に留めておいて、上場にあたって広報ノウハウがあまり公開されていなくて本気で困ったので、Tech Blogの場を借りて、今後増えてくると思われる上場準備中の企業の広報担当者さんたち向けに&lt;strong&gt;「スタートアップが新規上場（IPO）する際に広報として気をつけておきたいこと」&lt;/strong&gt;をまとめたいと思います。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;なおユーザベースのバックオフィスチームには公認会計士の資格を持つメンバーが、ファームを作れるぐらいの人数いるという幸運もあったため、本記事では財務や会計的な側面には触れません。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;h3&gt;上場前&lt;/h3&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;上場前にできることはそれほどありません。上場承認後に必要になる作業を想像して、それへの情報収集と対策を粛々と進めていきます。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;ユーザベースの場合は以下の作業に主にリソースを割きました。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;目論見書カラーページの制作&lt;/li&gt;
&lt;li&gt;IRページの制作&lt;/li&gt;
&lt;li&gt;上場当日セレモニーの演出&lt;/li&gt;
&lt;li&gt;上場後最初となる決算説明会の準備&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;特に目論見書とIRページについては、上場承認後に投資家との接点になる最重要ポイントです。「私たちが何者であるか」を知っていただいて、会社の何を評価して、株式を保有してほしいかというメッセージが伝わるものにしなければなりません。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;会社によって何を知ってほしいかという軸は異なりますが、私たちが伝えたいメッセージは&lt;strong&gt;「経済情報で、世界をかえる」&lt;/strong&gt;というミッションです。このミッションとコーポレートカラーである赤、そして大事にしている&lt;strong&gt;「7つのルール」&lt;/strong&gt;を前面に推し出すことにしました。​&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;img class=&quot;hatena-fotolife&quot; title=&quot;f:id:kiyohero:20161207132340p:plain&quot; src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kiyohero/20161207/20161207132340.png&quot; alt=&quot;f:id:kiyohero:20161207132340p:plain&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;hatena-fotolife&quot; title=&quot;f:id:kiyohero:20161207132352p:plain&quot; src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kiyohero/20161207/20161207132352.png&quot; alt=&quot;f:id:kiyohero:20161207132352p:plain&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;「何を知ってほしいか」は会社によってそれぞれだと思うので、経営陣も交えてしっかり議論した上で、方針を決めるのが良いと思います。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;上場承認〜上場当日&lt;/h3&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;上場承認が下りたら、いよいよ上場に向けたスパートのはじまりです。顧客、社員、投資家など様々なステークホルダーに適切に情報を届ける必要があります。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;まず承認を受けたら、公式情報としてすぐにプレスリリースを出します。ネット上での最速情報としてTDnetのPDFがありますが、テキストベースのフォーマットで自社の情報を発信した方がシェアされやすいと思います。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;東京証券取引所マザーズ市場への新規上場承認に関するお知らせ - 株式会社ユーザベース&quot; src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.uzabase.com%2Fpress%2Flisting-aproval%2F&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.uzabase.com/press/listing-aproval/&quot;&gt;www.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;上場当日ももちろんプレスリリースを出した方が良いです。上場当日はセレモニー等の準備でばたばたしていますが、場が開く9時より前には公開できていると良いと思います。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;東京証券取引所マザーズ市場上場のお知らせ&quot; src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.uzabase.com%2Fpress%2Flisting-information%2F&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.uzabase.com/press/listing-information/&quot;&gt;www.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;また同日に、コーポレートサイトのIRページも公開します。（上場日前には公開してはいけません。）&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;だいたいのコンテンツは有報などから自動で取得されますが、「株主の皆さまへ」といったコンテンツは自社で用意する必要があります。投資家・株主の方々は事業内容や業績のほかに、社長や従業員のキャラクターも重要視されるので、肩肘張ったものではなくて「らしさ」が出るものが良いと思います。ユーザベースの場合は創業メンバー3人からの『3つの約束』として公開しています。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;strong&gt;株主・投資家の皆様へ 3つの約束&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;「経済情報で、世界をかえる」このビジョンの達成に向けて忠実に行動します。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;良い時も悪い時も、正直に話します。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有言実行を積み重ねる事で、信頼を獲得していきます。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;株主・投資家の皆様へ&quot; src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.uzabase.com%2Fir%2Ftopmessage%2F&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.uzabase.com/ir/topmessage/&quot;&gt;www.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;「社員の顔が見えることが重要」というのは、プロピッカーでもあるレオス・キャピタルワークス 藤野英人さんの記事を参考にしました。この分析については自分の感覚とも合致していてすごく納得感がありました。現在進めているコーポレートサイトリニューアルでも、もっと社員の人となりが見えるものにしていく予定です。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;藤野英人さん「投資家は社員の『顔』が見える企業の株を買いたい」 | 広報会議 2014年11月号&quot; src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fmag.sendenkaigi.com%2Fkouhou%2F201411%2Foffice-pr%2F003567.php&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://mag.sendenkaigi.com/kouhou/201411/office-pr/003567.php&quot;&gt;mag.sendenkaigi.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;ちなみに承認発表日は想定以上のトラフィックが来たため、一時的にサイトにアクセスいただけない状態が発生してしまいました。大変嬉しい悲鳴ではありますが、同時にとても恥ずかしいことでもあるので、サイトがダウンする可能性は最大限排除しておきましょう。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;h3&gt;上場後&lt;/h3&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;上場後はより広報的な技量が求められます。上場に伴って増えるメディアや投資家からの面談依頼、兜倶楽部とのお付き合い、適時開示を含めた投資家とのコミュニケーション等々……。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;変わらずにあるのは「どうコミュニケーションすれば自社のファンになってくれるのか」という視点です。ユーザベースは少し変わったかたちのIRとして、NewsPicksを使った個人投資家向けIR活動を開始しています。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;【ユーザベース】最新決算と僕たちのすべて&quot; src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fnewspicks.com%2Fnews%2F1853866%3Fref%3Duser_9317&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://newspicks.com/news/1853866?ref=user_9317&quot;&gt;newspicks.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;ユーザベース、個人投資家の皆さまに向けたスマホ時代のIRを開始&quot; src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.uzabase.com%2Fpress%2Fuzabse-ir-privateinvestors%2F&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.uzabase.com/press/uzabse-ir-privateinvestors/&quot;&gt;www.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;【採録】「BtoBとBtoCを持っているのが強み」 ユーザベース個人投資家説明会リポート 前編&quot; src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fnewspicks.com%2Fnews%2F1932305%3Fref%3Duser_291503&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://newspicks.com/news/1932305?ref=user_291503&quot;&gt;newspicks.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;【採録】「メディアは上場すべきか」「株主優待にNewsPicks有料オプションを」などに回答 ユーザベース個人投資家説明会 後編&quot; src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fnewspicks.com%2Fnews%2F1932352%3Fref%3Duser_291503&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://newspicks.com/news/1932352?ref=user_291503&quot;&gt;newspicks.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;上場というのは会社が変化する極めて大事なタイミングですが、これを活かして「より強い会社をつくる」きっかけにできると良いなと、上場を経て感じました。この記事がこれから上場される皆さまの参考になれば幸いです。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;p&gt;（この記事は『&lt;a href=&quot;http://www.adventar.org/calendars/1929&quot;&gt;広報マーケティング Advent Calendar 2016 - Adventar&lt;/a&gt;』の8日目の記事です。広報・マーケティング界隈の方のご参加をお待ちしています！） &lt;/p&gt;</description>          <pubDate>Thu, 08 Dec 2016 17:23:16 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328749687197977231</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/k/kiyohero/20161208/20161208172654.png?1481185638" type="" length="0" />
        </item>
      
    
      
      
        <item>
          <title>CI環境 に関する Tips を共有する勉強会「Web Tech Tokyo #2」を開催しました</title>
          <link>http://tech.uzabase.com/entry/2016/12/05/101546</link>          <description>&lt;p&gt;こんにちは。ニューズピックスの大川です。2016年11月14日に、Web系エンジニア同士でTipsを共有しあう交流会 「Web Tech Tokyo」の第2回目をユーザベースで開催しました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fweb-tech-tokyo.connpass.com%2Fevent%2F43773%2F&quot; title=&quot;Web Tech Tokyo #2（CI環境 Tips 共有会） (2016/11/14 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://web-tech-tokyo.connpass.com/event/43773/&quot;&gt;web-tech-tokyo.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;このイベントでは、参加者全員がWeb系の開発Tipsを発表し、楽しく議論します。&lt;/p&gt;

&lt;p&gt;第2回目は &lt;b&gt;CI環境 をテーマ&lt;/b&gt;に、日頃困っていることや成果を出したことについて発表し、交流する場にしました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/h/horobetsu613/20161128/20161128162435.jpg&quot; alt=&quot;f:id:horobetsu613:20161128162435j:plain&quot; title=&quot;f:id:horobetsu613:20161128162435j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;span style=&quot;font-size: 80%&quot;&gt;フリードリンクと軽食を楽しみつつ、和気あいあいと進行します&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2016/10/28/133638&quot;&gt;Web Tech Tkyo #1&lt;/a&gt;では12名の方に発表していただき、内容がとてもボリュームのある回でした。&lt;/p&gt;

&lt;p&gt;今回はもう少し人数を減らして募集枠を6名とし、「&lt;b&gt;Jenkinsで自動的に画面キャプチャする方法&lt;/b&gt;」「&lt;b&gt;テスト文化のない組織にテストを導入した話&lt;/b&gt;」など実践的なお話しを発表していただきました。&lt;/p&gt;

&lt;p&gt;どの方も熱心に CI環境 に取り組まれているので、かなり収穫が多く密度の高い勉強会になったと思います。シェアいただいたスライドも下記に投稿しておりますので是非ご覧ください。ざっくばらんに話す中で、様々なおもしろい情報を交換するため、その場にいた方が間違いなくおもしろいです！&lt;/p&gt;

&lt;p&gt;第3回目は2017年の年明けに開催を予定しております。テーマはまだ決めていませんが、「&lt;b&gt;ユーザー行動ログ解析の実際&lt;/b&gt;」や「&lt;b&gt;どの Javascript Framework を選ぶか&lt;/b&gt;」のようなテーマで行おうかと考えております。&lt;/p&gt;

&lt;p&gt;4〜6名程度の発表者枠に、数名の聴講枠を追加するつもりです。次回もconnpassのページで告知しますので、ご興味のある方は是非ご参加くださいませ！&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fweb-tech-tokyo.connpass.com%2F&quot; title=&quot;Web Tech Tokyo&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://web-tech-tokyo.connpass.com/&quot;&gt;web-tech-tokyo.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h5&gt;公開スライド&lt;/h5&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;463&quot; id=&quot;talk_frame_370405&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/fb1579ae2f814609a3183ce52d26fe80&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/feb0223/jenkinsdewebhua-mian-kiyaputiya&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;463&quot; id=&quot;talk_frame_369510&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/e2f66649a9094d7ea7506d2c8fd98cd8&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/leko/rekasinakai-fa-xian-chang-niutworu-reteciwodao-ru-sitahua&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://www.slideshare.net/slideshow/embed_code/key/iDvLLUMnVrhafF&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/toshihumianan/gcpci&quot; title=&quot;GCPでCI環境を構築する&quot; target=&quot;_blank&quot;&gt;GCPでCI環境を構築する&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/toshihumianan&quot; target=&quot;_blank&quot;&gt;Toshihumi Anan&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.slideshare.net/toshihumianan/gcpci&quot;&gt;www.slideshare.net&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</description>          <pubDate>Mon, 05 Dec 2016 10:15:46 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328749687196383456</guid>
          
            <category>勉強会</category>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/h/horobetsu613/20161128/20161128162435.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Docker に関する Tips を共有する勉強会「Web Tech Tokyo #1」を開催しました</title>
          <link>http://tech.uzabase.com/entry/2016/10/28/133638</link>          <description>&lt;p&gt;こんにちは。ニューズピックスの大川です。先日、&lt;b&gt;WebTechTokyo&lt;/b&gt;というイベントの第1回目をユーザベースオフィスで開催しました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fweb-tech-tokyo.connpass.com%2Fevent%2F40548%2F&quot; title=&quot;Web Tech Tokyo #1（Docker Tips 共有会） (2016/10/12 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://web-tech-tokyo.connpass.com/event/40548/&quot;&gt;web-tech-tokyo.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;このイベントでは、参加者全員がWeb系の開発Tipsを発表し、楽しく議論します。&lt;/p&gt;

&lt;p&gt;第1回目は Docker をテーマに、日頃困っていることや成果を出したことについて発表し、議論し合う場にしました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/h/horobetsu613/20161027/20161027102203.jpg&quot; alt=&quot;f:id:horobetsu613:20161027102203j:plain&quot; title=&quot;f:id:horobetsu613:20161027102203j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;span style=&quot;font-size: 80%&quot;&gt;会場の様子&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;全員に発表してもらうのは初の試みだったので、ハードルが高すぎて人が集まらないのではないかと不安でしたが、とてもありがたいことに12名の方に参加していただきました！&lt;/p&gt;

&lt;p&gt;イベントの開催については何回も経験がありますが、全員が無遅刻無欠席という素晴らしい状況は初めてでした。時間を無駄にすることもなく、熱量をもって発表・議論できたことがとても嬉しかったです。&lt;/p&gt;

&lt;p&gt;みなさんにたくさんの資料を共有いただきましたので、この記事の最後で是非ご覧ください。&lt;/p&gt;

&lt;p&gt;他にも、残念ながら非公開ですが、「host machine も registry も jenkins も相次いで disk full になった話」「フロントエンドのエンジニアがひとりで環境構築するまでの話」などなど、たくさんの楽しい発表をしていただきました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/h/horobetsu613/20161027/20161027104632.jpg&quot; alt=&quot;f:id:horobetsu613:20161027104632j:plain&quot; title=&quot;f:id:horobetsu613:20161027104632j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;span style=&quot;font-size: 80%&quot;&gt;ビールと軽食をつまみつつ、穏やかな雰囲気で進行しました&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;今回の反省点としては、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;みなさん、あまりお酒を飲まないのでソフトドリンクを充実させた方が良かった&lt;/li&gt;
&lt;li&gt;ピザ・軽食が少し足りなかった&lt;/li&gt;
&lt;li&gt;議論（交流）する時間をもっと取りたかった&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;などがあったなと思っておりますので、これは次回必ず改善します！&lt;/p&gt;

&lt;p&gt;&lt;b&gt;第2回は 11/14（月）&lt;/b&gt; を予定しております。&lt;b&gt;テーマは、「CI環境」&lt;/b&gt;です。&lt;/p&gt;

&lt;p&gt;すこし範囲が大きいテーマですが、「ビルド」「デプロイ」「テスト」などの自動化に関して、みなさんがどうしているか、何に困っているか、どういうツールを導入しているか、などなどを発表・議論していけたらと思っています。&lt;/p&gt;

&lt;p&gt;connpassのページで告知しますので、ご興味のある方は是非ご参加ください！&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fweb-tech-tokyo.connpass.com%2F&quot; title=&quot;Web Tech Tokyo&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://web-tech-tokyo.connpass.com/&quot;&gt;web-tech-tokyo.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h5&gt;公開された資料&lt;/h5&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;463&quot; id=&quot;talk_frame_363274&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/15b4797783ce4e1b8823400cf0cd776c&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/kotatsu360/docker-with-packer&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;596&quot; id=&quot;talk_frame_363199&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/5492fd03398548edb3ed0466c9665bb3&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/y13i/alpine-linux-falsesusume&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;596&quot; id=&quot;talk_frame_363267&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/f381e1707b224583b39239cf152736c2&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/himaoka/sysdigshi-ouze-kontenaziyanakutemo&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;463&quot; id=&quot;talk_frame_363211&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/99f5a025bdb546449c14cf4ae0c4f6ad&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/dtan4/web-tech-tokyo-number-1&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;463&quot; id=&quot;talk_frame_363130&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/e86eec55af364e4181be00f9881e802d&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/hoshinotsuyoshi/hatutichu-li-tehakowoshi-uhua&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</description>          <pubDate>Fri, 28 Oct 2016 13:36:38 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328749687191490863</guid>
          
            <category>勉強会</category>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/h/horobetsu613/20161027/20161027102203.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>エンジニア向けMeetupイベントレポート　第4回：『大規模サービスを支えるインフラ』</title>
          <link>http://tech.uzabase.com/entry/2016/07/21/102954</link>          <description>&lt;p&gt;こんにちは！SPEEDA Techチームの清水です。&lt;br&gt;
&lt;br&gt;
毎月開催してきたユーザベース Meetupも、ついに第4回を数えました。&lt;br&gt;
回を重ねていくうちにノウハウも溜まってきております。&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;開催内容：『大規模サービスを支えるインフラ』&lt;/h3&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fuzabase-meetup.connpass.com%2Fevent%2F33709%2F&quot; title=&quot;UZABASE Meetup#4 〜大規模サービスを支えるインフラ〜 (2016/07/07 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://uzabase-meetup.connpass.com/event/33709/&quot;&gt;uzabase-meetup.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;今回はNewsPicks CTOの杉浦が司会を務めました。
ぜ、ぜんぜん滑ってなんてないんだからね！
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160719/20160719094340.jpg&quot; alt=&quot;f:id:kaonash:20160719094340j:plain&quot; title=&quot;f:id:kaonash:20160719094340j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;さて、第3回に引き続き、今回も外部からスペシャルゲストをお招きいたしました。&lt;br&gt;
ファッションアプリiQONを開発するVASILYさんのインフラエンジニアを担当している光野さんにご登壇いただきました。&lt;br&gt;
実はVASILYさんは、ユーザベースが入っているビルの下の階にオフィスを構えているというご近所さん。そのご縁もあって時折エンジニア同士の交流をしており、今回も登壇をお願いいたしました。
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160719/20160719094402.jpg&quot; alt=&quot;f:id:kaonash:20160719094402j:plain&quot; title=&quot;f:id:kaonash:20160719094402j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;内容はPackerやChefを活用して開発環境と本番環境を同じVMイメージから一括作成するというもの。自動化素晴らしい。&lt;br&gt;
&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;463&quot; id=&quot;talk_frame_350631&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/3f0048e00cb2495ab5920b139bd6547a&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/kotatsu360/create-prod-and-dev-vm-image-atst-by-packer&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;
以前、Vasilyさんの他の社員の方のプレゼンを見た時にも感じましたが、みなさんプレゼンがうまい！
&lt;br&gt;
ユーザベースも魅力的なプレゼンが出来るように頑張らねばと刺激をいただきました。&lt;br&gt;
&lt;br&gt;
ユーザベースからも、それぞれSPEEDAとNewsPicksでインフラを担当しているエンジニアが登壇いたしました。&lt;br&gt;
SPEEDAはオンプレ、NewsPicksはAWSを使用しているため、お互い異なるノウハウや悩みがあり、どのように課題を解消しているのかについて発表をしてもらいました。&lt;br&gt;&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/fPX8utv3Y1LNWc&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/kw1X4Ypmukv3xe&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;p&gt;そしてお決まりのビールとピザで懇親会がスタート！&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160719/20160719094416.jpg&quot; alt=&quot;f:id:kaonash:20160719094416j:plain&quot; title=&quot;f:id:kaonash:20160719094416j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
懇親会では、いつも様々なバックグラウンドをもつ方と交流を深めることができ、大変有意義な時間となっており、今回も非常に実りある時間となりました。&lt;/p&gt;

&lt;h3&gt;今後の予定&lt;/h3&gt;

&lt;p&gt;ユーザベースでは定期的にMeetupイベントを開催しています。&lt;br&gt;
次回は調整中ですが、8月下旬に開催をする予定です。&lt;br&gt;
詳細が決まり次第connpassで募集を開始いたしますので、まだ参加をしたことがない方やリピーターの方も、ぜひ遊びに来てください！&lt;/p&gt;
</description>          <pubDate>Thu, 21 Jul 2016 10:29:54 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653812171406238951</guid>
          
            <category>勉強会</category>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160719/20160719094340.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>子育てと仕事を両立できる、ユーザベースでの働き方とは</title>
          <link>http://tech.uzabase.com/entry/2016/07/19/121312</link>          <description>&lt;p&gt;こんにちは、インフラチームの小林です。&lt;/p&gt;

&lt;p&gt;僕は、仕事と子育てを両立させながら働くエンジニアです。本当に両立できるのか、今回はユーザベースでの働き方についてご紹介します。&lt;/p&gt;

&lt;p&gt;我が家は夫婦共働きで、5歳と2歳の娘がいます。&lt;/p&gt;

&lt;p&gt;妻は今年の4月に復職が決まり、次女にも保育園に通ってもらうことになりました。保育園探しは大変で、やっと決まって安心したのもつかの間、1日目から長時間あずかってもらえるわけではないということに気付きました。&lt;/p&gt;

&lt;p&gt;保育園に通うことを慣れてもらうための、「慣らし保育」というものがあったのです。&lt;/p&gt;

&lt;p&gt;この期間中、次女のお迎え時間はお昼過ぎ。近くに親族もいないし、妻は復職します。さあどうしよう。悩んだ末、「僕が在宅勤務をする」という選択肢を選びました。育児・家事も分担制にして、朝は僕が家事や洗濯、登園準備を担当し、夜は妻にバトンタッチすることにしたのです。&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;自由と無責任は違う&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;僕が在宅勤務という選択をするにあたり、強く印象に残っている代表の梅田の言葉があります。&lt;/p&gt;

&lt;p&gt;「仕事だけの人生ってつまらないよね。プライベートも大事にして、仕事とプライベートを高次元でバランスさせて、互いが原動力となり両輪がしっかりとまわっていく。そんな状態が理想だし、それを実現させるために起業したんだ。だから、生産性の向上をひたすら追及し、みんなが高いパフォーマンスを発揮することによって世界一休みが多い会社にしたい。」&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;http://tech.uzabase.com/embed/2015/01/15/102658&quot; title=&quot;世界一ハッピーでワクワクする会社を目指して ～SPEEDA, NewsPicksを生んだ企業文化～ - UZABASE Tech Blog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2015/01/15/102658&quot;&gt;tech.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;もちろん、在宅勤務は休みではありません。会社という場所にとらわれずに働くという選択肢です。だけど、子育てというプライベートを大切にしながら働きたい、そう思ったときに梅田の言葉が背中を押してくれました。&lt;/p&gt;

&lt;p&gt;とはいえ、自分が達成すべき仕事にコミットしなければ、在宅勤務で子育てをするという僕の願いはかないません。きちんと責任を果たしたうえで、望みがかなう。個人的には、この順番を間違えてはいけないと肝に銘じ、在宅勤務でも結果を出すことで、周りも前向きに協力してくれると考えました。&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;チームメンバーに感謝&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;エンジニアという職業に就いている方は、「いやいや、そうは言っても顔を合わせて仕事をしないと厳しいときもあるでしょ」と思うでしょう。実際、在宅勤務を始めたときは、まさに佳境でした。スケジュールもタイトで、家にいると作業効率も落ちてしまう。&lt;/p&gt;

&lt;p&gt;しかも、僕が在宅勤務になることで、他のメンバーにも仕事の引き継ぎが発生。「これは本当にフェアなのだろうか」という疑問があり、正直、在宅勤務を決めたことへの後ろめたさがありました。&lt;/p&gt;

&lt;p&gt;その複雑な胸の内を、勇気をもってチームメンバーに話したんです。すると、反対どころか「ぜひ在宅勤務をしてください」と応援してくれて。本当に感謝の気持ちでいっぱいでした。&lt;/p&gt;

&lt;p&gt;今後、子育てをするメンバーが増えてきたとき、僕は「大丈夫！僕もそうやってやってきた！」と伝えたい。みんなが胸を張って子育てに向かえるよう、後押しするのが最低限の恩返しだと思っています。&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;育児と仕事の葛藤&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;そうして、僕の在宅勤務が始まり、育児と仕事の両立という貴重な経験を積むなかで、改めて「子育て」と「時間通りに働くこと」のバランスをとることの難しさを実感しました。&lt;/p&gt;

&lt;p&gt;娘を送り出した後、仕事に集中できたと思えば、あっという間にお迎えの時間。お迎えに行くと、娘は僕の顔を見るなり号泣するので、つきっきりであやさないといけない。やっと寝かしつけたとしても、一緒に寝落ちしてしまうこともしばしば。仕事に集中できる時間が本当に限られてしまったのです。&lt;/p&gt;

&lt;p&gt;育児に「時間」という概念が入ると、急に難易度が上がります。朝のバスの時間、お迎えの時間など、いつも会社で仕事をしていること以外に決められた時間があるのは、想像以上に大変です。&lt;/p&gt;

&lt;p&gt;それに、子ども相手に無駄を省いて効率的に動こうとすれば痛い目をみます。特に次女は、自我が芽生えてきた時期なので、着替えなどを手伝おうとすると「自分でやりたい」と大泣きし、予想以上に時間がかかってしまう。だから、決まった時間にすべてをこなすためには、相当な余裕を持った行動が必要でした。&lt;/p&gt;

&lt;p&gt;こうした経験から、育児をしながら仕事をするには、かなり時間が限られるということが分かりました。子どもたちがいない時間が唯一仕事に集中できる。でもその前後は、まったく時間が取れない。当然、仕事に集中できる時間以外に対応しないといけない仕事もあるので、なかなか大変です。&lt;/p&gt;

&lt;p&gt;もちろん、「もっと仕事をしたい」という気持ちはあります。だけど、僕にとって子育ては同じかそれ以上にやりたいこと。最近では、仕事と家族との時間の切り替えをうまくやることで、メリハリをつけながら働けるようになりました。&lt;/p&gt;

&lt;p&gt;何より、ワークライフバランスとは、仕事とプライベートの陣取り合戦ではなく、お互いに補完し合うものなのだということが分かったのは収穫です。&lt;/p&gt;

&lt;p&gt;ユーザベースという会社は、自分がコミットした仕事を全うし結果を出せば、働く時間も場所も自由です。出社義務もありません。そのような環境だからこそ、仕事とプライベートを高次元でバランスさせて、互いが原動力となり、仕事と育児という両輪をしっかりとまわすことができたのです。&lt;/p&gt;

&lt;p&gt;あのとき、僕が在宅勤務をするという選択をして本当によかった。&lt;/p&gt;

&lt;p&gt;人生は一度きりです。仕事もプライベートも両立させてこそ、豊かな人生になるのではないかと思います。最初は大変でしたが、学びも多く、毎日出社しているだけではわからない世界も知りました。だから、少しでも興味を持ってくれたなら、ユーザベースに遊びに来て欲しい。ぜひ一緒に働いてみませんか？&lt;/p&gt;

&lt;p&gt;応募に関する詳細はこちら：www.wantedly.com
&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fprojects%2F59258&quot; title=&quot;世界に通じるビジネス基盤のインフラを支えたい方、募集中！ by 株式会社ユーザベース&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/59258&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</description>          <pubDate>Tue, 19 Jul 2016 12:13:12 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653812171404145835</guid>
          
          <enclosure url="http://cdn.mogile.archive.st-hatena.com/v1/image/uzabase/302456199552088609.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>エンジニア向けMeetupイベントレポート　第3回：『チームの生産性を向上させる』</title>
          <link>http://tech.uzabase.com/entry/2016/07/01/131328</link>          <description>&lt;p&gt;SPEEDA Techチームの清水です。&lt;br&gt;
&lt;br&gt;
連日のユーザベースMeetupレポート、第3弾です。(連日更新しているのは今まで更新をさぼっていたからですごめんなさい)&lt;br&gt;
第1回、第2回レポートはこちら↓
&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftech.uzabase.com%2Fentry%2F2016%2F06%2F29%2F024236&quot; title=&quot;エンジニア向けMeetupイベントレポート　第1回：『NewsPicks/SPEEDA「高速」成長の秘密』 - UZABASE Tech Blog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2016/06/29/024236&quot;&gt;tech.uzabase.com&lt;/a&gt;&lt;/cite&gt;
&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftech.uzabase.com%2Fentry%2F2016%2F06%2F30%2F100159&quot; title=&quot;エンジニア向けMeetupイベントレポート　第2回：『Java開発最前線』 - UZABASE Tech Blog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2016/06/30/100159&quot;&gt;tech.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h3&gt;開催内容：『チームの生産性を向上させる』&lt;/h3&gt;

&lt;p&gt;今回のテーマは「チームの生産性を向上させる」です。&lt;br&gt;
&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fuzabase-meetup.connpass.com%2Fevent%2F31833%2F&quot; title=&quot;UZABASE Meetup#3 〜チームの生産性を向上させる〜 (2016/06/02 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://uzabase-meetup.connpass.com/event/31833/&quot;&gt;uzabase-meetup.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;第3回では、初の試みとして社外から登壇者をお招きしました。&lt;br&gt;
ライブ共有型スポーツニュースアプリ「Player!」を開発するスタートアップ、ookamiさんよりCTOの中村さんをお招きして、Githubを中心とした「Player!」の開発手法についてお話いただきました。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160624/20160624170647.jpg&quot; alt=&quot;f:id:kaonash:20160624170647j:plain&quot; title=&quot;f:id:kaonash:20160624170647j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;e40ac595793c416d912c5d2cebae119f&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;その他にも弊社エンジニアからユーザベースでのチーム開発の進め方やSlackを用いたChatopsの発表も行い、生産性向上への取り組みについて熱く語ってもらいました。&lt;br&gt;
参加者の方々もいつも以上にたくさんの質問を登壇者に向けて投げかけていたのが印象的でした。&lt;br&gt;&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/gVvievLR4IFaSx&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/d76D0f1WLzgtW&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;h3&gt;発表後のお楽しみ&lt;/h3&gt;

&lt;p&gt;そして懇親会。
お決まりのピザ&amp;amp;エビスビールです。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160701/20160701130952.jpg&quot; alt=&quot;f:id:kaonash:20160701130952j:plain&quot; title=&quot;f:id:kaonash:20160701130952j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
終了後には運営に協力してくれたメンバーで記念撮影。ユーザベースTシャツで統一してみました。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160701/20160701131001.jpg&quot; alt=&quot;f:id:kaonash:20160701131001j:plain&quot; title=&quot;f:id:kaonash:20160701131001j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;次回告知&lt;/h3&gt;

&lt;p&gt;第4回は7月7日の七夕に行います。テーマは「大規模サービスを支えるインフラ」です。&lt;br&gt;
&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fuzabase-meetup.connpass.com%2Fevent%2F33709%2F&quot; title=&quot;UZABASE Meetup#4 〜大規模サービスを支えるインフラ〜 (2016/07/07 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://uzabase-meetup.connpass.com/event/33709/&quot;&gt;uzabase-meetup.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;恵比寿で皆さんとお会いできるのを楽しみにしています！&lt;/p&gt;
</description>          <pubDate>Fri, 01 Jul 2016 13:13:28 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328537792370971084</guid>
          
            <category>勉強会</category>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160624/20160624170647.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>エンジニア向けMeetupイベントレポート　第2回：『Java開発最前線』</title>
          <link>http://tech.uzabase.com/entry/2016/06/30/100159</link>          <description>&lt;p&gt;SPEEDA Techチームの清水です。&lt;br&gt;
&lt;br&gt;
先日レポートいたしましたユーザベースMeetup、第2回目のレポートをお届けします。&lt;br&gt;
第1回レポートはこちら↓
&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftech.uzabase.com%2Fentry%2F2016%2F06%2F29%2F024236&quot; title=&quot;エンジニア向けMeetupイベントレポート　第1回：『NewsPicks/SPEEDA「高速」成長の秘密』 - UZABASE Tech Blog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2016/06/29/024236&quot;&gt;tech.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h3&gt;開催内容：『Java開発最前線』&lt;/h3&gt;

&lt;p&gt;第1回目Meetup開催の1ヶ月後、ユーザベースのメイン開発言語であるJavaをテーマとして第2回を開催しました。&lt;br&gt;
&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fuzabase-meetup.connpass.com%2Fevent%2F29952%2F&quot; title=&quot;Java開発最前線 - UZABASE Meetup#2 (2016/04/28 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://uzabase-meetup.connpass.com/event/29952/&quot;&gt;uzabase-meetup.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;第2回目も大盛況で、前回から応募枠を大幅に増やしたにも関わらず、すぐに満員となりました。ありがとうございます！&lt;br&gt;
ユーザベースでは開発に使用するJavaのバージョンはすべて最新のJava8に更新済みで、その中で最新の機能をどのように活用しているかという点にスポットをあてた発表となりました。&lt;br&gt;
また、もともとRubyをこよなく愛していた弊社エンジニアが、いかにJavaを(も？)愛するようになったかという発表もあり、これもなかなか興味深い内容でした。&lt;br&gt;&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/5Nh2q6rfFcl6o7&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;61841c27732f4659b88cc3f8837a26c3&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/BOpFRufiWrU2XS&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;p&gt;第1回の「ちょっと発表が多すぎて疲れるかも」という反省をいかし、今回から発表枠は基本3つまでというスタイルにしました。&lt;br&gt;
終わった後はピザとビールで乾杯！(そして写真を撮り忘れる・・・)&lt;br&gt;
ご参加頂いた方、ありがとうございました！&lt;/p&gt;

&lt;h3&gt;今後の予定&lt;/h3&gt;

&lt;p&gt;前回のレポートでもお伝えしましたが、ユーザベースでは定期的にMeetupイベントを開催しています。&lt;br&gt;
次回は7月7日の七夕、「大規模サービスを支えるインフラ」というテーマで開催します！&lt;br&gt;
&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fuzabase-meetup.connpass.com%2Fevent%2F33709%2F&quot; title=&quot;UZABASE Meetup#4 〜大規模サービスを支えるインフラ〜 (2016/07/07 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://uzabase-meetup.connpass.com/event/33709/&quot;&gt;uzabase-meetup.connpass.com&lt;/a&gt;&lt;/cite&gt;
6月30日現在、すでに枠は埋まっていますが、まだいけるかも・・・ぜひお気軽に参加ボタンを押してください！&lt;/p&gt;
</description>          <pubDate>Thu, 30 Jun 2016 10:01:59 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653812171403193024</guid>
          
            <category>勉強会</category>
          
          <enclosure url="https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>エンジニア向けMeetupイベントレポート　第1回：『NewsPicks/SPEEDA「高速」成長の秘密』</title>
          <link>http://tech.uzabase.com/entry/2016/06/29/024236</link>          <description>&lt;p&gt;こんにちは、SPEEDA Techチームで新規機能開発を担当しています清水です。&lt;br&gt;
&lt;br&gt;
ユーザベースでは今、定期的にエンジニア向けにMeetupイベントを開催しています！&lt;br&gt;
3月に開催をした第1回目から、ほぼ月1回のペースで開催しており、すでに開催数は3回を数えています。&lt;br&gt;
&lt;br&gt;
今回はMeetupイベントの目的と、第1回の開催内容をレポートします。&lt;br&gt;
(追って第2回・第3回のレポートもアップしますのでお楽しみに！)
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;目的&lt;/h3&gt;

&lt;p&gt;弊社では、様々な先進的な取り組みをしているにも関わらず、なかなか「技術の会社」として認識をしてもらえていなかったりします。&lt;br&gt;
なかには「サービスは外注していると思っていました」とおっしゃる方も・・・。&lt;br&gt;
さすがにこれはまずいということで、もっとユーザベースという会社やカルチャー、雰囲気、そして社員のことを知ってもらうため(さらに言えば優秀なエンジニアの採用に繋げるため)、Meetupイベントを企画することになりました。&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;開催内容：『NewsPicks/SPEEDA「高速」成長の秘密』&lt;/h3&gt;

&lt;p&gt;記念すべき第1回目は「高速化」をテーマに開催しました。&lt;br&gt;
&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fuzabase-meetup.connpass.com%2Fevent%2F28036%2F&quot; title=&quot;NewsPicks/SPEEDA「高速」成長の秘密 - UZABASE Meetup#1 (2016/03/25 19:00〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://uzabase-meetup.connpass.com/event/28036/&quot;&gt;uzabase-meetup.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;正直、「本当にみんな来てくれるんだろうか・・・」と不安でいっぱいでしたが、最終的には参加枠を大幅に上回るお申し込みをいただきました！&lt;br&gt;
第1回ということでユーザベースのチーフテクノロジスト竹内やNewsPicksのCTO(ちょうどこの日就任した)杉浦らが登壇。&lt;br&gt;
「高速化」という幅広いテーマも手伝って、ユーザベースで採用している全文検索エンジンElasticsearchの話から自動テスト、高速開発の話まで、バラエティに富む内容で発表させていただきました。&lt;br&gt;
なかには当時開発中だったNewsPicksの新機能に関する発表もあり、盛りだくさんの内容となりました。&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;cdb7490b22af4ff7a369f04bde4900e1&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;f0d9c82bab0d4536808883c13cbcfe37&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;95117b3ac70c457e88ed2f5171655789&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;c7c15e74a2cc4f4d8e84cc224a88a377&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;cbc523f3f74344c39793782272299ed9&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;また、ユーザベースの外部パートナーでありClojureのContributorでもある株式会社シェルフ代表の矢野さんより、『オープンソース開発のすすめ』という内容でLTも行っていただきました！&lt;br&gt;
&lt;span style=&quot;font-size: 200%&quot;&gt;&lt;a href=&quot;https://slideck.io/github.com/tyano/lightning_talks/join_to_open_source.md#/&quot;&gt;オープンソース開発のすすめ&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;発表後のお楽しみ&lt;/h3&gt;

&lt;p&gt;ユーザベースMeetupでは、発表の後に参加者の皆さんと親睦を深める目的で懇親会を開催しています。&lt;br&gt;
懇親会では、ピザとエビスビール(もちろんお茶もあります)をご用意しています！&lt;br&gt;
こちらは懇親会の様子。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160627/20160627165330.jpg&quot; alt=&quot;f:id:kaonash:20160627165330j:plain&quot; title=&quot;f:id:kaonash:20160627165330j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
けっこう多めにピザをご用意しているはずなんですが、無くなるのが早い早い・・・現在ピザの増量を検討中です。&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;今後について&lt;/h3&gt;

&lt;p&gt;今後も定期的にMeetupイベントを開催していく予定です。&lt;br&gt;
取り急ぎ、次回は7月7日の七夕、「大規模サービスを支えるインフラ」というテーマで開催します！&lt;br&gt;
&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fuzabase-meetup.connpass.com%2Fevent%2F33709%2F&quot; title=&quot;UZABASE Meetup#4 〜大規模サービスを支えるインフラ〜 (2016/07/07 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://uzabase-meetup.connpass.com/event/33709/&quot;&gt;uzabase-meetup.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;今回も(大変ありがたいことに)すでに席が埋まってしまっていますが、直前で一定数キャンセルが出ることを考えると、まだギリギリ入れるはず・・・ぜひふるってご参加ください！&lt;/p&gt;
</description>          <pubDate>Wed, 29 Jun 2016 02:42:36 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653812171403112073</guid>
          
            <category>勉強会</category>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160627/20160627165330.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title> Hinemos5.0.1移行記（その2：保守サービスとエンタープライズオプションを契約） </title>
          <link>http://tech.uzabase.com/entry/2016/04/28/121633</link>          <description>&lt;p&gt;ユーザベース インフラチームの小林です。&lt;/p&gt;

&lt;p&gt;だいぶ時間が空いてしまいましたが、「&lt;a href=&quot;http://tech.uzabase.com/entry/2016/03/11/155758&quot;&gt;Hinemos5.0.1移行記（その1：理想と現実の葛藤）&lt;/a&gt;」の記事から引き続き、Hinemos5.0.1への移行のお話です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;前回のおさらい&lt;/h2&gt;

&lt;p&gt;Hinemos環境をバージョンアップするために、以下の流れで行うことを考えていました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;   Hinemos5Managerを新規構築 、動作検証&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;   Hinemos3のデータをHinemos5に移行&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;   Hinemos3からHinemos5への順次切り替え&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;しかし、実際には思っていた通りにいかないことが判りました。&lt;/p&gt;

&lt;p&gt;具体的には、3番目の「Hinemos3からHinemos5への順次切り替え」の部分で、以下の問題がでてきたというお話でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Agent用にサポート対象バージョンのOpenJDKを入れるか、OracleJDK1.8を使い続けるか。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hinemos3とHinemos5のAgentが同居できるといっても、どちらかのインストールディレクトリを変えないといけない。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;救世主が現る&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2016/03/11/155758&quot;&gt;前回の記事&lt;/a&gt;にも書いてありますが、&lt;A Href=&quot;http://atomitech.jp/&quot;&gt;アトミテック&lt;/A&gt;さんが上記の問題を解決してくれました。&lt;br&gt;
もともと、Hinemos5が出る前から、データ移行の相談を何回かしておりました。
その際に、すごく頼りになりそうだったので&lt;br&gt;
「データ移行＋移行時のトラブルサポート」という形で、今回依頼をいたしました。&lt;br&gt;
結果的にそれが大正解で、本当にいろいろなことをサポートしていただきました。&lt;br&gt;
&lt;br&gt;
特に、OpenJDKを入れるかOracleJDK1.8を使い続けるかという問題を解決するうえで、非常に助かりました。
既存の環境で使用しているOracleJDK1.8を使い続けたかったのですが、これを短時間で動作検証するのは私達には不可能でした。&lt;br&gt;
しかし、快く&lt;A Href=&quot;http://atomitech.jp/&quot;&gt;アトミテック&lt;/A&gt;さんにご対応いただけたおかげで、OracleJDK1.8でもHinemos5.0の動作が一通り問題ないことが判りました。&lt;br&gt;
当然ながら自己責任の上で、弊社環境ではOracleJDK1.8でHinemos5.0のAgentを動かしてます（今のところ不具合はありません）。&lt;br&gt;
&lt;br&gt;
OracleJDK1.8でHinemos5.0のAgentを動かすにあたって、何個か落とし穴がありましたが、そこら辺もご対応をいただいてます（起動shellにJavaのバージョンチェックがあったりなど）。
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;移行できたよ！&lt;/h2&gt;

&lt;p&gt;問題を踏まえた上で、HinemosのAgentは以下の手順で切り替えることになりました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;   Hinemos3.1のAgentのインストールディレクトリ変更&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;   Hinemos5.0のAgentをOracleJDK1.8で起動&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;   Hinemos3.1からHinemos5.0への順次切り替え&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;br&gt;
Hinemos3.1のAgentの変更に当たっては、Agentの再起動が入るのでできるだけ既存のジョブに影響が出ないように調整しながら行いました。
Hinemos5.0のAgentは既存のジョブがないので、一括で作業をしました。&lt;br&gt;
ジョブの順次切り替えは、前回書いたように各ジョブネットは簡単な仕組みで連携していたため、一つのジョブネットがうまくいったら、Hinemos3側のスケジュールを無効化、Hinemos5側のスケジュールを有効化しながら、代替1ヶ月くらいかけて切り替えることができました。
&lt;br&gt;
&lt;br&gt;その途中でもいろいろとあったのですが（Nagiosの監視用スクリプトのVerUpや、エラー時のジョブの挙動が変わってた事など）、一つ一つ真摯にご対応いただけたおかげで、非常にスムーズに作業が進みました。
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;結果、保守サービスとエンタープライズオプションの契約を結ぶ事に&lt;/h2&gt;

&lt;p&gt;おかげで、無事にHinemos5への移行ができたのですが、あまりにも真摯に対応していただいたので、&lt;A Href=&quot;http://atomitech.jp/&quot;&gt;アトミテック&lt;/A&gt;さん経由でHinemosの保守サービスとエンタープライズオプションの契約を結ばせていただきました。&lt;br&gt;
&lt;br&gt;
保守サービスとエンタープライズオプションを契約すると、以下のメリットがあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;修正パッチを提供してもらえる&lt;br&gt;
&lt;span style=&quot;color: #1464b3&quot;&gt;→今回で言うと、Hinemos5.0.2のリリース前に、Hinemos5.0.1のメモリリークの修正パッチが提供されて、事前にその不具合を解消する事ができました。
&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;エンタープライズオプションが使えるようになる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hinemosでわからない事を相談できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;分からない事を相談できるという点が有難く、Hinemosの情報を検索しても出てこないことが多いのですが、何が起きても聞ける環境があると思えるだけで大きな安心感があります。&lt;br&gt;
&lt;br&gt;
個人的に嬉しいのは、エンタープライズオプションを使って、更にHinemosの使える幅が広がりそうなので、いろいろ試していきたいと思ってます。&lt;br&gt;
Hinemosの情報が意外と少ないので、弊社ブログでもHinemosユーザーの皆さんに有益な情報を発信できればと思っています。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;今回の移行で思った事&lt;/h2&gt;

&lt;p&gt;今回移行をしてみてすごく実感したのが、「やはり、あまり一つの製品で凝った仕組みを作らない方が良いな」ということでした。&lt;br&gt;
Hinemosの機能を試したいと言っておきながら矛盾する話ではありますが、うちはHinemosを使いこなしていなかったおかげで、移行に大きな工数がかからずに済んだと思っています。&lt;br&gt;
Hinemosは確かに便利でまだまだ使いこなせる余地があると思っていますし、他の有償版のジョブ監視ツールももっと細かいところができるかもしれません。&lt;br&gt;
この「細かいところ」が肝で、このせいで移行が大規模や製品選定のネックになる事が多い気がしています。&lt;br&gt;
&lt;br&gt;
弊社のジョブの組み方は、最低限のジョブネットを作って、各ジョブネット間はファイル連携という単純な仕組みを用いています。&lt;br&gt;
このファイル連携も、shellでファイル作成とファイル監視をしているので、Hinemosからみたらジョブの実行をしているだけになります。&lt;br&gt;
おかげで、ジョブの切り替えタイミングに余裕を持たせることができたので、私を含めて2～3人程度でも余裕を持って切り替えることができたと思っています。&lt;br&gt;
もし、この組み方がジョブ監視ツールの機能で、全部ジョブの前後関係を組んでいた場合、異なるHinemos間での先行条件はできないので、一括で変更をしないといけない状態でした。&lt;br&gt;
&lt;br&gt;
極端な話をすれば、Hinemosから別製品に載せ替えることもできたと思います（ジョブデータの変換できればですが）。&lt;br&gt;
&lt;br&gt;
そこら辺の自由度は最大限残しておくためにも、あまり凝った機能を使わずに、できるだけ単純な部分を組み合わせるのが良いのではないか、と実感した次第です。&lt;br&gt;
&lt;br&gt;
そうはいっても、便利な機能は使うべきだと思うので、そこら辺を意識しながら、あまり依存しすぎることのないように使っていくことが大事かなと考えています。&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;今後の要望&lt;/h2&gt;

&lt;p&gt;上でいろいろ書きましたが、私自身はHinemosと末永く付き合うつもりでいます。&lt;br&gt;
今後も長くおつきあいする上で、今回の移行で引っかかった以下の点を実現してもらえると、次回（何年後か判りませんが）のHinemosバージョンアップ作業のハードルがだいぶ下がるはずなので是非お願いしたいところです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;インストールディレクトリを/opt/hinemos_XXXみたいなバージョンごとに分けてほしい&lt;/li&gt;
&lt;li&gt;Agentをインストールするときに、OpenJDKを/opt/hinemos_XXX以下に一緒に入れてほしい&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;エンタープライズオプションのExp/Imp機能の画面紹介&lt;/h2&gt;

&lt;p&gt;簡単に、エンタープライズオプションで使いたかったExp/Impについて紹介します。&lt;br&gt;
このおかげで、ジョブの修正の工数が大幅に縮小されました。&lt;br&gt;
&lt;br&gt;
オプションをインストールすると、こんな感じでメニューが増えます。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160420/20160420202629.png&quot; alt=&quot;f:id:manabu-kobayashi:20160420202629p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160420202629p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
エクスポート・インポートの設定は、クライアント設定の画面から確認や変更ができます。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160420/20160420202656.png&quot; alt=&quot;f:id:manabu-kobayashi:20160420202656p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160420202656p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;実際の画面はこんな感じ。ここらへんで、エクスポート・インポート・差分比較ができます。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160420/20160420202707.png&quot; alt=&quot;f:id:manabu-kobayashi:20160420202707p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160420202707p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;変更用のExcelの画面はこんな感じで、&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160420/20160420202717.png&quot; alt=&quot;f:id:manabu-kobayashi:20160420202717p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160420202717p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;出力した内容との差分比較は、このようなCSVファイルで出力されて、変更されたところが一目でわかります
（自分の作業が想定通りか一目でわかって便利です）。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160420/20160420202911.png&quot; alt=&quot;f:id:manabu-kobayashi:20160420202911p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160420202911p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
</description>          <pubDate>Thu, 28 Apr 2016 12:16:33 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328537792370893698</guid>
          
            <category>Hinemos</category>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160420/20160420200927.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>NewsPicks：記事をオススメするLINE BOTをつくってみた</title>
          <link>http://tech.uzabase.com/entry/2016/04/15/140513</link>          <description>&lt;p&gt;はじめまして。NewsPicks技術チームの井原です。&lt;/p&gt;

&lt;p&gt;チャットボット（Bot）という言葉を聞いたことがあるでしょうか。スマホやWebのメッセンジャー上で動く自動会話ロボットで、4/7にLINEが&lt;a href=&quot;https://business.line.me/ja/products/4/introduction&quot;&gt;BOT API Trial&lt;/a&gt;を公開したことでエンジニア界隈で一躍ホットなトピックとなりました。今週にはFacebookが対応を発表し、NewsPicksでも話題になりました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fnewspicks.com%2Fnews%2F1496965&quot; title=&quot;FacebookがMessengerのチャットボットのプラットフォームを発表&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://newspicks.com/news/1496965&quot;&gt;newspicks.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;私もBOT API Trialの公開で大喜びしたクチで、さっそく週末と帰宅後の時間でLINE BOTを作ってみました。&lt;/p&gt;

&lt;h1&gt;うま&lt;/h1&gt;

&lt;p&gt;こちらが作成したBotです。「うま」（NewsPicks非公式Bot）といいます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414174014.png&quot; alt=&quot;f:id:ryoju:20160414174014p:plain&quot; title=&quot;f:id:ryoju:20160414174014p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ユーザーが知りたいことをうまに伝えると、良さそうなNewsPicksの記事を探してお教えします。記事の内容が気になったら、画像をタップするとページが開きます。&lt;/p&gt;

&lt;p&gt;さて、うまがどういうふうにできているのかご説明いたしましょう。&lt;/p&gt;

&lt;h1&gt;インフラ環境&lt;/h1&gt;

&lt;p&gt;うまはAWSで動いています。EC2（w/ Elastic IP） + ELB + CloudFront + Certificate Manager + Route 53という構成です。Certificate Managerを使うためにバージニア北部のリージョンで動かしています。&lt;/p&gt;

&lt;p&gt;LINE BOTを動かすために以下の対応が必要でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;LINE BOTのコールバックを受けるためにはSSLが必須で、かつ&lt;a href=&quot;http://qiita.com/git6_com/items/008404506836011af33b&quot;&gt;証明書を選り好みする&lt;/a&gt;ため、Certificate Managerの証明書を使っています。私が所有しているドメインに対して作成した証明書をCloudFrontに紐付けて、さらにCloudFrontのエンドポイントをRoute 53のAレコードで設定しています。ここの設定に苦労したので、キャプチャを貼付しておきます。よかったら参考にしてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Certificate Manager&lt;br&gt;コールバックURLに使いたいドメインで証明書を作成します。ワイルドカードである必要はありません。&lt;Br&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414202224.png&quot; alt=&quot;f:id:ryoju:20160414202224p:plain:w400&quot; title=&quot;f:id:ryoju:20160414202224p:plain:w400&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:400px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;CloudFront&lt;br&gt;ディストリビューションを作成し、証明書を設定します。CNAMEにもコールバックURLのドメインを設定します。&lt;br&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414202227.png&quot; alt=&quot;f:id:ryoju:20160414202227p:plain:w400&quot; title=&quot;f:id:ryoju:20160414202227p:plain:w400&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:400px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Route 53&lt;br&gt;ドメインのAタグにディストリビューションを設定します。&lt;br&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414202230.png&quot; alt=&quot;f:id:ryoju:20160414202230p:plain:w200&quot; title=&quot;f:id:ryoju:20160414202230p:plain:w200&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:200px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LINE BOTはAPIの呼び出し元のIPアドレスを事前に登録しておく必要があり、固定グローバルIPが必要となります（可変だと突然呼び出しが通らなくなるおそれがある）。そのためにElastic IPをEC2インスタンスに付けています。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ちなみに、私はさくらのVPSを1台契約しており、最初はそれを使おうとしたのですが、証明書の問題でうまくいきませんでした。仕方なくAWSに環境を作って、開発中のプログラム一式も移したという経緯がありました。おそらくLINE BOT APIのサーバ側でチェックしているのでしょうが、無償で取れるSSL証明書ではこちらの用意したコールバックURLを呼んでくれない（？）ようで、GMO GlobalSignの試用証明書、EcoCertの試用証明書と試したのですが、いずれもうまくいきませんでした。SSL証明書はLINE BOTを作ろうとする趣味プログラマのハードルとなっていて、BOT API Trialの公開から数日は「この証明書なら大丈夫」「これはダメ」みたいな話題が多かったです。&lt;/p&gt;

&lt;h1&gt;メッセージの処理と記事推薦&lt;/h1&gt;

&lt;p&gt;ユーザーが知りたいことを送信してから、うまが記事を提示するまでの流れは以下のようになっています。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;形態素解析&lt;/li&gt;
&lt;li&gt;特徴語抽出&lt;/li&gt;
&lt;li&gt;記事の検索&lt;/li&gt;
&lt;li&gt;記事の選択&lt;/li&gt;
&lt;li&gt;記事の提示&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;また、大まかなデータのやりとりはこのような形になります。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414213825.png&quot; alt=&quot;f:id:ryoju:20160414213825p:plain&quot; title=&quot;f:id:ryoju:20160414213825p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;1. 形態素解析&lt;/h3&gt;

&lt;p&gt;ユーザーがLINEでうまとのトークを開始し、知りたいことを入力すると、LINEのサーバを経由してコールバックURLへ&lt;a href=&quot;https://developers.line.me/bot-api/api-reference#receiving_messages&quot;&gt;テキストメッセージ&lt;/a&gt;がPOSTされます。テキストメッセージからユーザーの入力した知りたいことを取り出して形態素解析を行い、単語に切り分けます。
形態素解析エンジンにはMeCabとIPA辞書（オフィシャルサイトで配布されているもの）を使っています。&lt;/p&gt;

&lt;h3&gt;2. 特徴語抽出&lt;/h3&gt;

&lt;p&gt;ユーザーは自然な（口語的な）表現で知りたいことを入力するため、検索の前処理として不要な単語を落としています。ここはバリエーションの考えられる処理ですが、現状では単純に名詞だけを残し、それ以外の品詞はすべて落としています。&lt;/p&gt;

&lt;p&gt;ただ、ログを見るとやはり適切ではない分割をされているケースが多いです。NewsPicksが経済ニュースアプリであるためか、企業名等の固有名詞をメッセージに含む場合が多いのですが、分割しすぎているケースが頻繁に見られます。提示するニュースの適切さをあげるには、ここの改善が大事だなという印象があります。企業・業界情報プラットフォームである&lt;a href=&quot;https://www.uzabase.com/speeda/&quot;&gt;SPEEDA&lt;/a&gt;の辞書を使えばもっと良くなるかもしれません。&lt;/p&gt;

&lt;h3&gt;3. 記事の検索&lt;/h3&gt;

&lt;p&gt;抽出された特徴語を用いてNewsPicksの記事を検索します。ここではNewsPicksの検索機能は使わず、Google検索を使っています。NewsPicksの検索機能は有料会員にだけ開放されている機能なので、誰にでもオープンなGoogle検索にしました。GoogleのWeb検索で上位10件を取得しています。&lt;/p&gt;

&lt;h3&gt;4. 記事の選択&lt;/h3&gt;

&lt;p&gt;うまは、1つの知りたいことに対して1件だけ記事を提示するため、検索結果の中から提示する記事を選択する必要があります。画像を合わせて提示したいので、検索結果の上位から画像があるかをチェックしていき、画像があるものが見つかればそれを選択しています。&lt;/p&gt;

&lt;p&gt;ここも将来的な改善の余地が大きい箇所です。たとえば、検索結果の記事ごとにPick数を取得して重み付けをする、みたいなことはすぐに思いつきます。ただ、やりだすと終わりがありませんし、記事の内容を判定に使うためにはクローリングやページの処理が必要で、レスポンスタイムがそのぶん伸びてしまうこともあり、このような処理としています。&lt;/p&gt;

&lt;h3&gt;5. 記事の提示&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.line.me/bot-api/api-reference#sending_rich_content_message&quot;&gt;リッチメッセージ&lt;/a&gt;を作ってLINEサーバにPOSTすると、ユーザーに記事が提示されます。&lt;/p&gt;

&lt;p&gt;以上の処理がワンセットで、テキストメッセージを受け付けるたびにこれを実行します。&lt;/p&gt;

&lt;h1&gt;社内公開&lt;/h1&gt;

&lt;p&gt;だいたい動くようになったところで、社内(ニューズピックス/ユーザベース)のSlackでうまを公開しました。けっこう好評で皆に使ってもらえたのですが、やっぱりユーザーの実際の使い方というのは、開発者に様々な気づきやアイディアを与えてくれるものです。以下はNewsPicksのメンバーがSlackにポストしてくれたキャプチャです。&lt;/p&gt;

&lt;h3&gt;時間の指定&lt;/h3&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414204703.jpg&quot; alt=&quot;f:id:ryoju:20160414204703j:plain:w250&quot; title=&quot;f:id:ryoju:20160414204703j:plain:w250&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:250px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414204706.png&quot; alt=&quot;f:id:ryoju:20160414204706p:plain:w250&quot; title=&quot;f:id:ryoju:20160414204706p:plain:w250&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:250px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;いまの処理方法では、時間（記事の公開時刻）をまったく考慮していません。「今日の」「昨日の」のような時間指定のあるメッセージだと、ユーザーの意図を踏まえないイマイチな答えになってしまいます。改善ポイントですね。&lt;/p&gt;

&lt;h3&gt;形容詞の使用&lt;/h3&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414204734.png&quot; alt=&quot;f:id:ryoju:20160414204734p:plain:w250&quot; title=&quot;f:id:ryoju:20160414204734p:plain:w250&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:250px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;現在の処理方式では特徴語抽出で名詞だけを残しており、「盛り上がった」は形容詞なので、検索結果に何ら反映されません。この場合は「ニュース」だけで検索した結果を返すことになっています。&lt;/p&gt;

&lt;p&gt;まあ、うまは生まれたばかりだからね……。開発者としてはがんばって賢くしてやりたいものです。&lt;/p&gt;

&lt;h1&gt;ソースコード&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ryoju/newspicks_bot&quot;&gt;現状のソースコードをGithubに上げた&lt;/a&gt;ので、よろしければご覧ください。まだα版くらいの感じなので、ごちゃごちゃ弄っている最中でコメントも皆無と、綺麗とは言いがたいのですが。そのうち整理されてくるはず……たぶん。&lt;/p&gt;

&lt;p&gt;実装にはPythonを使っています。フレームワークはDjango(w/ Django REST Framework)です。 どこかで動かしてみる時には、newspicks/settings_line.pyにあなたのLINE BOTのChannel ID, Channel Secret, MIDを記載してください。&lt;/p&gt;
</description>          <pubDate>Fri, 15 Apr 2016 14:05:13 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328537792371135866</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414174014.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Slackを全社導入したので、社内向け利用マニュアルを公開してみた</title>
          <link>http://tech.uzabase.com/entry/2016/03/17/145415</link>          <description>&lt;p&gt;はじめまして。ユーザベース Cultureチームの木村です。先月、インターンとして入社し、就職活動と二足の草鞋でやっています。
&lt;br&gt;
&lt;br&gt;
今回、ユーザベース全体として「Slack」の全面導入が決まりました！
これまで、社内でのチャットコミュニケーションはチームごとにLINE・チャットワーク・Skypeを使用し混在していましたが、今後はSlackに統一をしていきます。
&lt;br&gt;
&lt;br&gt;
全社導入時に使用した&lt;span style=&quot;color: #F5A2A2&quot;&gt;Slackのご紹介&lt;/span&gt;と&lt;span style=&quot;color: #F5A2A2&quot;&gt;簡易マニュアル&lt;/span&gt;を公開します。Slackが気になっていた方や初めて知る方に、他のコミュニケーションツールと違う点についてお伝えしたいと思います。
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;What’s Slack？&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316161207.png&quot; alt=&quot;f:id:uzabase:20160316161207p:plain&quot; title=&quot;f:id:uzabase:20160316161207p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Slack（スラック）は、スチュワート・バターフィールドによって開発された、チームコミュニケーションツール。2013年8月に公開され、公開から24時間以内に8000の顧客にサインアップされた。現在Slackは世界中で急速に普及しており、1日に利用するアクティブユーザー数は125万人で、有料会員が37万人(2015年9月時点)。利用者数は90日ごとに倍増するペースで伸び続けている。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;u&gt;&lt;b&gt;ざっくり言えば、「ビジネス用途のLINE」です。&lt;/b&gt;&lt;/u&gt;
&lt;br&gt;メールで堅苦しくやり取りをするよりも、チャットツールで簡単にコミュニケーションをとる方が、精神的にも楽ですし、効率的ですよね。LINEはプライベートと混同されてしまうし・・というわけで、Slackになりました。
&lt;br&gt;
ですが、チャットワークを始め、数ある企業向けコミュニケーションツールの中から、どうしてSlackが選ばれたのか？
&lt;br&gt;
ということで、以下にSlackを利用する5つのメリットをあげてみました！
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;Slackのイケてる点&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;b&gt;情報の抽出が簡単＆網羅的&lt;/b&gt;
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163128.png&quot; alt=&quot;f:id:uzabase:20160316163128p:plain&quot; title=&quot;f:id:uzabase:20160316163128p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
検索機能で、チャンネル(LINEのグループチャットの概念)をまたいで、過去ログ全ての検索ができます。
&lt;br&gt;また、ファイルやまとまった文章を投稿するPost機能は、それ自体にコメントをつけることができるので、返答や意見が一か所にまとまりやすいです。Postは複数人での共同編集にも対応しています。
&lt;br&gt;
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;連携できる外部サービスが豊富&lt;/b&gt;
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163143.png&quot; alt=&quot;f:id:uzabase:20160316163143p:plain&quot; title=&quot;f:id:uzabase:20160316163143p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
Slackと言えば拡張性。例えばGmailからメールが来たらSlackに通知され、そのままSlack上で内容の確認ができるなど、あらゆる通知や情報がSlackを見るだけで確認ができるようになります。TwitterやRSS、Google Calendarといった一般的なサービスから、GitHubなどエンジニア向けのサービスまで、幅広く連携することができます。
&lt;br&gt;
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;UIがシンプルでスタイリッシュ&lt;/b&gt;
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316170627.png&quot; alt=&quot;f:id:uzabase:20160316170627p:plain&quot; title=&quot;f:id:uzabase:20160316170627p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
個人的な好みにはなりますが、とにかくお洒落でシンプル。洗練されたUIは、SPEEDAと共通する部分があるように思えます。コミュニケーションツールは毎日使うものですので、やはりごちゃごちゃしたUIよりも、シンプルで分かり易いものの方が捗ります。
&lt;br&gt;
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;各端末用のアプリがある&lt;/b&gt;
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316162310.jpg&quot; alt=&quot;f:id:uzabase:20160316162310j:plain&quot; title=&quot;f:id:uzabase:20160316162310j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
ブラウザ版の他、Mac、Windowsのデスクトップ版、iOS、Androidのアプリ版もあり、いつでもどこでも使うことができます。
&lt;br&gt;
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;各種コードをアップロードできるsnippet機能がある。&lt;/b&gt;
&lt;br&gt;
この点が、とりわけエンジニアライクな設計になっています。Tech Blogということで、少し詳しくご説明します。
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163202.png&quot; alt=&quot;f:id:uzabase:20160316163202p:plain&quot; title=&quot;f:id:uzabase:20160316163202p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
左上の入力画面にコードの名前を打ち込み、右上のプルダウンでコードの言語種類を選ぶと、中央のプログラムコードが色付けされたり、自動でインデントがつけられます。
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163221.png&quot; alt=&quot;f:id:uzabase:20160316163221p:plain&quot; title=&quot;f:id:uzabase:20160316163221p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
実際に投稿すると、このように見えます。これまで、他のチャットサービスでコードをベタ貼りしていた時と比べて、かなり見違えると思います。色付け、インデントに加えて行番号も書いてあるため、他のエンジニアとのコミュニケーションもとりやすくなっています。
&lt;br&gt;
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163243.png&quot; alt=&quot;f:id:uzabase:20160316163243p:plain&quot; title=&quot;f:id:uzabase:20160316163243p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
投稿されたSnippetには、Post機能と同じようにコメントを付けられるだけではなく、検索でコードやコメントの中身まで引っかかります！
&lt;br&gt;
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163304.png&quot; alt=&quot;f:id:uzabase:20160316163304p:plain&quot; title=&quot;f:id:uzabase:20160316163304p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
ちなみに、これは「in:helloslack during:2016 helloWorld」と検索しており、『「helloslack」チャンネルの2016年に投稿された中で、helloWorldの文字列が存在する』メッセージもしくはファイルを抽出しています。
&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;How to Slack&lt;/h3&gt;

&lt;h4&gt;1.コミュニケーション&lt;/h4&gt;

&lt;p&gt;Slackでのコミュニケーション方法は、以下の3通りです。
&lt;br&gt;
・メンバー全体に特定の情報を送信する「チャンネル」
&lt;br&gt;
・個々のメンバーに向けた「ダイレクトメッセージ」
&lt;br&gt;
・特定のメンバーのみが閲覧できる「プライベートグループ」
&lt;br&gt;&lt;/p&gt;

&lt;h5&gt;1-1.チャンネル&lt;/h5&gt;

&lt;p&gt;チャンネルとは、関連する話題を部屋別に分ける機能で、LINEのグループチャットと同じようなものです。ただし、このチャンネルに表示している内容は、Slack全体に共有されるので、チャンネルに参加していない人でも自由に閲覧することが可能です。(チャンネルに参加していないメンバーは、発言することはできません。)
&lt;br&gt;
&lt;br&gt;
【新規チャンネル作成】
&lt;br&gt;
新規チャンネルは「CHANNELS」の「＋ボタン」をクリックして作成をします。お好みのチャンネル名と招待したいメンバー(後からでも追加可能)、チャンネルの説明をいれたら、「Create channel」をクリックしてください。
&lt;br&gt;
 &lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163337.png&quot; alt=&quot;f:id:uzabase:20160316163337p:plain&quot; title=&quot;f:id:uzabase:20160316163337p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
＋ボタンの左にある「CHANNELS」からは既存のCHANNELを検索することができます。
&lt;br&gt;
&lt;br&gt;
【チャット】
&lt;br&gt;
通常の会話は、チャットツールと同様でテキストを入力し、Enterで送ることができます。編集したい場合には、テキスト入力欄の右に「･･･」がでますので、そこから「Edit message」で編集してください。
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163821.png&quot; alt=&quot;f:id:uzabase:20160316163821p:plain&quot; title=&quot;f:id:uzabase:20160316163821p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
コメントにPinやStarを付けて、後から見やすくすることもできます。
&lt;br&gt;
&lt;br&gt;
【メンション】
&lt;br&gt;
投稿時に、以下のコマンドを入力すると、特定のユーザー名を記載したメッセージが送れるようになります。初期設定では、メンションのみがポップアップ通知されるようになっているため、これを使うことで相手にメッセージが伝わりやすくなります。
&lt;br&gt;
@username → 特定の個人へのメンションは、@を入れて一覧の予測変換より選択出来ます。
&lt;br&gt;
@everyone or @group → チャンネル関係なく、全てのメンバーへのメンション
&lt;br&gt;
@here → オンラインのメンバーへのメンション
&lt;br&gt;
@channel → チャンネルのメンバー全員へのメンション
&lt;br&gt;
&lt;br&gt;
【ファイル共有】
&lt;br&gt;
テキスト入力欄左部の＋ボタンから、「Upload a file」、もしくはドラッグアンドドロップで、テキスト入力エリアに画像やファイルを持ってくると、アップロードが可能です。gif・jpg・png・pdf・textなど、どんなファイルでも送ることができます。
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h5&gt;1-2.ダイレクトメッセージ&lt;/h5&gt;

&lt;p&gt;ダイレクトメッセージは、名前の通り直接連絡のやり取りができます。
一対一の会話なので、他の参加者が内容を確認することはできません。
&lt;br&gt;
 &lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163348.png&quot; alt=&quot;f:id:uzabase:20160316163348p:plain&quot; title=&quot;f:id:uzabase:20160316163348p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
画面左部「DIRECT MESSAGES」からユーザーの検索ができます。
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h5&gt;1-3.プライベートグループ&lt;/h5&gt;

&lt;p&gt;プライベートグループは、チャンネルとほぼ同じ機能ですが、このチャンネルに書かれた内容は参加メンバーのみに共有され、同じチーム内でも閲覧はできません。クローズドな環境なのでサプライズ等の計画に使えそうです！
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163925.png&quot; alt=&quot;f:id:uzabase:20160316163925p:plain&quot; title=&quot;f:id:uzabase:20160316163925p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
通常のチャンネル作成と同様、「CHANNNELS」の「＋ボタン」から作成画面へ
→上部の「Public」タブをクリックすると「Private」となります。
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;2.別アプリとの連携&lt;/h4&gt;

&lt;p&gt;【Google Driveとの連携】
Google DriveとSlackを連携しておくと、Google DriveのファイルURLをSlackに貼り付けた際に、Slack上にファイルとして認識される（検索対象になる） ようになります。スプレッドシートなどを頻繁に触る方は設定しておくと、Slack内から検索できたり、直にファイルが開けたりしてとても便利になります。
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316164158.png&quot; alt=&quot;f:id:uzabase:20160316164158p:plain&quot; title=&quot;f:id:uzabase:20160316164158p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
画面左部の自分のユーザーネームをクリック
&lt;br&gt;
→右部「Account」をクリック
&lt;br&gt;
→左部「Configure Apps」をクリック
&lt;br&gt;
→一覧から「Google Drive」をクリック
&lt;br&gt;
→「Authenticate」から連携許可
&lt;br&gt;
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316173141.png&quot; alt=&quot;f:id:uzabase:20160316173141p:plain&quot; title=&quot;f:id:uzabase:20160316173141p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
URLではなく、ファイル形式で表示されるようになった上、Slack上でコメントを付けられるようになりました！
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;感想&lt;/h3&gt;

&lt;p&gt;長々と書いてしまいましたが、何か一つでもご参考になるものがあれば幸いです。スラッシュコマンドやPin機能など、Slackにはまだまだ可能性が秘められております。皆さまもぜひお試しください。&lt;br&gt;
私個人としても、全社へのSlack導入のお仕事をいただいてから、半信半疑で使い始めたのですが、今はすっかりSlackの虜です。連携サービスやチャンネルの運用を駆使して&lt;span style=&quot;color: #F5A2A2&quot;&gt;「社内のコミュニケーション全てをSlackで完結させる」&lt;/span&gt;と考えはじめたら、もうワクワクの極みです。&lt;br&gt;
そして就活生である身としては、Slackを全社的に有効活用させて&lt;b&gt;「はい！私は、インターン先の企業において、社内コミュニケーションの活性化に尽力しました！」&lt;/b&gt;的なことを言えるようになりたいものです。&lt;/p&gt;
</description>          <pubDate>Thu, 17 Mar 2016 14:54:15 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328537792367290487</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316161207.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Hinemos5.0.1移行記（その１：理想と現実の葛藤）</title>
          <link>http://tech.uzabase.com/entry/2016/03/11/155758</link>          <description>&lt;p&gt;ユーザベース インフラチームの小林です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2016/02/18/165541&quot;&gt;前回の記事&lt;/a&gt;から引き続き、今回からHinemos5.0.1への移行のお話です。&lt;/p&gt;

&lt;h2&gt;が、その前に1箇所訂正があります&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2016/02/18/165541&quot;&gt;前回のブログで書いた&lt;/a&gt;ジョブスケジュール日跨ぎの件ですが、&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160226/20160226221222.jpg&quot; alt=&quot;f:id:manabu-kobayashi:20160226221222j:plain&quot; title=&quot;f:id:manabu-kobayashi:20160226221222j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;0:00～48:00に設定する事で、日跨ぎができました！&lt;br&gt;
先日Hinemosセミナーに出た際に、NTTデータさんに教えてもらいました。ありがとうございます。&lt;br&gt;
（けれど、日付の指定が年・月・日をいちいち選ばないといけないので、やっぱり不便です。
日付選択を、カレンダーから選択できる機能もつけてしてほしい・・・と思ってます。）
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;移行の流れ&lt;/h2&gt;

&lt;p&gt;さて、話を本題に。
&lt;br&gt;
弊社のHinemos環境をバージョンアップするにあたり、おおざっぱに以下の流れで行いました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hinemos5Managerを新規構築 、動作検証&lt;/li&gt;
&lt;li&gt;Hinemos3のデータをHinemos5に移行&lt;/li&gt;
&lt;li&gt;Hinemos3からHinemos5への順次切り替え&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;（正確にはHinemos3.1.2とHinemos5.0.1ですが、省略します。）&lt;/p&gt;

&lt;h2&gt;では、動作検証の話&lt;/h2&gt;

&lt;p&gt;新規構築は、マニュアル通りに行えば特に問題はありません。
動作検証においては、Hinemos3ではあまり高度な機能を使っていなかったこともあり、&lt;br&gt;
ジョブスケジューラとして、以下のような基本的な部分だけの検証で十分でした。(新機能は移行後に順次追加。)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;指定した通りにコマンド実行ができるか&lt;/li&gt;
&lt;li&gt;きちんと先行条件が効くか&lt;/li&gt;
&lt;li&gt;スケジューラが機能するか&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;上の部分について全然問題はなかったのですが、Hinemos3と違うところがあったので、思いついた部分を列挙します。&lt;br&gt;
&lt;br&gt;
&lt;b&gt;先行条件が自動で変わって便利！&lt;/b&gt;&lt;br&gt;
Himemos3の時、ジョブIDを変更したいと思っても、後続のジョブの先行条件も変更しなければならず、すごく億劫でした。&lt;br&gt;
ところが、今回のバージョンアップで試してみたところ、下記のようにジョブIDを変更すると、それに紐付く後続ジョブの先行条件が自動で変わってくれます！&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160229/20160229170138.jpg&quot; alt=&quot;f:id:manabu-kobayashi:20160229170138j:plain&quot; title=&quot;f:id:manabu-kobayashi:20160229170138j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;デフォルトのチェックが余計？&lt;/b&gt;&lt;br&gt;
新規ジョブ作成時、デフォルトで【条件を満たさなければ終了する】にチェックが入っているのですが、これにチェックが入っていると、前のジョブが異常終了した際などに終了してしまうので、弊社の環境では不便でした。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160229/20160229170136.jpg&quot; alt=&quot;f:id:manabu-kobayashi:20160229170136j:plain&quot; title=&quot;f:id:manabu-kobayashi:20160229170136j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;また、&lt;b&gt;ジョブをコピーして追加したい時に、うまくコピーができる場合と、できない場合（実行コマンド等が空になる）があるので、その謎を解きたいと思ってます。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;データ移行は、&lt;A Href=&quot;http://atomitech.jp/&quot;&gt;アトミテック&lt;/A&gt;さんに依頼&lt;/h2&gt;

&lt;p&gt;次に、2点目の「Hinemos3のデータをHinemos5に移行」では、弊社の環境でノード数は約70、ジョブの登録数は約3000とありました。
これを人力で、ミスなく再設定する自信がない・・・&lt;br&gt;
という事で、Hinemosのデータ変換は、Hinemosソリューションパートナーの&lt;A Href=&quot;http://atomitech.jp/&quot;&gt;アトミテック&lt;/A&gt;さんに依頼をさせていただきました。
今回はデータの変換だけではなく、Hinemos5移行後のサポートも含めて契約をさせていただき、
後々それが大きな助けとなりました。&lt;/p&gt;

&lt;p&gt;ちなみに、アトミテックさんは、&lt;a href=&quot;http://atomitech.jp/hinemos/blog/:title&quot;&gt;ブログ&lt;/a&gt;でHinemosの情報発信をしており、いろいろな機能の検証をされてます。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Hinemos3-&gt;5へのデータ変換は、アトミテックさんにお願いしたことで、
弊社側での残作業は3つ目の「Hinemos3からHinemos5への順次切り替え」になります。&lt;/p&gt;

&lt;h2&gt;目指す移行方法&lt;/h2&gt;

&lt;p&gt;「順次切り替え」と書かせていただきましたが、
以下の要因から、一括切り替えではなく、順次確認をしながらの切り替えが可能でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hinemos3とHinemos5のエージェントは同居可能(Windows環境は除く)&lt;/li&gt;
&lt;li&gt;ジョブの組み方を単純にしているため、機能検証をする項目が少ない&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;後者について、もう少し詳しく説明します。&lt;br&gt;
一般的なジョブの組み方としては、以下のようにジョブネット間を先行条件で繋ぐことが多いと思います。（Hinemosに限らず）&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160227/20160227013446.jpg&quot; alt=&quot;f:id:manabu-kobayashi:20160227013446j:plain&quot; title=&quot;f:id:manabu-kobayashi:20160227013446j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
ところが、弊社環境では、ジョブネット間の連携において、先行条件で繋いでいませんでした。
どういうことかというと、各ジョブネットの最後にファイルを作成させて、
次のジョブは、そのファイルがあると動くようにしており、ファイルの作成・監視もshellで動かしています。
こんな感じです。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160227/20160227013915.jpg&quot; alt=&quot;f:id:manabu-kobayashi:20160227013915j:plain&quot; title=&quot;f:id:manabu-kobayashi:20160227013915j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;このおかげで、こんなことが可能になります。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160227/20160227013500.jpg&quot; alt=&quot;f:id:manabu-kobayashi:20160227013500j:plain&quot; title=&quot;f:id:manabu-kobayashi:20160227013500j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;こうする事で、&lt;span style=&quot;color: #ff5252&quot;&gt;&lt;b&gt;一度に全部を切り替えるのではなく、ジョブネット一つずつの動作確認をしながら切り替えができるので、
スケジュールに余裕を持たせた移行が可能な状況でした。
&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;と思ったら単純にはAgentが同居できなかったよ！&lt;/h2&gt;

&lt;p&gt;Agentで使うJavaをマニュアルから抜粋すると、&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt; Hinemosエージェントを利用する場合
 以下のいずれかのopenjdkをインストールしてください。
   java-1.7.0-openjdk
   java-1.6.0-openjdk
&lt;/pre&gt;


&lt;p&gt;という事になっているのですが、弊社ではOracleJDK1.8を使ってました。&lt;br&gt;
Agentにいれるために、既存のサービスに影響が出そうなことをしたくない。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;そしてもう一つ。
インストールディレクトリ
/opt/hinemos
って、バージョンが違ってもインストール先が一緒だということ。&lt;br&gt;
（rpmコマンドでのインストールなので、オプションを付ければ変更もできるかもしれませんが、デフォルトはこのまま）&lt;br&gt;
&lt;br&gt;
つまり、異なるバージョンが同居できるといっても、インストール先をデフォルトから変更をしないといけないのです。&lt;/p&gt;

&lt;h2&gt;状況の整理&lt;/h2&gt;

&lt;p&gt;状況を整理すると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Agent用にサポート対象バージョンのOpenJDKを入れるか、OracleJDK1.8を使い続けるか。&lt;/li&gt;
&lt;li&gt;Hinemos3とHinemos5のAgentが同居できるといっても、どちらかのインストールディレクトリを変えないといけない。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;という問題にぶつかりました。&lt;/p&gt;

&lt;p&gt;前者ですが、当初は簡単に考えていて、
OpenJDKのバイナリファイルをダウンロードして、Agentのインストールディレクトリに展開をすればいいのでは、と思っていましたが、
&lt;a href=&quot;http://openjdk.java.net/&quot;&gt;http://openjdk.java.net/&lt;/a&gt;をみると、yumからしかインストールができないようです。
yumでインストールした場合、万が一環境変数に変更があったりすると、既存のジョブに影響が出てしまう。
うーん、困った。&lt;/p&gt;

&lt;p&gt;そこで、後者。&lt;br&gt;
新規でインストールをするHinemos5のAgentのインストールディレクトリを変える&lt;br&gt;
or&lt;br&gt;
既存サービスで利用をしているHinemos3のAgentのインストールディレクトリを変える&lt;br&gt;
&lt;br&gt;
という２択ですが、これから使う方を大事にしたいと思い、Hinemos3の方を変えることにしました。&lt;/p&gt;

&lt;p&gt;ここで登場をするのが、やはり&lt;A Href=&quot;http://atomitech.jp/&quot;&gt;アトミテック&lt;/A&gt;さんなのでした。
意外と長くなったので次回へ続く。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;新機能のジョブのリトライ間隔の検証&lt;/h2&gt;

&lt;p&gt;ちょっと話題を変えまして、小ネタを一つ。&lt;br&gt;
&lt;br&gt;
ジョブのリトライ機能が追加されましたが、&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;リトライ間隔ってどれくらいなんだろう？&lt;/li&gt;
&lt;li&gt;それは変更ができるか？&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;というのが気になり、検証をしてみました。
管理者マニュアルには、他のリトライに関する説明はあったのですが、上の点については書いてないんだもの。。。。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;では、検証開始。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;1．エラーになるジョブを作る
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160304/20160304212735.png&quot; alt=&quot;f:id:manabu-kobayashi:20160304212735p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160304212735p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br&gt;
2．あたりまえだけどすぐ終わる。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160304/20160304210055.png&quot; alt=&quot;f:id:manabu-kobayashi:20160304210055p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160304210055p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
3．リトライ回数を2で設定してみたら、落ちるまで20秒かかった。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160304/20160304210103.png&quot; alt=&quot;f:id:manabu-kobayashi:20160304210103p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160304210103p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
4．ソースを見てみた。&lt;br&gt;
というか、retryって言葉でgrepをかけてみて探してみた。そして、下の情報にたどり着く。&lt;br&gt;
どうやら、「job.retry.interval」という値で管理ができる。デフォルトは10*1000で、実際は10秒なので、msで設定しているっぽい。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160304/20160304210111.png&quot; alt=&quot;f:id:manabu-kobayashi:20160304210111p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160304210111p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
5．プロパティ画面で、job.retry.intervalを60000で設定してみた。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160304/20160304210115.png&quot; alt=&quot;f:id:manabu-kobayashi:20160304210115p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160304210115p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
6．ちゃんと2分伸びた！
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160304/20160304210125.png&quot; alt=&quot;f:id:manabu-kobayashi:20160304210125p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160304210125p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
&lt;br&gt;
というわけで、&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;リトライ間隔のデフォルトは10秒&lt;/li&gt;
&lt;li&gt;job.retry.intervalで変更可能&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;というお話でした。
&lt;br&gt;&lt;/p&gt;
</description>          <pubDate>Fri, 11 Mar 2016 15:57:58 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328537792364897598</guid>
          
            <category>Hinemos</category>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160226/20160226221222.jpg" type="image/jpeg" length="0" />
        </item>
      
    
  </channel>
</rss>
